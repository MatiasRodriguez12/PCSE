
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000348c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003704  08003704  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800370c  0800370c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08003714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          0000009c  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098f6  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de0  00000000  00000000  000299d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000738  00000000  00000000  0002bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c0a  00000000  00000000  0002c720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea0f  00000000  00000000  0005332a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e22e0  00000000  00000000  00061d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144019  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021f4  00000000  00000000  0014406c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003624 	.word	0x08003624

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	08003624 	.word	0x08003624

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <debounceFSM_init>:

/*debounceFSM_init
 *Se encarga de asignar el estado inicial en la MEF utilizada para validación de pulsaciones
 *Por defecto, se asigna estado BUTTON_UP como inicial
 *Se inicializa la estructura para toma de tiempo y validación de pulsaciones*/
void debounceFSM_init(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	StateBU=BUTTON_UP;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <debounceFSM_init+0x24>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
	StateBD=BUTTON_UP;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <debounceFSM_init+0x28>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	delayInit(&delayButtonBU,TIME_VALID_PUSH);
 80005b4:	2128      	movs	r1, #40	; 0x28
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <debounceFSM_init+0x2c>)
 80005b8:	f000 f94a 	bl	8000850 <delayInit>
	delayInit(&delayButtonBD,TIME_VALID_PUSH);
 80005bc:	2128      	movs	r1, #40	; 0x28
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <debounceFSM_init+0x30>)
 80005c0:	f000 f946 	bl	8000850 <delayInit>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200000e4 	.word	0x200000e4
 80005cc:	200000e5 	.word	0x200000e5
 80005d0:	200000cc 	.word	0x200000cc
 80005d4:	200000d8 	.word	0x200000d8

080005d8 <debounceFSM_update>:

/*debounceFSM_update
 *Verifica el estado del pulsador y actualiza el estado de la MEF*/
void debounceFSM_update(uint8_t pulsador){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]

	uint8_t buttonSel=0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]

	if (pulsador==ButtonUP){
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d106      	bne.n	80005fa <debounceFSM_update+0x22>
		buttonState=StateBU;
 80005ec:	4b6e      	ldr	r3, [pc, #440]	; (80007a8 <debounceFSM_update+0x1d0>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b6e      	ldr	r3, [pc, #440]	; (80007ac <debounceFSM_update+0x1d4>)
 80005f2:	701a      	strb	r2, [r3, #0]
		buttonSel=ButtonUP;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e005      	b.n	8000606 <debounceFSM_update+0x2e>
	}
	else{
		buttonState=StateBD;
 80005fa:	4b6d      	ldr	r3, [pc, #436]	; (80007b0 <debounceFSM_update+0x1d8>)
 80005fc:	781a      	ldrb	r2, [r3, #0]
 80005fe:	4b6b      	ldr	r3, [pc, #428]	; (80007ac <debounceFSM_update+0x1d4>)
 8000600:	701a      	strb	r2, [r3, #0]
		buttonSel=ButtonDOWN;
 8000602:	2301      	movs	r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
	}
	switch (buttonState){
 8000606:	4b69      	ldr	r3, [pc, #420]	; (80007ac <debounceFSM_update+0x1d4>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b03      	cmp	r3, #3
 800060c:	f200 80c4 	bhi.w	8000798 <debounceFSM_update+0x1c0>
 8000610:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <debounceFSM_update+0x40>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000629 	.word	0x08000629
 800061c:	08000671 	.word	0x08000671
 8000620:	080006e1 	.word	0x080006e1
 8000624:	0800072f 	.word	0x0800072f
		/*Estado BUTTON_UP:
		 * Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_FALLING.
		 * En estas condiciones, inicia al contador para validación.
		 * Si detecta que el pulsador no se encuentra presionado, mantiene la MEF en estado BUTTON_UP. */
		case BUTTON_UP:
			if(buttonSel==ButtonUP){
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d110      	bne.n	8000650 <debounceFSM_update+0x78>
				if(BSP_PB_GetState(BUTTON_USER)){
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fd94 	bl	800115c <BSP_PB_GetState>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <debounceFSM_update+0x70>
					delayRead(&delayButtonBU);
 800063a:	485e      	ldr	r0, [pc, #376]	; (80007b4 <debounceFSM_update+0x1dc>)
 800063c:	f000 f926 	bl	800088c <delayRead>
					StateBU=BUTTON_FALLING;
 8000640:	4b59      	ldr	r3, [pc, #356]	; (80007a8 <debounceFSM_update+0x1d0>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
				else{
					StateBD=BUTTON_UP;
				}
			}

		break;
 8000646:	e0aa      	b.n	800079e <debounceFSM_update+0x1c6>
					StateBU=BUTTON_UP;
 8000648:	4b57      	ldr	r3, [pc, #348]	; (80007a8 <debounceFSM_update+0x1d0>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
		break;
 800064e:	e0a6      	b.n	800079e <debounceFSM_update+0x1c6>
				if(gpioButton_Read()){
 8000650:	f000 fba0 	bl	8000d94 <gpioButton_Read>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <debounceFSM_update+0x90>
					delayRead(&delayButtonBD);
 800065a:	4857      	ldr	r0, [pc, #348]	; (80007b8 <debounceFSM_update+0x1e0>)
 800065c:	f000 f916 	bl	800088c <delayRead>
					StateBD=BUTTON_FALLING;
 8000660:	4b53      	ldr	r3, [pc, #332]	; (80007b0 <debounceFSM_update+0x1d8>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e09a      	b.n	800079e <debounceFSM_update+0x1c6>
					StateBD=BUTTON_UP;
 8000668:	4b51      	ldr	r3, [pc, #324]	; (80007b0 <debounceFSM_update+0x1d8>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
		break;
 800066e:	e096      	b.n	800079e <debounceFSM_update+0x1c6>
		* Verifica que se cumpla el retardo de tiempo para validar una pulsación.
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (pulsación detectada).
		* A su vez, llama a la funcion buttonPressed para togglear LED 1 y, a su vez, enviar mensaje por UART.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsación no válida). */
		case BUTTON_FALLING:
			if(buttonSel==ButtonUP){
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d11a      	bne.n	80006ac <debounceFSM_update+0xd4>
				if (delayRead(&delayButtonBU)){
 8000676:	484f      	ldr	r0, [pc, #316]	; (80007b4 <debounceFSM_update+0x1dc>)
 8000678:	f000 f908 	bl	800088c <delayRead>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d010      	beq.n	80006a4 <debounceFSM_update+0xcc>
					if(BSP_PB_GetState(BUTTON_USER)){
 8000682:	2000      	movs	r0, #0
 8000684:	f000 fd6a 	bl	800115c <BSP_PB_GetState>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <debounceFSM_update+0xc4>
						StateBU=BUTTON_DOWN;
 800068e:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <debounceFSM_update+0x1d0>)
 8000690:	2202      	movs	r2, #2
 8000692:	701a      	strb	r2, [r3, #0]
						buttonPressed(ButtonUP);
 8000694:	2000      	movs	r0, #0
 8000696:	f000 f891 	bl	80007bc <buttonPressed>
				else{
					StateBD=BUTTON_FALLING;
				}
			}

		break;
 800069a:	e080      	b.n	800079e <debounceFSM_update+0x1c6>
						StateBU=BUTTON_UP;
 800069c:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <debounceFSM_update+0x1d0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		break;
 80006a2:	e07c      	b.n	800079e <debounceFSM_update+0x1c6>
					StateBU=BUTTON_FALLING;
 80006a4:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <debounceFSM_update+0x1d0>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
		break;
 80006aa:	e078      	b.n	800079e <debounceFSM_update+0x1c6>
				if (delayRead(&delayButtonBD)){
 80006ac:	4842      	ldr	r0, [pc, #264]	; (80007b8 <debounceFSM_update+0x1e0>)
 80006ae:	f000 f8ed 	bl	800088c <delayRead>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00f      	beq.n	80006d8 <debounceFSM_update+0x100>
					if(gpioButton_Read()){
 80006b8:	f000 fb6c 	bl	8000d94 <gpioButton_Read>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <debounceFSM_update+0xf8>
						StateBD=BUTTON_DOWN;
 80006c2:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <debounceFSM_update+0x1d8>)
 80006c4:	2202      	movs	r2, #2
 80006c6:	701a      	strb	r2, [r3, #0]
						buttonPressed(ButtonDOWN);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 f877 	bl	80007bc <buttonPressed>
		break;
 80006ce:	e066      	b.n	800079e <debounceFSM_update+0x1c6>
						StateBD=BUTTON_UP;
 80006d0:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <debounceFSM_update+0x1d8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
		break;
 80006d6:	e062      	b.n	800079e <debounceFSM_update+0x1c6>
					StateBD=BUTTON_FALLING;
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <debounceFSM_update+0x1d8>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
		break;
 80006de:	e05e      	b.n	800079e <debounceFSM_update+0x1c6>
		/*Estado BUTTON_DOWN:
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_RAISING.
		* En estas condiciones, inicia al contador para validación.
		* Si detecta que el pulsador se encuentra presionado, mantiene la MEF en estado BUTTON_DOWN. */
		case BUTTON_DOWN:
			if(buttonSel==ButtonUP){
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d110      	bne.n	8000708 <debounceFSM_update+0x130>
				if(!BSP_PB_GetState(BUTTON_USER)){
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fd38 	bl	800115c <BSP_PB_GetState>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d106      	bne.n	8000700 <debounceFSM_update+0x128>
					delayRead(&delayButtonBU);
 80006f2:	4830      	ldr	r0, [pc, #192]	; (80007b4 <debounceFSM_update+0x1dc>)
 80006f4:	f000 f8ca 	bl	800088c <delayRead>
					StateBU=BUTTON_RAISING;
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <debounceFSM_update+0x1d0>)
 80006fa:	2203      	movs	r2, #3
 80006fc:	701a      	strb	r2, [r3, #0]
				else{
					StateBD=BUTTON_DOWN;
				}
			}

		break;
 80006fe:	e04e      	b.n	800079e <debounceFSM_update+0x1c6>
					StateBU=BUTTON_DOWN;
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <debounceFSM_update+0x1d0>)
 8000702:	2202      	movs	r2, #2
 8000704:	701a      	strb	r2, [r3, #0]
		break;
 8000706:	e04a      	b.n	800079e <debounceFSM_update+0x1c6>
				if(!gpioButton_Read()){
 8000708:	f000 fb44 	bl	8000d94 <gpioButton_Read>
 800070c:	4603      	mov	r3, r0
 800070e:	f083 0301 	eor.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d006      	beq.n	8000726 <debounceFSM_update+0x14e>
					delayRead(&delayButtonBD);
 8000718:	4827      	ldr	r0, [pc, #156]	; (80007b8 <debounceFSM_update+0x1e0>)
 800071a:	f000 f8b7 	bl	800088c <delayRead>
					StateBD=BUTTON_RAISING;
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <debounceFSM_update+0x1d8>)
 8000720:	2203      	movs	r2, #3
 8000722:	701a      	strb	r2, [r3, #0]
		break;
 8000724:	e03b      	b.n	800079e <debounceFSM_update+0x1c6>
					StateBD=BUTTON_DOWN;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <debounceFSM_update+0x1d8>)
 8000728:	2202      	movs	r2, #2
 800072a:	701a      	strb	r2, [r3, #0]
		break;
 800072c:	e037      	b.n	800079e <debounceFSM_update+0x1c6>
		* Verifica que se cumpla el retardo de tiempo para validar una pulsación.
		* Si detecta que el pulsador no se encuentra presionado, actualiza la MEF a estado BUTTON_UP (pulsador liberado).
		* A su vez, llama a la funcion buttonReleased para togglear LED 3 y, a su vez, enviar mensaje por UART.
		* Si detecta que el pulsador se encuentra presionado, actualiza la MEF a estado BUTTON_DOWN (liberación no válida). */
		case BUTTON_RAISING:
			if(buttonSel==ButtonUP){
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d117      	bne.n	8000764 <debounceFSM_update+0x18c>
				if (delayRead(&delayButtonBU)){
 8000734:	481f      	ldr	r0, [pc, #124]	; (80007b4 <debounceFSM_update+0x1dc>)
 8000736:	f000 f8a9 	bl	800088c <delayRead>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00d      	beq.n	800075c <debounceFSM_update+0x184>
					if(!BSP_PB_GetState(BUTTON_USER)){
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fd0b 	bl	800115c <BSP_PB_GetState>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d103      	bne.n	8000754 <debounceFSM_update+0x17c>
						StateBU=BUTTON_UP;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <debounceFSM_update+0x1d0>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
				}
				else{
					StateBD=BUTTON_RAISING;
				}
			}
		break;
 8000752:	e024      	b.n	800079e <debounceFSM_update+0x1c6>
						StateBU=BUTTON_DOWN;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <debounceFSM_update+0x1d0>)
 8000756:	2202      	movs	r2, #2
 8000758:	701a      	strb	r2, [r3, #0]
		break;
 800075a:	e020      	b.n	800079e <debounceFSM_update+0x1c6>
					StateBU=BUTTON_RAISING;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <debounceFSM_update+0x1d0>)
 800075e:	2203      	movs	r2, #3
 8000760:	701a      	strb	r2, [r3, #0]
		break;
 8000762:	e01c      	b.n	800079e <debounceFSM_update+0x1c6>
				if (delayRead(&delayButtonBD)){
 8000764:	4814      	ldr	r0, [pc, #80]	; (80007b8 <debounceFSM_update+0x1e0>)
 8000766:	f000 f891 	bl	800088c <delayRead>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00f      	beq.n	8000790 <debounceFSM_update+0x1b8>
					if(!gpioButton_Read()){
 8000770:	f000 fb10 	bl	8000d94 <gpioButton_Read>
 8000774:	4603      	mov	r3, r0
 8000776:	f083 0301 	eor.w	r3, r3, #1
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <debounceFSM_update+0x1b0>
						StateBD=BUTTON_UP;
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <debounceFSM_update+0x1d8>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
		break;
 8000786:	e00a      	b.n	800079e <debounceFSM_update+0x1c6>
						StateBD=BUTTON_DOWN;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <debounceFSM_update+0x1d8>)
 800078a:	2202      	movs	r2, #2
 800078c:	701a      	strb	r2, [r3, #0]
		break;
 800078e:	e006      	b.n	800079e <debounceFSM_update+0x1c6>
					StateBD=BUTTON_RAISING;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <debounceFSM_update+0x1d8>)
 8000792:	2203      	movs	r2, #3
 8000794:	701a      	strb	r2, [r3, #0]
		break;
 8000796:	e002      	b.n	800079e <debounceFSM_update+0x1c6>

		/*Por default, vuelve al estado inicial*/
		default:
			debounceFSM_init();
 8000798:	f7ff ff04 	bl	80005a4 <debounceFSM_init>
		break;
 800079c:	bf00      	nop
	}

}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000e4 	.word	0x200000e4
 80007ac:	200000e6 	.word	0x200000e6
 80007b0:	200000e5 	.word	0x200000e5
 80007b4:	200000cc 	.word	0x200000cc
 80007b8:	200000d8 	.word	0x200000d8

080007bc <buttonPressed>:

/*buttonPressed
 *Función que togglea LED1. Tambien comunica por UART la pulsacion detectada.
 *A su vez, asigna valor logico TRUE a la variable buttonPress */
static void buttonPressed(uint8_t button) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	if(button==ButtonUP){
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d103      	bne.n	80007d4 <buttonPressed+0x18>
		buttonUPPress=true;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <buttonPressed+0x2c>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
	}
	else{
		buttonDOWNPress=true;
	}
}
 80007d2:	e002      	b.n	80007da <buttonPressed+0x1e>
		buttonDOWNPress=true;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <buttonPressed+0x30>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	200000c8 	.word	0x200000c8
 80007ec:	200000c9 	.word	0x200000c9

080007f0 <readKeyUP>:


/*readKey
 *Función booleana que devuelve una copia del valor de la variable buttonPress.
 *Si dicha variable posee valor lógico TRUE, la reinicializa a FALSE.*/
bool_t readKeyUP(void){
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
	bool_t buttonStateAux;

	if (buttonUPPress==true){
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <readKeyUP+0x2c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d005      	beq.n	800080a <readKeyUP+0x1a>
		buttonStateAux=true;
 80007fe:	2301      	movs	r3, #1
 8000800:	71fb      	strb	r3, [r7, #7]
		buttonUPPress=false;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <readKeyUP+0x2c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e001      	b.n	800080e <readKeyUP+0x1e>
	}
	else{
		buttonStateAux=false;
 800080a:	2300      	movs	r3, #0
 800080c:	71fb      	strb	r3, [r7, #7]
	}
	return buttonStateAux;
 800080e:	79fb      	ldrb	r3, [r7, #7]
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	200000c8 	.word	0x200000c8

08000820 <readKeyDOWN>:

bool_t readKeyDOWN(void){
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
	bool_t buttonStateAux;

	if (buttonDOWNPress==true){
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <readKeyDOWN+0x2c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d005      	beq.n	800083a <readKeyDOWN+0x1a>
		buttonStateAux=true;
 800082e:	2301      	movs	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
		buttonDOWNPress=false;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <readKeyDOWN+0x2c>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e001      	b.n	800083e <readKeyDOWN+0x1e>
	}
	else{
		buttonStateAux=false;
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
	}
	return buttonStateAux;
 800083e:	79fb      	ldrb	r3, [r7, #7]
}
 8000840:	4618      	mov	r0, r3
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200000c9 	.word	0x200000c9

08000850 <delayInit>:
 */

#include "API_delay.h"

/*Defino las funciones*/
void delayInit( delay_t * delay, tick_t duration ){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	//Verifica si los parametros introducidos son los adecuados
	if (delay!=NULL && duration>0 && duration<MAX_DURATION){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00e      	beq.n	800087e <delayInit+0x2e>
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00b      	beq.n	800087e <delayInit+0x2e>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	f247 522f 	movw	r2, #29999	; 0x752f
 800086c:	4293      	cmp	r3, r2
 800086e:	d806      	bhi.n	800087e <delayInit+0x2e>
		delay->duration=duration;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	605a      	str	r2, [r3, #4]
		delay->running=false;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	721a      	strb	r2, [r3, #8]
	//En caso de error, enciende LED1 de manera permanente
		while(1){
			BSP_LED_On(LED1);
		}
	}
}
 800087c:	e003      	b.n	8000886 <delayInit+0x36>
			BSP_LED_On(LED1);
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fbfc 	bl	800107c <BSP_LED_On>
 8000884:	e7fb      	b.n	800087e <delayInit+0x2e>
}
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <delayRead>:

bool_t delayRead( delay_t * delay ){
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	tick_t currentTime;
	bool_t completedTime=false;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

	//Verifica si los parametros introducidos son los adecuados
	if (delay != NULL){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d024      	beq.n	80008e8 <delayRead+0x5c>
		if (delay->running==false){
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	7a1b      	ldrb	r3, [r3, #8]
 80008a2:	f083 0301 	eor.w	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00a      	beq.n	80008c2 <delayRead+0x36>
			delay->startTime=HAL_GetTick();
 80008ac:	f000 fd66 	bl	800137c <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
			delay->running=true;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2201      	movs	r2, #1
 80008ba:	721a      	strb	r2, [r3, #8]
			completedTime=false;
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e012      	b.n	80008e8 <delayRead+0x5c>
		}
		else{
			currentTime=HAL_GetTick();
 80008c2:	f000 fd5b 	bl	800137c <HAL_GetTick>
 80008c6:	60b8      	str	r0, [r7, #8]
			if (currentTime - delay->startTime >= delay->duration){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	1ad2      	subs	r2, r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d305      	bcc.n	80008e4 <delayRead+0x58>
				completedTime=true;
 80008d8:	2301      	movs	r3, #1
 80008da:	73fb      	strb	r3, [r7, #15]
				delay->running=false;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	721a      	strb	r2, [r3, #8]
 80008e2:	e001      	b.n	80008e8 <delayRead+0x5c>
			}
			else{
				completedTime=false;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]
			}
		}
	}
	return completedTime;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <displayFSM_init>:
static bool displayUP=false;
static bool displayDOWN=false;
static uint8_t nuevoValor[]="\n\rEl valor representado es: ";
static void sendValueToUart(void);

void displayFSM_init(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	if(uartInit()){
 80008f8:	f000 fabe 	bl	8000e78 <uartInit>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d007      	beq.n	8000912 <displayFSM_init+0x1e>
		BSP_LED_On(LED2);
 8000902:	2001      	movs	r0, #1
 8000904:	f000 fbba 	bl	800107c <BSP_LED_On>
		stateDisplay=State_0;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <displayFSM_init+0x24>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
		sendValueToUart();
 800090e:	f000 f943 	bl	8000b98 <sendValueToUart>
	}

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000e7 	.word	0x200000e7

0800091c <displayFSM_update>:

void displayFSM_update(void){
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	//uint8_t representacionNumero;
	switch(stateDisplay){
 8000920:	4b9a      	ldr	r3, [pc, #616]	; (8000b8c <displayFSM_update+0x270>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b09      	cmp	r3, #9
 8000926:	f200 812f 	bhi.w	8000b88 <displayFSM_update+0x26c>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <displayFSM_update+0x14>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	08000959 	.word	0x08000959
 8000934:	08000991 	.word	0x08000991
 8000938:	080009c9 	.word	0x080009c9
 800093c:	08000a01 	.word	0x08000a01
 8000940:	08000a39 	.word	0x08000a39
 8000944:	08000a71 	.word	0x08000a71
 8000948:	08000aa9 	.word	0x08000aa9
 800094c:	08000ae1 	.word	0x08000ae1
 8000950:	08000b19 	.word	0x08000b19
 8000954:	08000b51 	.word	0x08000b51
		case State_0:
			if(readKeyUP()){
 8000958:	f7ff ff4a 	bl	80007f0 <readKeyUP>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d006      	beq.n	8000970 <displayFSM_update+0x54>
				stateDisplay=State_1;
 8000962:	4b8a      	ldr	r3, [pc, #552]	; (8000b8c <displayFSM_update+0x270>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000968:	4b89      	ldr	r3, [pc, #548]	; (8000b90 <displayFSM_update+0x274>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_0;
			}
		break;
 800096e:	e10b      	b.n	8000b88 <displayFSM_update+0x26c>
			else if(readKeyDOWN()){
 8000970:	f7ff ff56 	bl	8000820 <readKeyDOWN>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <displayFSM_update+0x6c>
				stateDisplay=State_9;
 800097a:	4b84      	ldr	r3, [pc, #528]	; (8000b8c <displayFSM_update+0x270>)
 800097c:	2209      	movs	r2, #9
 800097e:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000980:	4b84      	ldr	r3, [pc, #528]	; (8000b94 <displayFSM_update+0x278>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
		break;
 8000986:	e0ff      	b.n	8000b88 <displayFSM_update+0x26c>
				stateDisplay=State_0;
 8000988:	4b80      	ldr	r3, [pc, #512]	; (8000b8c <displayFSM_update+0x270>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		break;
 800098e:	e0fb      	b.n	8000b88 <displayFSM_update+0x26c>

		case State_1:
			if(readKeyUP()){
 8000990:	f7ff ff2e 	bl	80007f0 <readKeyUP>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <displayFSM_update+0x8c>
				stateDisplay=State_2;
 800099a:	4b7c      	ldr	r3, [pc, #496]	; (8000b8c <displayFSM_update+0x270>)
 800099c:	2202      	movs	r2, #2
 800099e:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 80009a0:	4b7b      	ldr	r3, [pc, #492]	; (8000b90 <displayFSM_update+0x274>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_1;
			}
		break;
 80009a6:	e0ef      	b.n	8000b88 <displayFSM_update+0x26c>
			else if(readKeyDOWN()){
 80009a8:	f7ff ff3a 	bl	8000820 <readKeyDOWN>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d006      	beq.n	80009c0 <displayFSM_update+0xa4>
				stateDisplay=State_0;
 80009b2:	4b76      	ldr	r3, [pc, #472]	; (8000b8c <displayFSM_update+0x270>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 80009b8:	4b76      	ldr	r3, [pc, #472]	; (8000b94 <displayFSM_update+0x278>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
		break;
 80009be:	e0e3      	b.n	8000b88 <displayFSM_update+0x26c>
				stateDisplay=State_1;
 80009c0:	4b72      	ldr	r3, [pc, #456]	; (8000b8c <displayFSM_update+0x270>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]
		break;
 80009c6:	e0df      	b.n	8000b88 <displayFSM_update+0x26c>

		case State_2:
			if(readKeyUP()){
 80009c8:	f7ff ff12 	bl	80007f0 <readKeyUP>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d006      	beq.n	80009e0 <displayFSM_update+0xc4>
				stateDisplay=State_3;
 80009d2:	4b6e      	ldr	r3, [pc, #440]	; (8000b8c <displayFSM_update+0x270>)
 80009d4:	2203      	movs	r2, #3
 80009d6:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 80009d8:	4b6d      	ldr	r3, [pc, #436]	; (8000b90 <displayFSM_update+0x274>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_2;
			}
		break;
 80009de:	e0d3      	b.n	8000b88 <displayFSM_update+0x26c>
			else if(readKeyDOWN()){
 80009e0:	f7ff ff1e 	bl	8000820 <readKeyDOWN>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <displayFSM_update+0xdc>
				stateDisplay=State_1;
 80009ea:	4b68      	ldr	r3, [pc, #416]	; (8000b8c <displayFSM_update+0x270>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 80009f0:	4b68      	ldr	r3, [pc, #416]	; (8000b94 <displayFSM_update+0x278>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
		break;
 80009f6:	e0c7      	b.n	8000b88 <displayFSM_update+0x26c>
				stateDisplay=State_2;
 80009f8:	4b64      	ldr	r3, [pc, #400]	; (8000b8c <displayFSM_update+0x270>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	701a      	strb	r2, [r3, #0]
		break;
 80009fe:	e0c3      	b.n	8000b88 <displayFSM_update+0x26c>

		case State_3:
			if(readKeyUP()){
 8000a00:	f7ff fef6 	bl	80007f0 <readKeyUP>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d006      	beq.n	8000a18 <displayFSM_update+0xfc>
				stateDisplay=State_4;
 8000a0a:	4b60      	ldr	r3, [pc, #384]	; (8000b8c <displayFSM_update+0x270>)
 8000a0c:	2204      	movs	r2, #4
 8000a0e:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000a10:	4b5f      	ldr	r3, [pc, #380]	; (8000b90 <displayFSM_update+0x274>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_3;
			}
		break;
 8000a16:	e0b7      	b.n	8000b88 <displayFSM_update+0x26c>
			else if(readKeyDOWN()){
 8000a18:	f7ff ff02 	bl	8000820 <readKeyDOWN>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d006      	beq.n	8000a30 <displayFSM_update+0x114>
				stateDisplay=State_2;
 8000a22:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <displayFSM_update+0x270>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000a28:	4b5a      	ldr	r3, [pc, #360]	; (8000b94 <displayFSM_update+0x278>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
		break;
 8000a2e:	e0ab      	b.n	8000b88 <displayFSM_update+0x26c>
				stateDisplay=State_3;
 8000a30:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <displayFSM_update+0x270>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
		break;
 8000a36:	e0a7      	b.n	8000b88 <displayFSM_update+0x26c>

		case State_4:
			if(readKeyUP()){
 8000a38:	f7ff feda 	bl	80007f0 <readKeyUP>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d006      	beq.n	8000a50 <displayFSM_update+0x134>
				stateDisplay=State_5;
 8000a42:	4b52      	ldr	r3, [pc, #328]	; (8000b8c <displayFSM_update+0x270>)
 8000a44:	2205      	movs	r2, #5
 8000a46:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000a48:	4b51      	ldr	r3, [pc, #324]	; (8000b90 <displayFSM_update+0x274>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_4;
			}
		break;
 8000a4e:	e09b      	b.n	8000b88 <displayFSM_update+0x26c>
			else if(readKeyDOWN()){
 8000a50:	f7ff fee6 	bl	8000820 <readKeyDOWN>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d006      	beq.n	8000a68 <displayFSM_update+0x14c>
				stateDisplay=State_3;
 8000a5a:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <displayFSM_update+0x270>)
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000a60:	4b4c      	ldr	r3, [pc, #304]	; (8000b94 <displayFSM_update+0x278>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
		break;
 8000a66:	e08f      	b.n	8000b88 <displayFSM_update+0x26c>
				stateDisplay=State_4;
 8000a68:	4b48      	ldr	r3, [pc, #288]	; (8000b8c <displayFSM_update+0x270>)
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	701a      	strb	r2, [r3, #0]
		break;
 8000a6e:	e08b      	b.n	8000b88 <displayFSM_update+0x26c>

		case State_5:
			if(readKeyUP()){
 8000a70:	f7ff febe 	bl	80007f0 <readKeyUP>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <displayFSM_update+0x16c>
				stateDisplay=State_6;
 8000a7a:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <displayFSM_update+0x270>)
 8000a7c:	2206      	movs	r2, #6
 8000a7e:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000a80:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <displayFSM_update+0x274>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_5;
			}
		break;
 8000a86:	e07f      	b.n	8000b88 <displayFSM_update+0x26c>
			else if(readKeyDOWN()){
 8000a88:	f7ff feca 	bl	8000820 <readKeyDOWN>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <displayFSM_update+0x184>
				stateDisplay=State_4;
 8000a92:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <displayFSM_update+0x270>)
 8000a94:	2204      	movs	r2, #4
 8000a96:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000a98:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <displayFSM_update+0x278>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
		break;
 8000a9e:	e073      	b.n	8000b88 <displayFSM_update+0x26c>
				stateDisplay=State_5;
 8000aa0:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <displayFSM_update+0x270>)
 8000aa2:	2205      	movs	r2, #5
 8000aa4:	701a      	strb	r2, [r3, #0]
		break;
 8000aa6:	e06f      	b.n	8000b88 <displayFSM_update+0x26c>

		case State_6:
			if(readKeyUP()){
 8000aa8:	f7ff fea2 	bl	80007f0 <readKeyUP>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <displayFSM_update+0x1a4>
				stateDisplay=State_7;
 8000ab2:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <displayFSM_update+0x270>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000ab8:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <displayFSM_update+0x274>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_6;
			}
		break;
 8000abe:	e063      	b.n	8000b88 <displayFSM_update+0x26c>
			else if(readKeyDOWN()){
 8000ac0:	f7ff feae 	bl	8000820 <readKeyDOWN>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <displayFSM_update+0x1bc>
				stateDisplay=State_5;
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <displayFSM_update+0x270>)
 8000acc:	2205      	movs	r2, #5
 8000ace:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <displayFSM_update+0x278>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
		break;
 8000ad6:	e057      	b.n	8000b88 <displayFSM_update+0x26c>
				stateDisplay=State_6;
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <displayFSM_update+0x270>)
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e053      	b.n	8000b88 <displayFSM_update+0x26c>

		case State_7:
			if(readKeyUP()){
 8000ae0:	f7ff fe86 	bl	80007f0 <readKeyUP>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <displayFSM_update+0x1dc>
				stateDisplay=State_8;
 8000aea:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <displayFSM_update+0x270>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <displayFSM_update+0x274>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_7;
			}
		break;
 8000af6:	e047      	b.n	8000b88 <displayFSM_update+0x26c>
			else if(readKeyDOWN()){
 8000af8:	f7ff fe92 	bl	8000820 <readKeyDOWN>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <displayFSM_update+0x1f4>
				stateDisplay=State_6;
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <displayFSM_update+0x270>)
 8000b04:	2206      	movs	r2, #6
 8000b06:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <displayFSM_update+0x278>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
		break;
 8000b0e:	e03b      	b.n	8000b88 <displayFSM_update+0x26c>
				stateDisplay=State_7;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <displayFSM_update+0x270>)
 8000b12:	2207      	movs	r2, #7
 8000b14:	701a      	strb	r2, [r3, #0]
		break;
 8000b16:	e037      	b.n	8000b88 <displayFSM_update+0x26c>

		case State_8:
			if(readKeyUP()){
 8000b18:	f7ff fe6a 	bl	80007f0 <readKeyUP>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <displayFSM_update+0x214>
				stateDisplay=State_9;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <displayFSM_update+0x270>)
 8000b24:	2209      	movs	r2, #9
 8000b26:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <displayFSM_update+0x274>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_8;
			}
		break;
 8000b2e:	e02b      	b.n	8000b88 <displayFSM_update+0x26c>
			else if(readKeyDOWN()){
 8000b30:	f7ff fe76 	bl	8000820 <readKeyDOWN>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <displayFSM_update+0x22c>
				stateDisplay=State_7;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <displayFSM_update+0x270>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <displayFSM_update+0x278>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
		break;
 8000b46:	e01f      	b.n	8000b88 <displayFSM_update+0x26c>
				stateDisplay=State_8;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <displayFSM_update+0x270>)
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	701a      	strb	r2, [r3, #0]
		break;
 8000b4e:	e01b      	b.n	8000b88 <displayFSM_update+0x26c>

		case State_9:
			if(readKeyUP()){
 8000b50:	f7ff fe4e 	bl	80007f0 <readKeyUP>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <displayFSM_update+0x24c>
				stateDisplay=State_0;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <displayFSM_update+0x270>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
				displayUP=true;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <displayFSM_update+0x274>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
			}
			else{
				stateDisplay=State_9;
			}
		break;
 8000b66:	e00e      	b.n	8000b86 <displayFSM_update+0x26a>
			else if(readKeyDOWN()){
 8000b68:	f7ff fe5a 	bl	8000820 <readKeyDOWN>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d006      	beq.n	8000b80 <displayFSM_update+0x264>
				stateDisplay=State_8;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <displayFSM_update+0x270>)
 8000b74:	2208      	movs	r2, #8
 8000b76:	701a      	strb	r2, [r3, #0]
				displayDOWN=true;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <displayFSM_update+0x278>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
		break;
 8000b7e:	e002      	b.n	8000b86 <displayFSM_update+0x26a>
				stateDisplay=State_9;
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <displayFSM_update+0x270>)
 8000b82:	2209      	movs	r2, #9
 8000b84:	701a      	strb	r2, [r3, #0]
		break;
 8000b86:	bf00      	nop
	}
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000e7 	.word	0x200000e7
 8000b90:	200000e8 	.word	0x200000e8
 8000b94:	200000e9 	.word	0x200000e9

08000b98 <sendValueToUart>:

static void sendValueToUart(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	char numero[nroCaracteresEstado]={};
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	80bb      	strh	r3, [r7, #4]
	if (displayUP==true){
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <sendValueToUart+0x4c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <sendValueToUart+0x18>
		displayUP =false;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <sendValueToUart+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
	}
	if(displayDOWN==true){
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <sendValueToUart+0x50>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <sendValueToUart+0x26>
		displayDOWN=false;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <sendValueToUart+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*) numero, "%d",(int) stateDisplay);
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <sendValueToUart+0x54>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	490a      	ldr	r1, [pc, #40]	; (8000bf0 <sendValueToUart+0x58>)
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 f8bd 	bl	8002d48 <siprintf>
	uartSendString((uint8_t*)nuevoValor);
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <sendValueToUart+0x5c>)
 8000bd0:	f000 f9ee 	bl	8000fb0 <uartSendString>
	uartSendString((uint8_t*)numero);
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f9ea 	bl	8000fb0 <uartSendString>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000e8 	.word	0x200000e8
 8000be8:	200000e9 	.word	0x200000e9
 8000bec:	200000e7 	.word	0x200000e7
 8000bf0:	0800363c 	.word	0x0800363c
 8000bf4:	2000000c 	.word	0x2000000c

08000bf8 <getStateDisplay>:

uint8_t getStateDisplay(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	uint8_t representacionNumero;
	if(displayUP==true || displayDOWN==true){
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <getStateDisplay+0x30>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d103      	bne.n	8000c0e <getStateDisplay+0x16>
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <getStateDisplay+0x34>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <getStateDisplay+0x1a>
		sendValueToUart();
 8000c0e:	f7ff ffc3 	bl	8000b98 <sendValueToUart>
	}
	representacionNumero = numeroDisplay[stateDisplay];
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <getStateDisplay+0x38>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <getStateDisplay+0x3c>)
 8000c1a:	5c9b      	ldrb	r3, [r3, r2]
 8000c1c:	71fb      	strb	r3, [r7, #7]
	return representacionNumero;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000e8 	.word	0x200000e8
 8000c2c:	200000e9 	.word	0x200000e9
 8000c30:	200000e7 	.word	0x200000e7
 8000c34:	20000000 	.word	0x20000000

08000c38 <gpioDisplay_init>:

#include "API_gpio.h"
#include <stdint.h>
#include <stdbool.h>

void gpioDisplay_init(void){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioInit={0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

	//Habilita clocks para los puertos E,F y G.
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <gpioDisplay_init+0xf0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a34      	ldr	r2, [pc, #208]	; (8000d28 <gpioDisplay_init+0xf0>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <gpioDisplay_init+0xf0>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <gpioDisplay_init+0xf0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a2d      	ldr	r2, [pc, #180]	; (8000d28 <gpioDisplay_init+0xf0>)
 8000c74:	f043 0320 	orr.w	r3, r3, #32
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <gpioDisplay_init+0xf0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0320 	and.w	r3, r3, #32
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <gpioDisplay_init+0xf0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <gpioDisplay_init+0xf0>)
 8000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <gpioDisplay_init+0xf0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

	//Configuracion de los pines PE9, PE11 y PE13 como salidas
	gpioInit.Pin = (GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13);
 8000ca2:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000ca6:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode= GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOE, &gpioInit);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481c      	ldr	r0, [pc, #112]	; (8000d2c <gpioDisplay_init+0xf4>)
 8000cbc:	f000 fc7c 	bl	80015b8 <HAL_GPIO_Init>

	//Configuracion de los pines PF14 Y PF15 como salidas
	gpioInit.Pin = (GPIO_PIN_14 | GPIO_PIN_15);
 8000cc0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cc4:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode= GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOF, &gpioInit);
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4815      	ldr	r0, [pc, #84]	; (8000d30 <gpioDisplay_init+0xf8>)
 8000cda:	f000 fc6d 	bl	80015b8 <HAL_GPIO_Init>

	//Configuracion de los pines PG9 y PG14 como salidas
	gpioInit.Pin = (GPIO_PIN_9 | GPIO_PIN_14);
 8000cde:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000ce2:	60fb      	str	r3, [r7, #12]
	gpioInit.Mode= GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
	gpioInit.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
	gpioInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOG, &gpioInit);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480f      	ldr	r0, [pc, #60]	; (8000d34 <gpioDisplay_init+0xfc>)
 8000cf8:	f000 fc5e 	bl	80015b8 <HAL_GPIO_Init>

	// Pone en estado LOW a los pines antes nombrados
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9|GPIO_PIN_11| GPIO_PIN_13, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 8000d02:	480a      	ldr	r0, [pc, #40]	; (8000d2c <gpioDisplay_init+0xf4>)
 8000d04:	f000 fe1c 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <gpioDisplay_init+0xf8>)
 8000d10:	f000 fe16 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_9|GPIO_PIN_14, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <gpioDisplay_init+0xfc>)
 8000d1c:	f000 fe10 	bl	8001940 <HAL_GPIO_WritePin>
}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40021400 	.word	0x40021400
 8000d34:	40021800 	.word	0x40021800

08000d38 <gpioButton_init>:

void gpioButton_init(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioButtonInit={0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <gpioButton_init+0x54>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <gpioButton_init+0x54>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <gpioButton_init+0x54>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]

	gpioButtonInit.Pin = (GPIO_PIN_8);
 8000d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d6c:	607b      	str	r3, [r7, #4]
	gpioButtonInit.Mode= GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
	gpioButtonInit.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
	gpioButtonInit.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOB, &gpioButtonInit);
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <gpioButton_init+0x58>)
 8000d80:	f000 fc1a 	bl	80015b8 <HAL_GPIO_Init>
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400

08000d94 <gpioButton_Read>:

bool gpioButton_Read(void){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	bool stateButton=false;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)){
 8000d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da2:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <gpioButton_Read+0x30>)
 8000da4:	f000 fdb4 	bl	8001910 <HAL_GPIO_ReadPin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <gpioButton_Read+0x20>
		stateButton=true;
 8000dae:	2301      	movs	r3, #1
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	e001      	b.n	8000db8 <gpioButton_Read+0x24>
	}
	else{
		stateButton=false;
 8000db4:	2300      	movs	r3, #0
 8000db6:	71fb      	strb	r3, [r7, #7]
	}
	return stateButton;
 8000db8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <gpioDisplay_write>:

void gpioDisplay_write(uint8_t valorDisplay){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	uint8_t estadoLed[numeroLedsDisplay];

	//Separo cada bit del vector de entrada
	for (int i=0;i<numeroLedsDisplay;i++){
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e010      	b.n	8000dfa <gpioDisplay_write+0x32>
		estadoLed[i]=(valorDisplay>>i)&mascaraSeparaBits;
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa42 f303 	asr.w	r3, r2, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	b2d9      	uxtb	r1, r3
 8000de8:	f107 020c 	add.w	r2, r7, #12
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	4413      	add	r3, r2
 8000df0:	460a      	mov	r2, r1
 8000df2:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<numeroLedsDisplay;i++){
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	ddeb      	ble.n	8000dd8 <gpioDisplay_write+0x10>
	}
	//Orden de pines, D0-D1-D2-D3-D4-D5-D6-D7

	//Seteo los puertos GPIO en HIGH o LOW, segun corresponda
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9	,  	estadoLed[0]);
 8000e00:	7b3b      	ldrb	r3, [r7, #12]
 8000e02:	461a      	mov	r2, r3
 8000e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e08:	4818      	ldr	r0, [pc, #96]	; (8000e6c <gpioDisplay_write+0xa4>)
 8000e0a:	f000 fd99 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 	estadoLed[1]);
 8000e0e:	7b7b      	ldrb	r3, [r7, #13]
 8000e10:	461a      	mov	r2, r3
 8000e12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e16:	4815      	ldr	r0, [pc, #84]	; (8000e6c <gpioDisplay_write+0xa4>)
 8000e18:	f000 fd92 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15,  	estadoLed[2]);
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e24:	4812      	ldr	r0, [pc, #72]	; (8000e70 <gpioDisplay_write+0xa8>)
 8000e26:	f000 fd8b 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,  	estadoLed[3]);
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e32:	4810      	ldr	r0, [pc, #64]	; (8000e74 <gpioDisplay_write+0xac>)
 8000e34:	f000 fd84 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14,  	estadoLed[4]);
 8000e38:	7c3b      	ldrb	r3, [r7, #16]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <gpioDisplay_write+0xa8>)
 8000e42:	f000 fd7d 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,  	estadoLed[5]);
 8000e46:	7c7b      	ldrb	r3, [r7, #17]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <gpioDisplay_write+0xac>)
 8000e50:	f000 fd76 	bl	8001940 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9	,  	estadoLed[6]);
 8000e54:	7cbb      	ldrb	r3, [r7, #18]
 8000e56:	461a      	mov	r2, r3
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <gpioDisplay_write+0xac>)
 8000e5e:	f000 fd6f 	bl	8001940 <HAL_GPIO_WritePin>

}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021800 	.word	0x40021800
 8000e70:	40021400 	.word	0x40021400
 8000e74:	40021000 	.word	0x40021000

08000e78 <uartInit>:


/* Inicia la comunicación UART.
 * Envía mensaje indicando los parametros de su configuración.
 * Devuelve valor booleano TRUE si la iniciación fue exitosa.*/
bool_t uartInit(void){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
	 bool_t successfullInitialization=true;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	77fb      	strb	r3, [r7, #31]
	 char baudRateValue[nroCaracteresConversion]={};
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	2300      	movs	r3, #0
 8000e88:	773b      	strb	r3, [r7, #28]
	 char wordLengthValue[nroCaracteresConversion]={};
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	753b      	strb	r3, [r7, #20]
	 char StopBitsValue[nroCaracteresConversion]={};
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	2300      	movs	r3, #0
 8000e98:	733b      	strb	r3, [r7, #12]
	 char parityValue[nroCaracteresConversion]={};
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	713b      	strb	r3, [r7, #4]
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000ea2:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <uartInit+0x110>)
 8000ea4:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <uartInit+0x114>)
 8000ea6:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 8000ea8:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <uartInit+0x110>)
 8000eaa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eae:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <uartInit+0x110>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <uartInit+0x110>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <uartInit+0x110>)
 8000ebe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000ec2:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <uartInit+0x110>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <uartInit+0x110>)
 8000ecc:	220c      	movs	r2, #12
 8000ece:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <uartInit+0x110>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000ed6:	482c      	ldr	r0, [pc, #176]	; (8000f88 <uartInit+0x110>)
 8000ed8:	f001 fa8e 	bl	80023f8 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <uartInit+0x70>
	  {
	    /* Initialization Error */
		successfullInitialization=false;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	77fb      	strb	r3, [r7, #31]
	    while(1){
 8000ee6:	e7fe      	b.n	8000ee6 <uartInit+0x6e>
	    }

	  }

	  //Funcion que convierte valor numerico a char
	  sprintf((char*) baudRateValue, "%d",(int) UartHandle.Init.BaudRate);
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <uartInit+0x110>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	461a      	mov	r2, r3
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	4927      	ldr	r1, [pc, #156]	; (8000f90 <uartInit+0x118>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 ff27 	bl	8002d48 <siprintf>
	  sprintf((char*) wordLengthValue, "%d",(int) UartHandle.Init.WordLength);
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <uartInit+0x110>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	461a      	mov	r2, r3
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4922      	ldr	r1, [pc, #136]	; (8000f90 <uartInit+0x118>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 ff1e 	bl	8002d48 <siprintf>
	  sprintf((char*) StopBitsValue, "%d",(int) UartHandle.Init.StopBits);
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <uartInit+0x110>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	461a      	mov	r2, r3
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	491e      	ldr	r1, [pc, #120]	; (8000f90 <uartInit+0x118>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 ff15 	bl	8002d48 <siprintf>
	  sprintf((char*) parityValue, "%d",(int) UartHandle.Init.Parity);
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <uartInit+0x110>)
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	461a      	mov	r2, r3
 8000f24:	463b      	mov	r3, r7
 8000f26:	491a      	ldr	r1, [pc, #104]	; (8000f90 <uartInit+0x118>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 ff0d 	bl	8002d48 <siprintf>

	  uartSendString((uint8_t*)"Uart Iniciada\n\r");
 8000f2e:	4819      	ldr	r0, [pc, #100]	; (8000f94 <uartInit+0x11c>)
 8000f30:	f000 f83e 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)"-----Parametros UART-----\n\r");
 8000f34:	4818      	ldr	r0, [pc, #96]	; (8000f98 <uartInit+0x120>)
 8000f36:	f000 f83b 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)"\n\rBaud rate: ");
 8000f3a:	4818      	ldr	r0, [pc, #96]	; (8000f9c <uartInit+0x124>)
 8000f3c:	f000 f838 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)baudRateValue);
 8000f40:	f107 0318 	add.w	r3, r7, #24
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f833 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)"\n\rWord Length: ");
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <uartInit+0x128>)
 8000f4c:	f000 f830 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)wordLengthValue);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f82b 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)"\n\rStop Bits: ");
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <uartInit+0x12c>)
 8000f5c:	f000 f828 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)StopBitsValue);
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f823 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)"\n\rParity: ");
 8000f6a:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <uartInit+0x130>)
 8000f6c:	f000 f820 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)parityValue);
 8000f70:	463b      	mov	r3, r7
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f81c 	bl	8000fb0 <uartSendString>
	  uartSendString((uint8_t*)"\n\r");
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <uartInit+0x134>)
 8000f7a:	f000 f819 	bl	8000fb0 <uartSendString>

	  return successfullInitialization;
 8000f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000ec 	.word	0x200000ec
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	08003640 	.word	0x08003640
 8000f94:	08003644 	.word	0x08003644
 8000f98:	08003654 	.word	0x08003654
 8000f9c:	08003670 	.word	0x08003670
 8000fa0:	08003680 	.word	0x08003680
 8000fa4:	08003690 	.word	0x08003690
 8000fa8:	080036a0 	.word	0x080036a0
 8000fac:	080036ac 	.word	0x080036ac

08000fb0 <uartSendString>:

/* Función que envia un mensaje por UART.
 * Recibe un punto a array como parametro, el cual contiene el mensaje a enviar.*/
void uartSendString(uint8_t * pstring){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UartHandle,(uint8_t*) pstring,strlen((const char*) pstring), timeOutUart);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff f919 	bl	80001f0 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <uartSendString+0x28>)
 8000fca:	f001 fa62 	bl	8002492 <HAL_UART_Transmit>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000ec 	.word	0x200000ec

08000fdc <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10e      	bne.n	800100a <BSP_LED_Init+0x2e>
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <BSP_LED_Init+0x94>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <BSP_LED_Init+0x94>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <BSP_LED_Init+0x94>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	e00d      	b.n	8001026 <BSP_LED_Init+0x4a>
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <BSP_LED_Init+0x94>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <BSP_LED_Init+0x94>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <BSP_LED_Init+0x94>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <BSP_LED_Init+0x98>)
 800102a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <BSP_LED_Init+0x9c>)
 8001040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001044:	f107 0214 	add.w	r2, r7, #20
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fab4 	bl	80015b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4a09      	ldr	r2, [pc, #36]	; (8001078 <BSP_LED_Init+0x9c>)
 8001054:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <BSP_LED_Init+0x98>)
 800105c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	f000 fc6c 	bl	8001940 <HAL_GPIO_WritePin>
}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	080036b0 	.word	0x080036b0
 8001078:	2000002c 	.word	0x2000002c

0800107c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <BSP_LED_On+0x2c>)
 800108a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <BSP_LED_On+0x30>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	2201      	movs	r2, #1
 8001098:	4619      	mov	r1, r3
 800109a:	f000 fc51 	bl	8001940 <HAL_GPIO_WritePin>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000002c 	.word	0x2000002c
 80010ac:	080036b0 	.word	0x080036b0

080010b0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <BSP_PB_Init+0xa4>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	4a22      	ldr	r2, [pc, #136]	; (8001154 <BSP_PB_Init+0xa4>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6313      	str	r3, [r2, #48]	; 0x30
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <BSP_PB_Init+0xa4>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d112      	bne.n	8001108 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ec:	2302      	movs	r3, #2
 80010ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4a18      	ldr	r2, [pc, #96]	; (8001158 <BSP_PB_Init+0xa8>)
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	f107 020c 	add.w	r2, r7, #12
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fa58 	bl	80015b8 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d11d      	bne.n	800114a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001118:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800111c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <BSP_PB_Init+0xa8>)
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	f107 020c 	add.w	r2, r7, #12
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fa43 	bl	80015b8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001132:	2328      	movs	r3, #40	; 0x28
 8001134:	b25b      	sxtb	r3, r3
 8001136:	2200      	movs	r2, #0
 8001138:	210f      	movs	r1, #15
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fa05 	bl	800154a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001140:	2328      	movs	r3, #40	; 0x28
 8001142:	b25b      	sxtb	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fa1c 	bl	8001582 <HAL_NVIC_EnableIRQ>
  }
}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	20000038 	.word	0x20000038

0800115c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <BSP_PB_GetState+0x28>)
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fbcb 	bl	8001910 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000038 	.word	0x20000038

08001188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <SystemInit+0x60>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <SystemInit+0x60>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <SystemInit+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <SystemInit+0x64>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <SystemInit+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <SystemInit+0x64>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <SystemInit+0x64>)
 80011b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <SystemInit+0x64>)
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <SystemInit+0x68>)
 80011c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <SystemInit+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a08      	ldr	r2, [pc, #32]	; (80011ec <SystemInit+0x64>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SystemInit+0x60>)
 80011d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011dc:	609a      	str	r2, [r3, #8]
#endif
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00
 80011ec:	40023800 	.word	0x40023800
 80011f0:	24003010 	.word	0x24003010

080011f4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001248:	f000 f884 	bl	8001354 <HAL_IncTick>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	; (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001280:	f001 fd38 	bl	8002cf4 <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e009      	b.n	80012a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <_sbrk+0x64>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20030000 	.word	0x20030000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	20000130 	.word	0x20000130
 80012b8:	20000148 	.word	0x20000148

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_Init+0x34>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_Init+0x34>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ca:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x34>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x34>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f92b 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	200f      	movs	r0, #15
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f000 fb98 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f943 	bl	800159e <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f90b 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000003c 	.word	0x2000003c
 800134c:	20000044 	.word	0x20000044
 8001350:	20000040 	.word	0x20000040

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000044 	.word	0x20000044
 8001378:	20000134 	.word	0x20000134

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000134 	.word	0x20000134

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff29 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff3e 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff31 	bl	80013f8 <__NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffa2 	bl	80014f0 <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e177      	b.n	80018c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 8166 	bne.w	80018be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	2b02      	cmp	r3, #2
 8001608:	d130      	bne.n	800166c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80c0 	beq.w	80018be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b66      	ldr	r3, [pc, #408]	; (80018dc <HAL_GPIO_Init+0x324>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a65      	ldr	r2, [pc, #404]	; (80018dc <HAL_GPIO_Init+0x324>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_GPIO_Init+0x324>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175a:	4a61      	ldr	r2, [pc, #388]	; (80018e0 <HAL_GPIO_Init+0x328>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_GPIO_Init+0x32c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d037      	beq.n	80017f6 <HAL_GPIO_Init+0x23e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a57      	ldr	r2, [pc, #348]	; (80018e8 <HAL_GPIO_Init+0x330>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d031      	beq.n	80017f2 <HAL_GPIO_Init+0x23a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a56      	ldr	r2, [pc, #344]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_GPIO_Init+0x236>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a55      	ldr	r2, [pc, #340]	; (80018f0 <HAL_GPIO_Init+0x338>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d025      	beq.n	80017ea <HAL_GPIO_Init+0x232>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a54      	ldr	r2, [pc, #336]	; (80018f4 <HAL_GPIO_Init+0x33c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d01f      	beq.n	80017e6 <HAL_GPIO_Init+0x22e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a53      	ldr	r2, [pc, #332]	; (80018f8 <HAL_GPIO_Init+0x340>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d019      	beq.n	80017e2 <HAL_GPIO_Init+0x22a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_GPIO_Init+0x344>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d013      	beq.n	80017de <HAL_GPIO_Init+0x226>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a51      	ldr	r2, [pc, #324]	; (8001900 <HAL_GPIO_Init+0x348>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00d      	beq.n	80017da <HAL_GPIO_Init+0x222>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a50      	ldr	r2, [pc, #320]	; (8001904 <HAL_GPIO_Init+0x34c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d007      	beq.n	80017d6 <HAL_GPIO_Init+0x21e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4f      	ldr	r2, [pc, #316]	; (8001908 <HAL_GPIO_Init+0x350>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_GPIO_Init+0x21a>
 80017ce:	2309      	movs	r3, #9
 80017d0:	e012      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017d2:	230a      	movs	r3, #10
 80017d4:	e010      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017d6:	2308      	movs	r3, #8
 80017d8:	e00e      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017da:	2307      	movs	r3, #7
 80017dc:	e00c      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00a      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017e2:	2305      	movs	r3, #5
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x240>
 80017f6:	2300      	movs	r3, #0
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001808:	4935      	ldr	r1, [pc, #212]	; (80018e0 <HAL_GPIO_Init+0x328>)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_GPIO_Init+0x354>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800183a:	4a34      	ldr	r2, [pc, #208]	; (800190c <HAL_GPIO_Init+0x354>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <HAL_GPIO_Init+0x354>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001864:	4a29      	ldr	r2, [pc, #164]	; (800190c <HAL_GPIO_Init+0x354>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b28      	ldr	r3, [pc, #160]	; (800190c <HAL_GPIO_Init+0x354>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188e:	4a1f      	ldr	r2, [pc, #124]	; (800190c <HAL_GPIO_Init+0x354>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_GPIO_Init+0x354>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_GPIO_Init+0x354>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	f67f ae84 	bls.w	80015d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40013800 	.word	0x40013800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40021400 	.word	0x40021400
 80018fc:	40021800 	.word	0x40021800
 8001900:	40021c00 	.word	0x40021c00
 8001904:	40022000 	.word	0x40022000
 8001908:	40022400 	.word	0x40022400
 800190c:	40013c00 	.word	0x40013c00

08001910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e001      	b.n	8001932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	4a22      	ldr	r2, [pc, #136]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6313      	str	r3, [r2, #48]	; 0x30
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	4a1b      	ldr	r2, [pc, #108]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	6313      	str	r3, [r2, #48]	; 0x30
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 80019be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_UART_MspInit+0x9c>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80019d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80019da:	2301      	movs	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80019e2:	2307      	movs	r3, #7
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4809      	ldr	r0, [pc, #36]	; (8001a14 <HAL_UART_MspInit+0xa0>)
 80019ee:	f7ff fde3 	bl	80015b8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80019f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80019f8:	2307      	movs	r3, #7
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	4804      	ldr	r0, [pc, #16]	; (8001a14 <HAL_UART_MspInit+0xa0>)
 8001a04:	f7ff fdd8 	bl	80015b8 <HAL_GPIO_Init>
}
 8001a08:	bf00      	nop
 8001a0a:	3728      	adds	r7, #40	; 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020c00 	.word	0x40020c00

08001a18 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_PWREx_EnableOverDrive+0x94>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a54:	f7ff fc92 	bl	800137c <HAL_GetTick>
 8001a58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a5a:	e009      	b.n	8001a70 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a5c:	f7ff fc8e 	bl	800137c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6a:	d901      	bls.n	8001a70 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e01f      	b.n	8001ab0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7c:	d1ee      	bne.n	8001a5c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a84:	f7ff fc7a 	bl	800137c <HAL_GetTick>
 8001a88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a8a:	e009      	b.n	8001aa0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a8c:	f7ff fc76 	bl	800137c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a9a:	d901      	bls.n	8001aa0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e007      	b.n	8001ab0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aac:	d1ee      	bne.n	8001a8c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	420e0040 	.word	0x420e0040
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	420e0044 	.word	0x420e0044

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e267      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d075      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ae6:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d00c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af2:	4b85      	ldr	r3, [pc, #532]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d112      	bne.n	8001b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afe:	4b82      	ldr	r3, [pc, #520]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b0a:	d10b      	bne.n	8001b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	4b7e      	ldr	r3, [pc, #504]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d05b      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x108>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d157      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e242      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d106      	bne.n	8001b3c <HAL_RCC_OscConfig+0x74>
 8001b2e:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a75      	ldr	r2, [pc, #468]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e01d      	b.n	8001b78 <HAL_RCC_OscConfig+0xb0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x98>
 8001b46:	4b70      	ldr	r3, [pc, #448]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6f      	ldr	r2, [pc, #444]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a6c      	ldr	r2, [pc, #432]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0xb0>
 8001b60:	4b69      	ldr	r3, [pc, #420]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a68      	ldr	r2, [pc, #416]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a65      	ldr	r2, [pc, #404]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fbfc 	bl	800137c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff fbf8 	bl	800137c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e207      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0xc0>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fbe8 	bl	800137c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fbe4 	bl	800137c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1f3      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xe8>
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d063      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bde:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d11c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf6:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d116      	bne.n	8001c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_RCC_OscConfig+0x152>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e1c7      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4937      	ldr	r1, [pc, #220]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	e03a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c38:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <HAL_RCC_OscConfig+0x244>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fb9d 	bl	800137c <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff fb99 	bl	800137c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1a8      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4925      	ldr	r1, [pc, #148]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_OscConfig+0x244>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb7c 	bl	800137c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff fb78 	bl	800137c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e187      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d036      	beq.n	8001d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d016      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_RCC_OscConfig+0x248>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fb5c 	bl	800137c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fb58 	bl	800137c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e167      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x200>
 8001ce6:	e01b      	b.n	8001d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_OscConfig+0x248>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7ff fb45 	bl	800137c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	e00e      	b.n	8001d14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fb41 	bl	800137c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d907      	bls.n	8001d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e150      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	42470000 	.word	0x42470000
 8001d10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	4b88      	ldr	r3, [pc, #544]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ea      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8097 	beq.w	8001e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d32:	4b81      	ldr	r3, [pc, #516]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10f      	bne.n	8001d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b7d      	ldr	r3, [pc, #500]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a7c      	ldr	r2, [pc, #496]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b7a      	ldr	r3, [pc, #488]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5e:	4b77      	ldr	r3, [pc, #476]	; (8001f3c <HAL_RCC_OscConfig+0x474>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d118      	bne.n	8001d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6a:	4b74      	ldr	r3, [pc, #464]	; (8001f3c <HAL_RCC_OscConfig+0x474>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a73      	ldr	r2, [pc, #460]	; (8001f3c <HAL_RCC_OscConfig+0x474>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fb01 	bl	800137c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7e:	f7ff fafd 	bl	800137c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e10c      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <HAL_RCC_OscConfig+0x474>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x2ea>
 8001da4:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a63      	ldr	r2, [pc, #396]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
 8001db0:	e01c      	b.n	8001dec <HAL_RCC_OscConfig+0x324>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x30c>
 8001dba:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a5e      	ldr	r2, [pc, #376]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a5b      	ldr	r2, [pc, #364]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0x324>
 8001dd4:	4b58      	ldr	r3, [pc, #352]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a57      	ldr	r2, [pc, #348]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	4b55      	ldr	r3, [pc, #340]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a54      	ldr	r2, [pc, #336]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001de6:	f023 0304 	bic.w	r3, r3, #4
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d015      	beq.n	8001e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff fac2 	bl	800137c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fabe 	bl	800137c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0cb      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0ee      	beq.n	8001dfc <HAL_RCC_OscConfig+0x334>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7ff faac 	bl	800137c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff faa8 	bl	800137c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0b5      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3e:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ee      	bne.n	8001e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e50:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	4a38      	ldr	r2, [pc, #224]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a1 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e66:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d05c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d141      	bne.n	8001efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCC_OscConfig+0x478>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fa7c 	bl	800137c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff fa78 	bl	800137c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e087      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	019b      	lsls	r3, r3, #6
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	491b      	ldr	r1, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_OscConfig+0x478>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fa51 	bl	800137c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff fa4d 	bl	800137c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e05c      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x416>
 8001efc:	e054      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_RCC_OscConfig+0x478>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fa3a 	bl	800137c <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff fa36 	bl	800137c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e045      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_OscConfig+0x470>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x444>
 8001f2a:	e03d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e038      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4ec>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d028      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d121      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d11a      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f74:	4013      	ands	r3, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0cc      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d90c      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b65      	ldr	r3, [pc, #404]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0b8      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800200c:	4b59      	ldr	r3, [pc, #356]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800202e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b50      	ldr	r3, [pc, #320]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	494d      	ldr	r1, [pc, #308]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d044      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d119      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e07f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d003      	beq.n	8002076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002072:	2b03      	cmp	r3, #3
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e067      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4934      	ldr	r1, [pc, #208]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff f968 	bl	800137c <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7ff f964 	bl	800137c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e04f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 020c 	and.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1eb      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d20c      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e032      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4916      	ldr	r1, [pc, #88]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	490e      	ldr	r1, [pc, #56]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800213e:	f000 f821 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002142:	4602      	mov	r2, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	490a      	ldr	r1, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	5ccb      	ldrb	r3, [r1, r3]
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f8c8 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00
 8002174:	40023800 	.word	0x40023800
 8002178:	080036b8 	.word	0x080036b8
 800217c:	2000003c 	.word	0x2000003c
 8002180:	20000040 	.word	0x20000040

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002188:	b094      	sub	sp, #80	; 0x50
 800218a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
 8002190:	2300      	movs	r3, #0
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002194:	2300      	movs	r3, #0
 8002196:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800219c:	4b79      	ldr	r3, [pc, #484]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d00d      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x40>
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	f200 80e1 	bhi.w	8002370 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x34>
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x3a>
 80021b6:	e0db      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b73      	ldr	r3, [pc, #460]	; (8002388 <HAL_RCC_GetSysClockFreq+0x204>)
 80021ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021bc:	e0db      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021be:	4b73      	ldr	r3, [pc, #460]	; (800238c <HAL_RCC_GetSysClockFreq+0x208>)
 80021c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021c2:	e0d8      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c4:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ce:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021da:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	099b      	lsrs	r3, r3, #6
 80021e0:	2200      	movs	r2, #0
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
 80021ee:	2300      	movs	r3, #0
 80021f0:	637b      	str	r3, [r7, #52]	; 0x34
 80021f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021f6:	4622      	mov	r2, r4
 80021f8:	462b      	mov	r3, r5
 80021fa:	f04f 0000 	mov.w	r0, #0
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	0159      	lsls	r1, r3, #5
 8002204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002208:	0150      	lsls	r0, r2, #5
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4621      	mov	r1, r4
 8002210:	1a51      	subs	r1, r2, r1
 8002212:	6139      	str	r1, [r7, #16]
 8002214:	4629      	mov	r1, r5
 8002216:	eb63 0301 	sbc.w	r3, r3, r1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002228:	4659      	mov	r1, fp
 800222a:	018b      	lsls	r3, r1, #6
 800222c:	4651      	mov	r1, sl
 800222e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002232:	4651      	mov	r1, sl
 8002234:	018a      	lsls	r2, r1, #6
 8002236:	4651      	mov	r1, sl
 8002238:	ebb2 0801 	subs.w	r8, r2, r1
 800223c:	4659      	mov	r1, fp
 800223e:	eb63 0901 	sbc.w	r9, r3, r1
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800224e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002256:	4690      	mov	r8, r2
 8002258:	4699      	mov	r9, r3
 800225a:	4623      	mov	r3, r4
 800225c:	eb18 0303 	adds.w	r3, r8, r3
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	462b      	mov	r3, r5
 8002264:	eb49 0303 	adc.w	r3, r9, r3
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002276:	4629      	mov	r1, r5
 8002278:	024b      	lsls	r3, r1, #9
 800227a:	4621      	mov	r1, r4
 800227c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002280:	4621      	mov	r1, r4
 8002282:	024a      	lsls	r2, r1, #9
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228a:	2200      	movs	r2, #0
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
 800228e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002294:	f7fe f804 	bl	80002a0 <__aeabi_uldivmod>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4613      	mov	r3, r2
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a0:	e058      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	099b      	lsrs	r3, r3, #6
 80022a8:	2200      	movs	r2, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	4611      	mov	r1, r2
 80022ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022bc:	4642      	mov	r2, r8
 80022be:	464b      	mov	r3, r9
 80022c0:	f04f 0000 	mov.w	r0, #0
 80022c4:	f04f 0100 	mov.w	r1, #0
 80022c8:	0159      	lsls	r1, r3, #5
 80022ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ce:	0150      	lsls	r0, r2, #5
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4641      	mov	r1, r8
 80022d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80022da:	4649      	mov	r1, r9
 80022dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022f4:	ebb2 040a 	subs.w	r4, r2, sl
 80022f8:	eb63 050b 	sbc.w	r5, r3, fp
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	00eb      	lsls	r3, r5, #3
 8002306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800230a:	00e2      	lsls	r2, r4, #3
 800230c:	4614      	mov	r4, r2
 800230e:	461d      	mov	r5, r3
 8002310:	4643      	mov	r3, r8
 8002312:	18e3      	adds	r3, r4, r3
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	464b      	mov	r3, r9
 8002318:	eb45 0303 	adc.w	r3, r5, r3
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800232a:	4629      	mov	r1, r5
 800232c:	028b      	lsls	r3, r1, #10
 800232e:	4621      	mov	r1, r4
 8002330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002334:	4621      	mov	r1, r4
 8002336:	028a      	lsls	r2, r1, #10
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233e:	2200      	movs	r2, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	61fa      	str	r2, [r7, #28]
 8002344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002348:	f7fd ffaa 	bl	80002a0 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4613      	mov	r3, r2
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_GetSysClockFreq+0x200>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	3301      	adds	r3, #1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800236e:	e002      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetSysClockFreq+0x204>)
 8002372:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002378:	4618      	mov	r0, r3
 800237a:	3750      	adds	r7, #80	; 0x50
 800237c:	46bd      	mov	sp, r7
 800237e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	00f42400 	.word	0x00f42400
 800238c:	007a1200 	.word	0x007a1200

08002390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	2000003c 	.word	0x2000003c

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023ac:	f7ff fff0 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0a9b      	lsrs	r3, r3, #10
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	080036c8 	.word	0x080036c8

080023d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023d4:	f7ff ffdc 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0b5b      	lsrs	r3, r3, #13
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4903      	ldr	r1, [pc, #12]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	080036c8 	.word	0x080036c8

080023f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e03f      	b.n	800248a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff faa8 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2224      	movs	r2, #36	; 0x24
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800243a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f929 	bl	8002694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b08a      	sub	sp, #40	; 0x28
 8002496:	af02      	add	r7, sp, #8
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d17c      	bne.n	80025ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_UART_Transmit+0x2c>
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e075      	b.n	80025ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_UART_Transmit+0x3e>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e06e      	b.n	80025ae <HAL_UART_Transmit+0x11c>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	; 0x21
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024e6:	f7fe ff49 	bl	800137c <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002500:	d108      	bne.n	8002514 <HAL_UART_Transmit+0x82>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	e003      	b.n	800251c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002524:	e02a      	b.n	800257c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2200      	movs	r2, #0
 800252e:	2180      	movs	r1, #128	; 0x80
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f840 	bl	80025b6 <UART_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e036      	b.n	80025ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	3302      	adds	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e007      	b.n	800256e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1cf      	bne.n	8002526 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	2140      	movs	r1, #64	; 0x40
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f810 	bl	80025b6 <UART_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e006      	b.n	80025ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b090      	sub	sp, #64	; 0x40
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c6:	e050      	b.n	800266a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ce:	d04c      	beq.n	800266a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80025d6:	f7fe fed1 	bl	800137c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d241      	bcs.n	800266a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330c      	adds	r3, #12
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	e853 3f00 	ldrex	r3, [r3]
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	330c      	adds	r3, #12
 8002604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002606:	637a      	str	r2, [r7, #52]	; 0x34
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800260c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800260e:	e841 2300 	strex	r3, r2, [r1]
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1e5      	bne.n	80025e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3314      	adds	r3, #20
 8002620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	e853 3f00 	ldrex	r3, [r3]
 8002628:	613b      	str	r3, [r7, #16]
   return(result);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	63bb      	str	r3, [r7, #56]	; 0x38
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3314      	adds	r3, #20
 8002638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800263a:	623a      	str	r2, [r7, #32]
 800263c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263e:	69f9      	ldr	r1, [r7, #28]
 8002640:	6a3a      	ldr	r2, [r7, #32]
 8002642:	e841 2300 	strex	r3, r2, [r1]
 8002646:	61bb      	str	r3, [r7, #24]
   return(result);
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1e5      	bne.n	800261a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e00f      	b.n	800268a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	429a      	cmp	r2, r3
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	429a      	cmp	r2, r3
 8002686:	d09f      	beq.n	80025c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3740      	adds	r7, #64	; 0x40
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002698:	b0c0      	sub	sp, #256	; 0x100
 800269a:	af00      	add	r7, sp, #0
 800269c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	ea40 0301 	orr.w	r3, r0, r1
 80026bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026ec:	f021 010c 	bic.w	r1, r1, #12
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026fa:	430b      	orrs	r3, r1
 80026fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800270a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270e:	6999      	ldr	r1, [r3, #24]
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	ea40 0301 	orr.w	r3, r0, r1
 800271a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b8f      	ldr	r3, [pc, #572]	; (8002960 <UART_SetConfig+0x2cc>)
 8002724:	429a      	cmp	r2, r3
 8002726:	d005      	beq.n	8002734 <UART_SetConfig+0xa0>
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b8d      	ldr	r3, [pc, #564]	; (8002964 <UART_SetConfig+0x2d0>)
 8002730:	429a      	cmp	r2, r3
 8002732:	d104      	bne.n	800273e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002734:	f7ff fe4c 	bl	80023d0 <HAL_RCC_GetPCLK2Freq>
 8002738:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800273c:	e003      	b.n	8002746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800273e:	f7ff fe33 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8002742:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002750:	f040 810c 	bne.w	800296c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002758:	2200      	movs	r2, #0
 800275a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800275e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002766:	4622      	mov	r2, r4
 8002768:	462b      	mov	r3, r5
 800276a:	1891      	adds	r1, r2, r2
 800276c:	65b9      	str	r1, [r7, #88]	; 0x58
 800276e:	415b      	adcs	r3, r3
 8002770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002776:	4621      	mov	r1, r4
 8002778:	eb12 0801 	adds.w	r8, r2, r1
 800277c:	4629      	mov	r1, r5
 800277e:	eb43 0901 	adc.w	r9, r3, r1
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002796:	4690      	mov	r8, r2
 8002798:	4699      	mov	r9, r3
 800279a:	4623      	mov	r3, r4
 800279c:	eb18 0303 	adds.w	r3, r8, r3
 80027a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027a4:	462b      	mov	r3, r5
 80027a6:	eb49 0303 	adc.w	r3, r9, r3
 80027aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027c2:	460b      	mov	r3, r1
 80027c4:	18db      	adds	r3, r3, r3
 80027c6:	653b      	str	r3, [r7, #80]	; 0x50
 80027c8:	4613      	mov	r3, r2
 80027ca:	eb42 0303 	adc.w	r3, r2, r3
 80027ce:	657b      	str	r3, [r7, #84]	; 0x54
 80027d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027d8:	f7fd fd62 	bl	80002a0 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4b61      	ldr	r3, [pc, #388]	; (8002968 <UART_SetConfig+0x2d4>)
 80027e2:	fba3 2302 	umull	r2, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	011c      	lsls	r4, r3, #4
 80027ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	1891      	adds	r1, r2, r2
 8002802:	64b9      	str	r1, [r7, #72]	; 0x48
 8002804:	415b      	adcs	r3, r3
 8002806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800280c:	4641      	mov	r1, r8
 800280e:	eb12 0a01 	adds.w	sl, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb43 0b01 	adc.w	fp, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282c:	4692      	mov	sl, r2
 800282e:	469b      	mov	fp, r3
 8002830:	4643      	mov	r3, r8
 8002832:	eb1a 0303 	adds.w	r3, sl, r3
 8002836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800283a:	464b      	mov	r3, r9
 800283c:	eb4b 0303 	adc.w	r3, fp, r3
 8002840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002850:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002858:	460b      	mov	r3, r1
 800285a:	18db      	adds	r3, r3, r3
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
 800285e:	4613      	mov	r3, r2
 8002860:	eb42 0303 	adc.w	r3, r2, r3
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
 8002866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800286a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800286e:	f7fd fd17 	bl	80002a0 <__aeabi_uldivmod>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4611      	mov	r1, r2
 8002878:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <UART_SetConfig+0x2d4>)
 800287a:	fba3 2301 	umull	r2, r3, r3, r1
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2264      	movs	r2, #100	; 0x64
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	1acb      	subs	r3, r1, r3
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <UART_SetConfig+0x2d4>)
 8002890:	fba3 2302 	umull	r2, r3, r3, r2
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800289c:	441c      	add	r4, r3
 800289e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	1891      	adds	r1, r2, r2
 80028b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80028b8:	415b      	adcs	r3, r3
 80028ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028c0:	4641      	mov	r1, r8
 80028c2:	1851      	adds	r1, r2, r1
 80028c4:	6339      	str	r1, [r7, #48]	; 0x30
 80028c6:	4649      	mov	r1, r9
 80028c8:	414b      	adcs	r3, r1
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028d8:	4659      	mov	r1, fp
 80028da:	00cb      	lsls	r3, r1, #3
 80028dc:	4651      	mov	r1, sl
 80028de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e2:	4651      	mov	r1, sl
 80028e4:	00ca      	lsls	r2, r1, #3
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	4642      	mov	r2, r8
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028f4:	464b      	mov	r3, r9
 80028f6:	460a      	mov	r2, r1
 80028f8:	eb42 0303 	adc.w	r3, r2, r3
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800290c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002914:	460b      	mov	r3, r1
 8002916:	18db      	adds	r3, r3, r3
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
 800291a:	4613      	mov	r3, r2
 800291c:	eb42 0303 	adc.w	r3, r2, r3
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800292a:	f7fd fcb9 	bl	80002a0 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <UART_SetConfig+0x2d4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3332      	adds	r3, #50	; 0x32
 8002946:	4a08      	ldr	r2, [pc, #32]	; (8002968 <UART_SetConfig+0x2d4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 0207 	and.w	r2, r3, #7
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4422      	add	r2, r4
 800295a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800295c:	e105      	b.n	8002b6a <UART_SetConfig+0x4d6>
 800295e:	bf00      	nop
 8002960:	40011000 	.word	0x40011000
 8002964:	40011400 	.word	0x40011400
 8002968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800296c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002970:	2200      	movs	r2, #0
 8002972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002976:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800297a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800297e:	4642      	mov	r2, r8
 8002980:	464b      	mov	r3, r9
 8002982:	1891      	adds	r1, r2, r2
 8002984:	6239      	str	r1, [r7, #32]
 8002986:	415b      	adcs	r3, r3
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800298e:	4641      	mov	r1, r8
 8002990:	1854      	adds	r4, r2, r1
 8002992:	4649      	mov	r1, r9
 8002994:	eb43 0501 	adc.w	r5, r3, r1
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	00eb      	lsls	r3, r5, #3
 80029a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a6:	00e2      	lsls	r2, r4, #3
 80029a8:	4614      	mov	r4, r2
 80029aa:	461d      	mov	r5, r3
 80029ac:	4643      	mov	r3, r8
 80029ae:	18e3      	adds	r3, r4, r3
 80029b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029b4:	464b      	mov	r3, r9
 80029b6:	eb45 0303 	adc.w	r3, r5, r3
 80029ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029da:	4629      	mov	r1, r5
 80029dc:	008b      	lsls	r3, r1, #2
 80029de:	4621      	mov	r1, r4
 80029e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e4:	4621      	mov	r1, r4
 80029e6:	008a      	lsls	r2, r1, #2
 80029e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029ec:	f7fd fc58 	bl	80002a0 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4b60      	ldr	r3, [pc, #384]	; (8002b78 <UART_SetConfig+0x4e4>)
 80029f6:	fba3 2302 	umull	r2, r3, r3, r2
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	011c      	lsls	r4, r3, #4
 80029fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a10:	4642      	mov	r2, r8
 8002a12:	464b      	mov	r3, r9
 8002a14:	1891      	adds	r1, r2, r2
 8002a16:	61b9      	str	r1, [r7, #24]
 8002a18:	415b      	adcs	r3, r3
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a20:	4641      	mov	r1, r8
 8002a22:	1851      	adds	r1, r2, r1
 8002a24:	6139      	str	r1, [r7, #16]
 8002a26:	4649      	mov	r1, r9
 8002a28:	414b      	adcs	r3, r1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a38:	4659      	mov	r1, fp
 8002a3a:	00cb      	lsls	r3, r1, #3
 8002a3c:	4651      	mov	r1, sl
 8002a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a42:	4651      	mov	r1, sl
 8002a44:	00ca      	lsls	r2, r1, #3
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	189b      	adds	r3, r3, r2
 8002a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a54:	464b      	mov	r3, r9
 8002a56:	460a      	mov	r2, r1
 8002a58:	eb42 0303 	adc.w	r3, r2, r3
 8002a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a78:	4649      	mov	r1, r9
 8002a7a:	008b      	lsls	r3, r1, #2
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a82:	4641      	mov	r1, r8
 8002a84:	008a      	lsls	r2, r1, #2
 8002a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a8a:	f7fd fc09 	bl	80002a0 <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4b39      	ldr	r3, [pc, #228]	; (8002b78 <UART_SetConfig+0x4e4>)
 8002a94:	fba3 1302 	umull	r1, r3, r3, r2
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	2164      	movs	r1, #100	; 0x64
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	3332      	adds	r3, #50	; 0x32
 8002aa6:	4a34      	ldr	r2, [pc, #208]	; (8002b78 <UART_SetConfig+0x4e4>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab2:	441c      	add	r4, r3
 8002ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab8:	2200      	movs	r2, #0
 8002aba:	673b      	str	r3, [r7, #112]	; 0x70
 8002abc:	677a      	str	r2, [r7, #116]	; 0x74
 8002abe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ac2:	4642      	mov	r2, r8
 8002ac4:	464b      	mov	r3, r9
 8002ac6:	1891      	adds	r1, r2, r2
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	415b      	adcs	r3, r3
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad2:	4641      	mov	r1, r8
 8002ad4:	1851      	adds	r1, r2, r1
 8002ad6:	6039      	str	r1, [r7, #0]
 8002ad8:	4649      	mov	r1, r9
 8002ada:	414b      	adcs	r3, r1
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aea:	4659      	mov	r1, fp
 8002aec:	00cb      	lsls	r3, r1, #3
 8002aee:	4651      	mov	r1, sl
 8002af0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af4:	4651      	mov	r1, sl
 8002af6:	00ca      	lsls	r2, r1, #3
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	4603      	mov	r3, r0
 8002afe:	4642      	mov	r2, r8
 8002b00:	189b      	adds	r3, r3, r2
 8002b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b04:	464b      	mov	r3, r9
 8002b06:	460a      	mov	r2, r1
 8002b08:	eb42 0303 	adc.w	r3, r2, r3
 8002b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	663b      	str	r3, [r7, #96]	; 0x60
 8002b18:	667a      	str	r2, [r7, #100]	; 0x64
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b26:	4649      	mov	r1, r9
 8002b28:	008b      	lsls	r3, r1, #2
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b30:	4641      	mov	r1, r8
 8002b32:	008a      	lsls	r2, r1, #2
 8002b34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b38:	f7fd fbb2 	bl	80002a0 <__aeabi_uldivmod>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <UART_SetConfig+0x4e4>)
 8002b42:	fba3 1302 	umull	r1, r3, r3, r2
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2164      	movs	r1, #100	; 0x64
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	3332      	adds	r3, #50	; 0x32
 8002b54:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <UART_SetConfig+0x4e4>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	f003 020f 	and.w	r2, r3, #15
 8002b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4422      	add	r2, r4
 8002b68:	609a      	str	r2, [r3, #8]
}
 8002b6a:	bf00      	nop
 8002b6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b76:	bf00      	nop
 8002b78:	51eb851f 	.word	0x51eb851f

08002b7c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8002b80:	f7fe fb9c 	bl	80012bc <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8002b84:	f000 f824 	bl	8002bd0 <SystemClock_Config>

  /* Initialize BSP Led for LED1, LED2 and LED3 */
  	BSP_LED_Init(LED1);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7fe fa27 	bl	8000fdc <BSP_LED_Init>
  	BSP_LED_Init(LED2);
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f7fe fa24 	bl	8000fdc <BSP_LED_Init>
  	BSP_LED_Init(LED3);
 8002b94:	2002      	movs	r0, #2
 8002b96:	f7fe fa21 	bl	8000fdc <BSP_LED_Init>

  /* Initialize BSP PB for BUTTON_USER */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fe fa87 	bl	80010b0 <BSP_PB_Init>



  /*Inicializa los puertos GPIO*/
  gpioDisplay_init();
 8002ba2:	f7fe f849 	bl	8000c38 <gpioDisplay_init>
  gpioButton_init();
 8002ba6:	f7fe f8c7 	bl	8000d38 <gpioButton_init>

  debounceFSM_init();
 8002baa:	f7fd fcfb 	bl	80005a4 <debounceFSM_init>
  //bool_t estado;
  //estado=uartInit();
  displayFSM_init();
 8002bae:	f7fd fea1 	bl	80008f4 <displayFSM_init>
	//  	  BSP_LED_On(LED1);
	//  	  BSP_LED_On(LED2);
	//  	  BSP_LED_On(LED3);
	//  }

	  debounceFSM_update(ButtonUP);
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fd fd10 	bl	80005d8 <debounceFSM_update>
	  debounceFSM_update(ButtonDOWN);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7fd fd0d 	bl	80005d8 <debounceFSM_update>
	  displayFSM_update();
 8002bbe:	f7fd fead 	bl	800091c <displayFSM_update>

	  gpioDisplay_write(getStateDisplay());
 8002bc2:	f7fe f819 	bl	8000bf8 <getStateDisplay>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe f8fd 	bl	8000dc8 <gpioDisplay_write>
	  debounceFSM_update(ButtonUP);
 8002bce:	e7f0      	b.n	8002bb2 <main+0x36>

08002bd0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b094      	sub	sp, #80	; 0x50
 8002bd4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <SystemClock_Config+0xbc>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a2b      	ldr	r2, [pc, #172]	; (8002c8c <SystemClock_Config+0xbc>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <SystemClock_Config+0xbc>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <SystemClock_Config+0xc0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a25      	ldr	r2, [pc, #148]	; (8002c90 <SystemClock_Config+0xc0>)
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <SystemClock_Config+0xc0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002c12:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002c16:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c22:	2308      	movs	r3, #8
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002c26:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c30:	2307      	movs	r3, #7
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c34:	f107 030c 	add.w	r3, r7, #12
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe ff45 	bl	8001ac8 <HAL_RCC_OscConfig>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002c44:	f000 f826 	bl	8002c94 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c48:	f7fe feee 	bl	8001a28 <HAL_PWREx_EnableOverDrive>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002c52:	f000 f81f 	bl	8002c94 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002c56:	230f      	movs	r3, #15
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002c62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c72:	2105      	movs	r1, #5
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff f99f 	bl	8001fb8 <HAL_RCC_ClockConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002c80:	f000 f808 	bl	8002c94 <Error_Handler>
  }
}
 8002c84:	bf00      	nop
 8002c86:	3750      	adds	r7, #80	; 0x50
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000

08002c94 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002c98:	2001      	movs	r0, #1
 8002c9a:	f7fe f9ef 	bl	800107c <BSP_LED_On>
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <Error_Handler+0xa>

08002ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cd8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ca6:	e003      	b.n	8002cb0 <LoopCopyDataInit>

08002ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cae:	3104      	adds	r1, #4

08002cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cb0:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cb8:	d3f6      	bcc.n	8002ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cbc:	e002      	b.n	8002cc4 <LoopFillZerobss>

08002cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cc0:	f842 3b04 	str.w	r3, [r2], #4

08002cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cc8:	d3f9      	bcc.n	8002cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cca:	f7fe fa5d 	bl	8001188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cce:	f000 f817 	bl	8002d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd2:	f7ff ff53 	bl	8002b7c <main>
  bx  lr    
 8002cd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002cd8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002cdc:	08003714 	.word	0x08003714
  ldr  r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ce4:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 8002ce8:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 8002cec:	20000148 	.word	0x20000148

08002cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC_IRQHandler>
	...

08002cf4 <__errno>:
 8002cf4:	4b01      	ldr	r3, [pc, #4]	; (8002cfc <__errno+0x8>)
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000048 	.word	0x20000048

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	4d0d      	ldr	r5, [pc, #52]	; (8002d38 <__libc_init_array+0x38>)
 8002d04:	4c0d      	ldr	r4, [pc, #52]	; (8002d3c <__libc_init_array+0x3c>)
 8002d06:	1b64      	subs	r4, r4, r5
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	42a6      	cmp	r6, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	4d0b      	ldr	r5, [pc, #44]	; (8002d40 <__libc_init_array+0x40>)
 8002d12:	4c0c      	ldr	r4, [pc, #48]	; (8002d44 <__libc_init_array+0x44>)
 8002d14:	f000 fc86 	bl	8003624 <_init>
 8002d18:	1b64      	subs	r4, r4, r5
 8002d1a:	10a4      	asrs	r4, r4, #2
 8002d1c:	2600      	movs	r6, #0
 8002d1e:	42a6      	cmp	r6, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d28:	4798      	blx	r3
 8002d2a:	3601      	adds	r6, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d32:	4798      	blx	r3
 8002d34:	3601      	adds	r6, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	0800370c 	.word	0x0800370c
 8002d3c:	0800370c 	.word	0x0800370c
 8002d40:	0800370c 	.word	0x0800370c
 8002d44:	08003710 	.word	0x08003710

08002d48 <siprintf>:
 8002d48:	b40e      	push	{r1, r2, r3}
 8002d4a:	b500      	push	{lr}
 8002d4c:	b09c      	sub	sp, #112	; 0x70
 8002d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8002d50:	9002      	str	r0, [sp, #8]
 8002d52:	9006      	str	r0, [sp, #24]
 8002d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d58:	4809      	ldr	r0, [pc, #36]	; (8002d80 <siprintf+0x38>)
 8002d5a:	9107      	str	r1, [sp, #28]
 8002d5c:	9104      	str	r1, [sp, #16]
 8002d5e:	4909      	ldr	r1, [pc, #36]	; (8002d84 <siprintf+0x3c>)
 8002d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d64:	9105      	str	r1, [sp, #20]
 8002d66:	6800      	ldr	r0, [r0, #0]
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	a902      	add	r1, sp, #8
 8002d6c:	f000 f868 	bl	8002e40 <_svfiprintf_r>
 8002d70:	9b02      	ldr	r3, [sp, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	b01c      	add	sp, #112	; 0x70
 8002d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d7c:	b003      	add	sp, #12
 8002d7e:	4770      	bx	lr
 8002d80:	20000048 	.word	0x20000048
 8002d84:	ffff0208 	.word	0xffff0208

08002d88 <__ssputs_r>:
 8002d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d8c:	688e      	ldr	r6, [r1, #8]
 8002d8e:	429e      	cmp	r6, r3
 8002d90:	4682      	mov	sl, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	4690      	mov	r8, r2
 8002d96:	461f      	mov	r7, r3
 8002d98:	d838      	bhi.n	8002e0c <__ssputs_r+0x84>
 8002d9a:	898a      	ldrh	r2, [r1, #12]
 8002d9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002da0:	d032      	beq.n	8002e08 <__ssputs_r+0x80>
 8002da2:	6825      	ldr	r5, [r4, #0]
 8002da4:	6909      	ldr	r1, [r1, #16]
 8002da6:	eba5 0901 	sub.w	r9, r5, r1
 8002daa:	6965      	ldr	r5, [r4, #20]
 8002dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002db0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002db4:	3301      	adds	r3, #1
 8002db6:	444b      	add	r3, r9
 8002db8:	106d      	asrs	r5, r5, #1
 8002dba:	429d      	cmp	r5, r3
 8002dbc:	bf38      	it	cc
 8002dbe:	461d      	movcc	r5, r3
 8002dc0:	0553      	lsls	r3, r2, #21
 8002dc2:	d531      	bpl.n	8002e28 <__ssputs_r+0xa0>
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f000 fb63 	bl	8003490 <_malloc_r>
 8002dca:	4606      	mov	r6, r0
 8002dcc:	b950      	cbnz	r0, 8002de4 <__ssputs_r+0x5c>
 8002dce:	230c      	movs	r3, #12
 8002dd0:	f8ca 3000 	str.w	r3, [sl]
 8002dd4:	89a3      	ldrh	r3, [r4, #12]
 8002dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dda:	81a3      	strh	r3, [r4, #12]
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de4:	6921      	ldr	r1, [r4, #16]
 8002de6:	464a      	mov	r2, r9
 8002de8:	f000 fabe 	bl	8003368 <memcpy>
 8002dec:	89a3      	ldrh	r3, [r4, #12]
 8002dee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df6:	81a3      	strh	r3, [r4, #12]
 8002df8:	6126      	str	r6, [r4, #16]
 8002dfa:	6165      	str	r5, [r4, #20]
 8002dfc:	444e      	add	r6, r9
 8002dfe:	eba5 0509 	sub.w	r5, r5, r9
 8002e02:	6026      	str	r6, [r4, #0]
 8002e04:	60a5      	str	r5, [r4, #8]
 8002e06:	463e      	mov	r6, r7
 8002e08:	42be      	cmp	r6, r7
 8002e0a:	d900      	bls.n	8002e0e <__ssputs_r+0x86>
 8002e0c:	463e      	mov	r6, r7
 8002e0e:	6820      	ldr	r0, [r4, #0]
 8002e10:	4632      	mov	r2, r6
 8002e12:	4641      	mov	r1, r8
 8002e14:	f000 fab6 	bl	8003384 <memmove>
 8002e18:	68a3      	ldr	r3, [r4, #8]
 8002e1a:	1b9b      	subs	r3, r3, r6
 8002e1c:	60a3      	str	r3, [r4, #8]
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	4433      	add	r3, r6
 8002e22:	6023      	str	r3, [r4, #0]
 8002e24:	2000      	movs	r0, #0
 8002e26:	e7db      	b.n	8002de0 <__ssputs_r+0x58>
 8002e28:	462a      	mov	r2, r5
 8002e2a:	f000 fba5 	bl	8003578 <_realloc_r>
 8002e2e:	4606      	mov	r6, r0
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d1e1      	bne.n	8002df8 <__ssputs_r+0x70>
 8002e34:	6921      	ldr	r1, [r4, #16]
 8002e36:	4650      	mov	r0, sl
 8002e38:	f000 fabe 	bl	80033b8 <_free_r>
 8002e3c:	e7c7      	b.n	8002dce <__ssputs_r+0x46>
	...

08002e40 <_svfiprintf_r>:
 8002e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e44:	4698      	mov	r8, r3
 8002e46:	898b      	ldrh	r3, [r1, #12]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	b09d      	sub	sp, #116	; 0x74
 8002e4c:	4607      	mov	r7, r0
 8002e4e:	460d      	mov	r5, r1
 8002e50:	4614      	mov	r4, r2
 8002e52:	d50e      	bpl.n	8002e72 <_svfiprintf_r+0x32>
 8002e54:	690b      	ldr	r3, [r1, #16]
 8002e56:	b963      	cbnz	r3, 8002e72 <_svfiprintf_r+0x32>
 8002e58:	2140      	movs	r1, #64	; 0x40
 8002e5a:	f000 fb19 	bl	8003490 <_malloc_r>
 8002e5e:	6028      	str	r0, [r5, #0]
 8002e60:	6128      	str	r0, [r5, #16]
 8002e62:	b920      	cbnz	r0, 8002e6e <_svfiprintf_r+0x2e>
 8002e64:	230c      	movs	r3, #12
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	e0d1      	b.n	8003012 <_svfiprintf_r+0x1d2>
 8002e6e:	2340      	movs	r3, #64	; 0x40
 8002e70:	616b      	str	r3, [r5, #20]
 8002e72:	2300      	movs	r3, #0
 8002e74:	9309      	str	r3, [sp, #36]	; 0x24
 8002e76:	2320      	movs	r3, #32
 8002e78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e80:	2330      	movs	r3, #48	; 0x30
 8002e82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800302c <_svfiprintf_r+0x1ec>
 8002e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e8a:	f04f 0901 	mov.w	r9, #1
 8002e8e:	4623      	mov	r3, r4
 8002e90:	469a      	mov	sl, r3
 8002e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e96:	b10a      	cbz	r2, 8002e9c <_svfiprintf_r+0x5c>
 8002e98:	2a25      	cmp	r2, #37	; 0x25
 8002e9a:	d1f9      	bne.n	8002e90 <_svfiprintf_r+0x50>
 8002e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8002ea0:	d00b      	beq.n	8002eba <_svfiprintf_r+0x7a>
 8002ea2:	465b      	mov	r3, fp
 8002ea4:	4622      	mov	r2, r4
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	4638      	mov	r0, r7
 8002eaa:	f7ff ff6d 	bl	8002d88 <__ssputs_r>
 8002eae:	3001      	adds	r0, #1
 8002eb0:	f000 80aa 	beq.w	8003008 <_svfiprintf_r+0x1c8>
 8002eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002eb6:	445a      	add	r2, fp
 8002eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8002eba:	f89a 3000 	ldrb.w	r3, [sl]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80a2 	beq.w	8003008 <_svfiprintf_r+0x1c8>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ece:	f10a 0a01 	add.w	sl, sl, #1
 8002ed2:	9304      	str	r3, [sp, #16]
 8002ed4:	9307      	str	r3, [sp, #28]
 8002ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002eda:	931a      	str	r3, [sp, #104]	; 0x68
 8002edc:	4654      	mov	r4, sl
 8002ede:	2205      	movs	r2, #5
 8002ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ee4:	4851      	ldr	r0, [pc, #324]	; (800302c <_svfiprintf_r+0x1ec>)
 8002ee6:	f7fd f98b 	bl	8000200 <memchr>
 8002eea:	9a04      	ldr	r2, [sp, #16]
 8002eec:	b9d8      	cbnz	r0, 8002f26 <_svfiprintf_r+0xe6>
 8002eee:	06d0      	lsls	r0, r2, #27
 8002ef0:	bf44      	itt	mi
 8002ef2:	2320      	movmi	r3, #32
 8002ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ef8:	0711      	lsls	r1, r2, #28
 8002efa:	bf44      	itt	mi
 8002efc:	232b      	movmi	r3, #43	; 0x2b
 8002efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f02:	f89a 3000 	ldrb.w	r3, [sl]
 8002f06:	2b2a      	cmp	r3, #42	; 0x2a
 8002f08:	d015      	beq.n	8002f36 <_svfiprintf_r+0xf6>
 8002f0a:	9a07      	ldr	r2, [sp, #28]
 8002f0c:	4654      	mov	r4, sl
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f04f 0c0a 	mov.w	ip, #10
 8002f14:	4621      	mov	r1, r4
 8002f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f1a:	3b30      	subs	r3, #48	; 0x30
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	d94e      	bls.n	8002fbe <_svfiprintf_r+0x17e>
 8002f20:	b1b0      	cbz	r0, 8002f50 <_svfiprintf_r+0x110>
 8002f22:	9207      	str	r2, [sp, #28]
 8002f24:	e014      	b.n	8002f50 <_svfiprintf_r+0x110>
 8002f26:	eba0 0308 	sub.w	r3, r0, r8
 8002f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	9304      	str	r3, [sp, #16]
 8002f32:	46a2      	mov	sl, r4
 8002f34:	e7d2      	b.n	8002edc <_svfiprintf_r+0x9c>
 8002f36:	9b03      	ldr	r3, [sp, #12]
 8002f38:	1d19      	adds	r1, r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	9103      	str	r1, [sp, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bfbb      	ittet	lt
 8002f42:	425b      	neglt	r3, r3
 8002f44:	f042 0202 	orrlt.w	r2, r2, #2
 8002f48:	9307      	strge	r3, [sp, #28]
 8002f4a:	9307      	strlt	r3, [sp, #28]
 8002f4c:	bfb8      	it	lt
 8002f4e:	9204      	strlt	r2, [sp, #16]
 8002f50:	7823      	ldrb	r3, [r4, #0]
 8002f52:	2b2e      	cmp	r3, #46	; 0x2e
 8002f54:	d10c      	bne.n	8002f70 <_svfiprintf_r+0x130>
 8002f56:	7863      	ldrb	r3, [r4, #1]
 8002f58:	2b2a      	cmp	r3, #42	; 0x2a
 8002f5a:	d135      	bne.n	8002fc8 <_svfiprintf_r+0x188>
 8002f5c:	9b03      	ldr	r3, [sp, #12]
 8002f5e:	1d1a      	adds	r2, r3, #4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	9203      	str	r2, [sp, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bfb8      	it	lt
 8002f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f6c:	3402      	adds	r4, #2
 8002f6e:	9305      	str	r3, [sp, #20]
 8002f70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800303c <_svfiprintf_r+0x1fc>
 8002f74:	7821      	ldrb	r1, [r4, #0]
 8002f76:	2203      	movs	r2, #3
 8002f78:	4650      	mov	r0, sl
 8002f7a:	f7fd f941 	bl	8000200 <memchr>
 8002f7e:	b140      	cbz	r0, 8002f92 <_svfiprintf_r+0x152>
 8002f80:	2340      	movs	r3, #64	; 0x40
 8002f82:	eba0 000a 	sub.w	r0, r0, sl
 8002f86:	fa03 f000 	lsl.w	r0, r3, r0
 8002f8a:	9b04      	ldr	r3, [sp, #16]
 8002f8c:	4303      	orrs	r3, r0
 8002f8e:	3401      	adds	r4, #1
 8002f90:	9304      	str	r3, [sp, #16]
 8002f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f96:	4826      	ldr	r0, [pc, #152]	; (8003030 <_svfiprintf_r+0x1f0>)
 8002f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f9c:	2206      	movs	r2, #6
 8002f9e:	f7fd f92f 	bl	8000200 <memchr>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d038      	beq.n	8003018 <_svfiprintf_r+0x1d8>
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <_svfiprintf_r+0x1f4>)
 8002fa8:	bb1b      	cbnz	r3, 8002ff2 <_svfiprintf_r+0x1b2>
 8002faa:	9b03      	ldr	r3, [sp, #12]
 8002fac:	3307      	adds	r3, #7
 8002fae:	f023 0307 	bic.w	r3, r3, #7
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fb8:	4433      	add	r3, r6
 8002fba:	9309      	str	r3, [sp, #36]	; 0x24
 8002fbc:	e767      	b.n	8002e8e <_svfiprintf_r+0x4e>
 8002fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	e7a5      	b.n	8002f14 <_svfiprintf_r+0xd4>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	3401      	adds	r4, #1
 8002fcc:	9305      	str	r3, [sp, #20]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f04f 0c0a 	mov.w	ip, #10
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fda:	3a30      	subs	r2, #48	; 0x30
 8002fdc:	2a09      	cmp	r2, #9
 8002fde:	d903      	bls.n	8002fe8 <_svfiprintf_r+0x1a8>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0c5      	beq.n	8002f70 <_svfiprintf_r+0x130>
 8002fe4:	9105      	str	r1, [sp, #20]
 8002fe6:	e7c3      	b.n	8002f70 <_svfiprintf_r+0x130>
 8002fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fec:	4604      	mov	r4, r0
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e7f0      	b.n	8002fd4 <_svfiprintf_r+0x194>
 8002ff2:	ab03      	add	r3, sp, #12
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	462a      	mov	r2, r5
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <_svfiprintf_r+0x1f8>)
 8002ffa:	a904      	add	r1, sp, #16
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	f3af 8000 	nop.w
 8003002:	1c42      	adds	r2, r0, #1
 8003004:	4606      	mov	r6, r0
 8003006:	d1d6      	bne.n	8002fb6 <_svfiprintf_r+0x176>
 8003008:	89ab      	ldrh	r3, [r5, #12]
 800300a:	065b      	lsls	r3, r3, #25
 800300c:	f53f af2c 	bmi.w	8002e68 <_svfiprintf_r+0x28>
 8003010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003012:	b01d      	add	sp, #116	; 0x74
 8003014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003018:	ab03      	add	r3, sp, #12
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	462a      	mov	r2, r5
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <_svfiprintf_r+0x1f8>)
 8003020:	a904      	add	r1, sp, #16
 8003022:	4638      	mov	r0, r7
 8003024:	f000 f87a 	bl	800311c <_printf_i>
 8003028:	e7eb      	b.n	8003002 <_svfiprintf_r+0x1c2>
 800302a:	bf00      	nop
 800302c:	080036d0 	.word	0x080036d0
 8003030:	080036da 	.word	0x080036da
 8003034:	00000000 	.word	0x00000000
 8003038:	08002d89 	.word	0x08002d89
 800303c:	080036d6 	.word	0x080036d6

08003040 <_printf_common>:
 8003040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003044:	4616      	mov	r6, r2
 8003046:	4699      	mov	r9, r3
 8003048:	688a      	ldr	r2, [r1, #8]
 800304a:	690b      	ldr	r3, [r1, #16]
 800304c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003050:	4293      	cmp	r3, r2
 8003052:	bfb8      	it	lt
 8003054:	4613      	movlt	r3, r2
 8003056:	6033      	str	r3, [r6, #0]
 8003058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800305c:	4607      	mov	r7, r0
 800305e:	460c      	mov	r4, r1
 8003060:	b10a      	cbz	r2, 8003066 <_printf_common+0x26>
 8003062:	3301      	adds	r3, #1
 8003064:	6033      	str	r3, [r6, #0]
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	0699      	lsls	r1, r3, #26
 800306a:	bf42      	ittt	mi
 800306c:	6833      	ldrmi	r3, [r6, #0]
 800306e:	3302      	addmi	r3, #2
 8003070:	6033      	strmi	r3, [r6, #0]
 8003072:	6825      	ldr	r5, [r4, #0]
 8003074:	f015 0506 	ands.w	r5, r5, #6
 8003078:	d106      	bne.n	8003088 <_printf_common+0x48>
 800307a:	f104 0a19 	add.w	sl, r4, #25
 800307e:	68e3      	ldr	r3, [r4, #12]
 8003080:	6832      	ldr	r2, [r6, #0]
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	42ab      	cmp	r3, r5
 8003086:	dc26      	bgt.n	80030d6 <_printf_common+0x96>
 8003088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800308c:	1e13      	subs	r3, r2, #0
 800308e:	6822      	ldr	r2, [r4, #0]
 8003090:	bf18      	it	ne
 8003092:	2301      	movne	r3, #1
 8003094:	0692      	lsls	r2, r2, #26
 8003096:	d42b      	bmi.n	80030f0 <_printf_common+0xb0>
 8003098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800309c:	4649      	mov	r1, r9
 800309e:	4638      	mov	r0, r7
 80030a0:	47c0      	blx	r8
 80030a2:	3001      	adds	r0, #1
 80030a4:	d01e      	beq.n	80030e4 <_printf_common+0xa4>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	68e5      	ldr	r5, [r4, #12]
 80030aa:	6832      	ldr	r2, [r6, #0]
 80030ac:	f003 0306 	and.w	r3, r3, #6
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	bf08      	it	eq
 80030b4:	1aad      	subeq	r5, r5, r2
 80030b6:	68a3      	ldr	r3, [r4, #8]
 80030b8:	6922      	ldr	r2, [r4, #16]
 80030ba:	bf0c      	ite	eq
 80030bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030c0:	2500      	movne	r5, #0
 80030c2:	4293      	cmp	r3, r2
 80030c4:	bfc4      	itt	gt
 80030c6:	1a9b      	subgt	r3, r3, r2
 80030c8:	18ed      	addgt	r5, r5, r3
 80030ca:	2600      	movs	r6, #0
 80030cc:	341a      	adds	r4, #26
 80030ce:	42b5      	cmp	r5, r6
 80030d0:	d11a      	bne.n	8003108 <_printf_common+0xc8>
 80030d2:	2000      	movs	r0, #0
 80030d4:	e008      	b.n	80030e8 <_printf_common+0xa8>
 80030d6:	2301      	movs	r3, #1
 80030d8:	4652      	mov	r2, sl
 80030da:	4649      	mov	r1, r9
 80030dc:	4638      	mov	r0, r7
 80030de:	47c0      	blx	r8
 80030e0:	3001      	adds	r0, #1
 80030e2:	d103      	bne.n	80030ec <_printf_common+0xac>
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ec:	3501      	adds	r5, #1
 80030ee:	e7c6      	b.n	800307e <_printf_common+0x3e>
 80030f0:	18e1      	adds	r1, r4, r3
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	2030      	movs	r0, #48	; 0x30
 80030f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030fa:	4422      	add	r2, r4
 80030fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003104:	3302      	adds	r3, #2
 8003106:	e7c7      	b.n	8003098 <_printf_common+0x58>
 8003108:	2301      	movs	r3, #1
 800310a:	4622      	mov	r2, r4
 800310c:	4649      	mov	r1, r9
 800310e:	4638      	mov	r0, r7
 8003110:	47c0      	blx	r8
 8003112:	3001      	adds	r0, #1
 8003114:	d0e6      	beq.n	80030e4 <_printf_common+0xa4>
 8003116:	3601      	adds	r6, #1
 8003118:	e7d9      	b.n	80030ce <_printf_common+0x8e>
	...

0800311c <_printf_i>:
 800311c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003120:	7e0f      	ldrb	r7, [r1, #24]
 8003122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003124:	2f78      	cmp	r7, #120	; 0x78
 8003126:	4691      	mov	r9, r2
 8003128:	4680      	mov	r8, r0
 800312a:	460c      	mov	r4, r1
 800312c:	469a      	mov	sl, r3
 800312e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003132:	d807      	bhi.n	8003144 <_printf_i+0x28>
 8003134:	2f62      	cmp	r7, #98	; 0x62
 8003136:	d80a      	bhi.n	800314e <_printf_i+0x32>
 8003138:	2f00      	cmp	r7, #0
 800313a:	f000 80d8 	beq.w	80032ee <_printf_i+0x1d2>
 800313e:	2f58      	cmp	r7, #88	; 0x58
 8003140:	f000 80a3 	beq.w	800328a <_printf_i+0x16e>
 8003144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800314c:	e03a      	b.n	80031c4 <_printf_i+0xa8>
 800314e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003152:	2b15      	cmp	r3, #21
 8003154:	d8f6      	bhi.n	8003144 <_printf_i+0x28>
 8003156:	a101      	add	r1, pc, #4	; (adr r1, 800315c <_printf_i+0x40>)
 8003158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800315c:	080031b5 	.word	0x080031b5
 8003160:	080031c9 	.word	0x080031c9
 8003164:	08003145 	.word	0x08003145
 8003168:	08003145 	.word	0x08003145
 800316c:	08003145 	.word	0x08003145
 8003170:	08003145 	.word	0x08003145
 8003174:	080031c9 	.word	0x080031c9
 8003178:	08003145 	.word	0x08003145
 800317c:	08003145 	.word	0x08003145
 8003180:	08003145 	.word	0x08003145
 8003184:	08003145 	.word	0x08003145
 8003188:	080032d5 	.word	0x080032d5
 800318c:	080031f9 	.word	0x080031f9
 8003190:	080032b7 	.word	0x080032b7
 8003194:	08003145 	.word	0x08003145
 8003198:	08003145 	.word	0x08003145
 800319c:	080032f7 	.word	0x080032f7
 80031a0:	08003145 	.word	0x08003145
 80031a4:	080031f9 	.word	0x080031f9
 80031a8:	08003145 	.word	0x08003145
 80031ac:	08003145 	.word	0x08003145
 80031b0:	080032bf 	.word	0x080032bf
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	1d1a      	adds	r2, r3, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	602a      	str	r2, [r5, #0]
 80031bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0a3      	b.n	8003310 <_printf_i+0x1f4>
 80031c8:	6820      	ldr	r0, [r4, #0]
 80031ca:	6829      	ldr	r1, [r5, #0]
 80031cc:	0606      	lsls	r6, r0, #24
 80031ce:	f101 0304 	add.w	r3, r1, #4
 80031d2:	d50a      	bpl.n	80031ea <_printf_i+0xce>
 80031d4:	680e      	ldr	r6, [r1, #0]
 80031d6:	602b      	str	r3, [r5, #0]
 80031d8:	2e00      	cmp	r6, #0
 80031da:	da03      	bge.n	80031e4 <_printf_i+0xc8>
 80031dc:	232d      	movs	r3, #45	; 0x2d
 80031de:	4276      	negs	r6, r6
 80031e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031e4:	485e      	ldr	r0, [pc, #376]	; (8003360 <_printf_i+0x244>)
 80031e6:	230a      	movs	r3, #10
 80031e8:	e019      	b.n	800321e <_printf_i+0x102>
 80031ea:	680e      	ldr	r6, [r1, #0]
 80031ec:	602b      	str	r3, [r5, #0]
 80031ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031f2:	bf18      	it	ne
 80031f4:	b236      	sxthne	r6, r6
 80031f6:	e7ef      	b.n	80031d8 <_printf_i+0xbc>
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	6820      	ldr	r0, [r4, #0]
 80031fc:	1d19      	adds	r1, r3, #4
 80031fe:	6029      	str	r1, [r5, #0]
 8003200:	0601      	lsls	r1, r0, #24
 8003202:	d501      	bpl.n	8003208 <_printf_i+0xec>
 8003204:	681e      	ldr	r6, [r3, #0]
 8003206:	e002      	b.n	800320e <_printf_i+0xf2>
 8003208:	0646      	lsls	r6, r0, #25
 800320a:	d5fb      	bpl.n	8003204 <_printf_i+0xe8>
 800320c:	881e      	ldrh	r6, [r3, #0]
 800320e:	4854      	ldr	r0, [pc, #336]	; (8003360 <_printf_i+0x244>)
 8003210:	2f6f      	cmp	r7, #111	; 0x6f
 8003212:	bf0c      	ite	eq
 8003214:	2308      	moveq	r3, #8
 8003216:	230a      	movne	r3, #10
 8003218:	2100      	movs	r1, #0
 800321a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800321e:	6865      	ldr	r5, [r4, #4]
 8003220:	60a5      	str	r5, [r4, #8]
 8003222:	2d00      	cmp	r5, #0
 8003224:	bfa2      	ittt	ge
 8003226:	6821      	ldrge	r1, [r4, #0]
 8003228:	f021 0104 	bicge.w	r1, r1, #4
 800322c:	6021      	strge	r1, [r4, #0]
 800322e:	b90e      	cbnz	r6, 8003234 <_printf_i+0x118>
 8003230:	2d00      	cmp	r5, #0
 8003232:	d04d      	beq.n	80032d0 <_printf_i+0x1b4>
 8003234:	4615      	mov	r5, r2
 8003236:	fbb6 f1f3 	udiv	r1, r6, r3
 800323a:	fb03 6711 	mls	r7, r3, r1, r6
 800323e:	5dc7      	ldrb	r7, [r0, r7]
 8003240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003244:	4637      	mov	r7, r6
 8003246:	42bb      	cmp	r3, r7
 8003248:	460e      	mov	r6, r1
 800324a:	d9f4      	bls.n	8003236 <_printf_i+0x11a>
 800324c:	2b08      	cmp	r3, #8
 800324e:	d10b      	bne.n	8003268 <_printf_i+0x14c>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	07de      	lsls	r6, r3, #31
 8003254:	d508      	bpl.n	8003268 <_printf_i+0x14c>
 8003256:	6923      	ldr	r3, [r4, #16]
 8003258:	6861      	ldr	r1, [r4, #4]
 800325a:	4299      	cmp	r1, r3
 800325c:	bfde      	ittt	le
 800325e:	2330      	movle	r3, #48	; 0x30
 8003260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003264:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003268:	1b52      	subs	r2, r2, r5
 800326a:	6122      	str	r2, [r4, #16]
 800326c:	f8cd a000 	str.w	sl, [sp]
 8003270:	464b      	mov	r3, r9
 8003272:	aa03      	add	r2, sp, #12
 8003274:	4621      	mov	r1, r4
 8003276:	4640      	mov	r0, r8
 8003278:	f7ff fee2 	bl	8003040 <_printf_common>
 800327c:	3001      	adds	r0, #1
 800327e:	d14c      	bne.n	800331a <_printf_i+0x1fe>
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	b004      	add	sp, #16
 8003286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800328a:	4835      	ldr	r0, [pc, #212]	; (8003360 <_printf_i+0x244>)
 800328c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003290:	6829      	ldr	r1, [r5, #0]
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	f851 6b04 	ldr.w	r6, [r1], #4
 8003298:	6029      	str	r1, [r5, #0]
 800329a:	061d      	lsls	r5, r3, #24
 800329c:	d514      	bpl.n	80032c8 <_printf_i+0x1ac>
 800329e:	07df      	lsls	r7, r3, #31
 80032a0:	bf44      	itt	mi
 80032a2:	f043 0320 	orrmi.w	r3, r3, #32
 80032a6:	6023      	strmi	r3, [r4, #0]
 80032a8:	b91e      	cbnz	r6, 80032b2 <_printf_i+0x196>
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f023 0320 	bic.w	r3, r3, #32
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	2310      	movs	r3, #16
 80032b4:	e7b0      	b.n	8003218 <_printf_i+0xfc>
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	f043 0320 	orr.w	r3, r3, #32
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	2378      	movs	r3, #120	; 0x78
 80032c0:	4828      	ldr	r0, [pc, #160]	; (8003364 <_printf_i+0x248>)
 80032c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032c6:	e7e3      	b.n	8003290 <_printf_i+0x174>
 80032c8:	0659      	lsls	r1, r3, #25
 80032ca:	bf48      	it	mi
 80032cc:	b2b6      	uxthmi	r6, r6
 80032ce:	e7e6      	b.n	800329e <_printf_i+0x182>
 80032d0:	4615      	mov	r5, r2
 80032d2:	e7bb      	b.n	800324c <_printf_i+0x130>
 80032d4:	682b      	ldr	r3, [r5, #0]
 80032d6:	6826      	ldr	r6, [r4, #0]
 80032d8:	6961      	ldr	r1, [r4, #20]
 80032da:	1d18      	adds	r0, r3, #4
 80032dc:	6028      	str	r0, [r5, #0]
 80032de:	0635      	lsls	r5, r6, #24
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	d501      	bpl.n	80032e8 <_printf_i+0x1cc>
 80032e4:	6019      	str	r1, [r3, #0]
 80032e6:	e002      	b.n	80032ee <_printf_i+0x1d2>
 80032e8:	0670      	lsls	r0, r6, #25
 80032ea:	d5fb      	bpl.n	80032e4 <_printf_i+0x1c8>
 80032ec:	8019      	strh	r1, [r3, #0]
 80032ee:	2300      	movs	r3, #0
 80032f0:	6123      	str	r3, [r4, #16]
 80032f2:	4615      	mov	r5, r2
 80032f4:	e7ba      	b.n	800326c <_printf_i+0x150>
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	1d1a      	adds	r2, r3, #4
 80032fa:	602a      	str	r2, [r5, #0]
 80032fc:	681d      	ldr	r5, [r3, #0]
 80032fe:	6862      	ldr	r2, [r4, #4]
 8003300:	2100      	movs	r1, #0
 8003302:	4628      	mov	r0, r5
 8003304:	f7fc ff7c 	bl	8000200 <memchr>
 8003308:	b108      	cbz	r0, 800330e <_printf_i+0x1f2>
 800330a:	1b40      	subs	r0, r0, r5
 800330c:	6060      	str	r0, [r4, #4]
 800330e:	6863      	ldr	r3, [r4, #4]
 8003310:	6123      	str	r3, [r4, #16]
 8003312:	2300      	movs	r3, #0
 8003314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003318:	e7a8      	b.n	800326c <_printf_i+0x150>
 800331a:	6923      	ldr	r3, [r4, #16]
 800331c:	462a      	mov	r2, r5
 800331e:	4649      	mov	r1, r9
 8003320:	4640      	mov	r0, r8
 8003322:	47d0      	blx	sl
 8003324:	3001      	adds	r0, #1
 8003326:	d0ab      	beq.n	8003280 <_printf_i+0x164>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	079b      	lsls	r3, r3, #30
 800332c:	d413      	bmi.n	8003356 <_printf_i+0x23a>
 800332e:	68e0      	ldr	r0, [r4, #12]
 8003330:	9b03      	ldr	r3, [sp, #12]
 8003332:	4298      	cmp	r0, r3
 8003334:	bfb8      	it	lt
 8003336:	4618      	movlt	r0, r3
 8003338:	e7a4      	b.n	8003284 <_printf_i+0x168>
 800333a:	2301      	movs	r3, #1
 800333c:	4632      	mov	r2, r6
 800333e:	4649      	mov	r1, r9
 8003340:	4640      	mov	r0, r8
 8003342:	47d0      	blx	sl
 8003344:	3001      	adds	r0, #1
 8003346:	d09b      	beq.n	8003280 <_printf_i+0x164>
 8003348:	3501      	adds	r5, #1
 800334a:	68e3      	ldr	r3, [r4, #12]
 800334c:	9903      	ldr	r1, [sp, #12]
 800334e:	1a5b      	subs	r3, r3, r1
 8003350:	42ab      	cmp	r3, r5
 8003352:	dcf2      	bgt.n	800333a <_printf_i+0x21e>
 8003354:	e7eb      	b.n	800332e <_printf_i+0x212>
 8003356:	2500      	movs	r5, #0
 8003358:	f104 0619 	add.w	r6, r4, #25
 800335c:	e7f5      	b.n	800334a <_printf_i+0x22e>
 800335e:	bf00      	nop
 8003360:	080036e1 	.word	0x080036e1
 8003364:	080036f2 	.word	0x080036f2

08003368 <memcpy>:
 8003368:	440a      	add	r2, r1
 800336a:	4291      	cmp	r1, r2
 800336c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003370:	d100      	bne.n	8003374 <memcpy+0xc>
 8003372:	4770      	bx	lr
 8003374:	b510      	push	{r4, lr}
 8003376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800337a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800337e:	4291      	cmp	r1, r2
 8003380:	d1f9      	bne.n	8003376 <memcpy+0xe>
 8003382:	bd10      	pop	{r4, pc}

08003384 <memmove>:
 8003384:	4288      	cmp	r0, r1
 8003386:	b510      	push	{r4, lr}
 8003388:	eb01 0402 	add.w	r4, r1, r2
 800338c:	d902      	bls.n	8003394 <memmove+0x10>
 800338e:	4284      	cmp	r4, r0
 8003390:	4623      	mov	r3, r4
 8003392:	d807      	bhi.n	80033a4 <memmove+0x20>
 8003394:	1e43      	subs	r3, r0, #1
 8003396:	42a1      	cmp	r1, r4
 8003398:	d008      	beq.n	80033ac <memmove+0x28>
 800339a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800339e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033a2:	e7f8      	b.n	8003396 <memmove+0x12>
 80033a4:	4402      	add	r2, r0
 80033a6:	4601      	mov	r1, r0
 80033a8:	428a      	cmp	r2, r1
 80033aa:	d100      	bne.n	80033ae <memmove+0x2a>
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033b6:	e7f7      	b.n	80033a8 <memmove+0x24>

080033b8 <_free_r>:
 80033b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033ba:	2900      	cmp	r1, #0
 80033bc:	d044      	beq.n	8003448 <_free_r+0x90>
 80033be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033c2:	9001      	str	r0, [sp, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f1a1 0404 	sub.w	r4, r1, #4
 80033ca:	bfb8      	it	lt
 80033cc:	18e4      	addlt	r4, r4, r3
 80033ce:	f000 f913 	bl	80035f8 <__malloc_lock>
 80033d2:	4a1e      	ldr	r2, [pc, #120]	; (800344c <_free_r+0x94>)
 80033d4:	9801      	ldr	r0, [sp, #4]
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	b933      	cbnz	r3, 80033e8 <_free_r+0x30>
 80033da:	6063      	str	r3, [r4, #4]
 80033dc:	6014      	str	r4, [r2, #0]
 80033de:	b003      	add	sp, #12
 80033e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033e4:	f000 b90e 	b.w	8003604 <__malloc_unlock>
 80033e8:	42a3      	cmp	r3, r4
 80033ea:	d908      	bls.n	80033fe <_free_r+0x46>
 80033ec:	6825      	ldr	r5, [r4, #0]
 80033ee:	1961      	adds	r1, r4, r5
 80033f0:	428b      	cmp	r3, r1
 80033f2:	bf01      	itttt	eq
 80033f4:	6819      	ldreq	r1, [r3, #0]
 80033f6:	685b      	ldreq	r3, [r3, #4]
 80033f8:	1949      	addeq	r1, r1, r5
 80033fa:	6021      	streq	r1, [r4, #0]
 80033fc:	e7ed      	b.n	80033da <_free_r+0x22>
 80033fe:	461a      	mov	r2, r3
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	b10b      	cbz	r3, 8003408 <_free_r+0x50>
 8003404:	42a3      	cmp	r3, r4
 8003406:	d9fa      	bls.n	80033fe <_free_r+0x46>
 8003408:	6811      	ldr	r1, [r2, #0]
 800340a:	1855      	adds	r5, r2, r1
 800340c:	42a5      	cmp	r5, r4
 800340e:	d10b      	bne.n	8003428 <_free_r+0x70>
 8003410:	6824      	ldr	r4, [r4, #0]
 8003412:	4421      	add	r1, r4
 8003414:	1854      	adds	r4, r2, r1
 8003416:	42a3      	cmp	r3, r4
 8003418:	6011      	str	r1, [r2, #0]
 800341a:	d1e0      	bne.n	80033de <_free_r+0x26>
 800341c:	681c      	ldr	r4, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	6053      	str	r3, [r2, #4]
 8003422:	4421      	add	r1, r4
 8003424:	6011      	str	r1, [r2, #0]
 8003426:	e7da      	b.n	80033de <_free_r+0x26>
 8003428:	d902      	bls.n	8003430 <_free_r+0x78>
 800342a:	230c      	movs	r3, #12
 800342c:	6003      	str	r3, [r0, #0]
 800342e:	e7d6      	b.n	80033de <_free_r+0x26>
 8003430:	6825      	ldr	r5, [r4, #0]
 8003432:	1961      	adds	r1, r4, r5
 8003434:	428b      	cmp	r3, r1
 8003436:	bf04      	itt	eq
 8003438:	6819      	ldreq	r1, [r3, #0]
 800343a:	685b      	ldreq	r3, [r3, #4]
 800343c:	6063      	str	r3, [r4, #4]
 800343e:	bf04      	itt	eq
 8003440:	1949      	addeq	r1, r1, r5
 8003442:	6021      	streq	r1, [r4, #0]
 8003444:	6054      	str	r4, [r2, #4]
 8003446:	e7ca      	b.n	80033de <_free_r+0x26>
 8003448:	b003      	add	sp, #12
 800344a:	bd30      	pop	{r4, r5, pc}
 800344c:	20000138 	.word	0x20000138

08003450 <sbrk_aligned>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	4e0e      	ldr	r6, [pc, #56]	; (800348c <sbrk_aligned+0x3c>)
 8003454:	460c      	mov	r4, r1
 8003456:	6831      	ldr	r1, [r6, #0]
 8003458:	4605      	mov	r5, r0
 800345a:	b911      	cbnz	r1, 8003462 <sbrk_aligned+0x12>
 800345c:	f000 f8bc 	bl	80035d8 <_sbrk_r>
 8003460:	6030      	str	r0, [r6, #0]
 8003462:	4621      	mov	r1, r4
 8003464:	4628      	mov	r0, r5
 8003466:	f000 f8b7 	bl	80035d8 <_sbrk_r>
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	d00a      	beq.n	8003484 <sbrk_aligned+0x34>
 800346e:	1cc4      	adds	r4, r0, #3
 8003470:	f024 0403 	bic.w	r4, r4, #3
 8003474:	42a0      	cmp	r0, r4
 8003476:	d007      	beq.n	8003488 <sbrk_aligned+0x38>
 8003478:	1a21      	subs	r1, r4, r0
 800347a:	4628      	mov	r0, r5
 800347c:	f000 f8ac 	bl	80035d8 <_sbrk_r>
 8003480:	3001      	adds	r0, #1
 8003482:	d101      	bne.n	8003488 <sbrk_aligned+0x38>
 8003484:	f04f 34ff 	mov.w	r4, #4294967295
 8003488:	4620      	mov	r0, r4
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	2000013c 	.word	0x2000013c

08003490 <_malloc_r>:
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003494:	1ccd      	adds	r5, r1, #3
 8003496:	f025 0503 	bic.w	r5, r5, #3
 800349a:	3508      	adds	r5, #8
 800349c:	2d0c      	cmp	r5, #12
 800349e:	bf38      	it	cc
 80034a0:	250c      	movcc	r5, #12
 80034a2:	2d00      	cmp	r5, #0
 80034a4:	4607      	mov	r7, r0
 80034a6:	db01      	blt.n	80034ac <_malloc_r+0x1c>
 80034a8:	42a9      	cmp	r1, r5
 80034aa:	d905      	bls.n	80034b8 <_malloc_r+0x28>
 80034ac:	230c      	movs	r3, #12
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	2600      	movs	r6, #0
 80034b2:	4630      	mov	r0, r6
 80034b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b8:	4e2e      	ldr	r6, [pc, #184]	; (8003574 <_malloc_r+0xe4>)
 80034ba:	f000 f89d 	bl	80035f8 <__malloc_lock>
 80034be:	6833      	ldr	r3, [r6, #0]
 80034c0:	461c      	mov	r4, r3
 80034c2:	bb34      	cbnz	r4, 8003512 <_malloc_r+0x82>
 80034c4:	4629      	mov	r1, r5
 80034c6:	4638      	mov	r0, r7
 80034c8:	f7ff ffc2 	bl	8003450 <sbrk_aligned>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	4604      	mov	r4, r0
 80034d0:	d14d      	bne.n	800356e <_malloc_r+0xde>
 80034d2:	6834      	ldr	r4, [r6, #0]
 80034d4:	4626      	mov	r6, r4
 80034d6:	2e00      	cmp	r6, #0
 80034d8:	d140      	bne.n	800355c <_malloc_r+0xcc>
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	4631      	mov	r1, r6
 80034de:	4638      	mov	r0, r7
 80034e0:	eb04 0803 	add.w	r8, r4, r3
 80034e4:	f000 f878 	bl	80035d8 <_sbrk_r>
 80034e8:	4580      	cmp	r8, r0
 80034ea:	d13a      	bne.n	8003562 <_malloc_r+0xd2>
 80034ec:	6821      	ldr	r1, [r4, #0]
 80034ee:	3503      	adds	r5, #3
 80034f0:	1a6d      	subs	r5, r5, r1
 80034f2:	f025 0503 	bic.w	r5, r5, #3
 80034f6:	3508      	adds	r5, #8
 80034f8:	2d0c      	cmp	r5, #12
 80034fa:	bf38      	it	cc
 80034fc:	250c      	movcc	r5, #12
 80034fe:	4629      	mov	r1, r5
 8003500:	4638      	mov	r0, r7
 8003502:	f7ff ffa5 	bl	8003450 <sbrk_aligned>
 8003506:	3001      	adds	r0, #1
 8003508:	d02b      	beq.n	8003562 <_malloc_r+0xd2>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	442b      	add	r3, r5
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	e00e      	b.n	8003530 <_malloc_r+0xa0>
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	1b52      	subs	r2, r2, r5
 8003516:	d41e      	bmi.n	8003556 <_malloc_r+0xc6>
 8003518:	2a0b      	cmp	r2, #11
 800351a:	d916      	bls.n	800354a <_malloc_r+0xba>
 800351c:	1961      	adds	r1, r4, r5
 800351e:	42a3      	cmp	r3, r4
 8003520:	6025      	str	r5, [r4, #0]
 8003522:	bf18      	it	ne
 8003524:	6059      	strne	r1, [r3, #4]
 8003526:	6863      	ldr	r3, [r4, #4]
 8003528:	bf08      	it	eq
 800352a:	6031      	streq	r1, [r6, #0]
 800352c:	5162      	str	r2, [r4, r5]
 800352e:	604b      	str	r3, [r1, #4]
 8003530:	4638      	mov	r0, r7
 8003532:	f104 060b 	add.w	r6, r4, #11
 8003536:	f000 f865 	bl	8003604 <__malloc_unlock>
 800353a:	f026 0607 	bic.w	r6, r6, #7
 800353e:	1d23      	adds	r3, r4, #4
 8003540:	1af2      	subs	r2, r6, r3
 8003542:	d0b6      	beq.n	80034b2 <_malloc_r+0x22>
 8003544:	1b9b      	subs	r3, r3, r6
 8003546:	50a3      	str	r3, [r4, r2]
 8003548:	e7b3      	b.n	80034b2 <_malloc_r+0x22>
 800354a:	6862      	ldr	r2, [r4, #4]
 800354c:	42a3      	cmp	r3, r4
 800354e:	bf0c      	ite	eq
 8003550:	6032      	streq	r2, [r6, #0]
 8003552:	605a      	strne	r2, [r3, #4]
 8003554:	e7ec      	b.n	8003530 <_malloc_r+0xa0>
 8003556:	4623      	mov	r3, r4
 8003558:	6864      	ldr	r4, [r4, #4]
 800355a:	e7b2      	b.n	80034c2 <_malloc_r+0x32>
 800355c:	4634      	mov	r4, r6
 800355e:	6876      	ldr	r6, [r6, #4]
 8003560:	e7b9      	b.n	80034d6 <_malloc_r+0x46>
 8003562:	230c      	movs	r3, #12
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4638      	mov	r0, r7
 8003568:	f000 f84c 	bl	8003604 <__malloc_unlock>
 800356c:	e7a1      	b.n	80034b2 <_malloc_r+0x22>
 800356e:	6025      	str	r5, [r4, #0]
 8003570:	e7de      	b.n	8003530 <_malloc_r+0xa0>
 8003572:	bf00      	nop
 8003574:	20000138 	.word	0x20000138

08003578 <_realloc_r>:
 8003578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357c:	4680      	mov	r8, r0
 800357e:	4614      	mov	r4, r2
 8003580:	460e      	mov	r6, r1
 8003582:	b921      	cbnz	r1, 800358e <_realloc_r+0x16>
 8003584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003588:	4611      	mov	r1, r2
 800358a:	f7ff bf81 	b.w	8003490 <_malloc_r>
 800358e:	b92a      	cbnz	r2, 800359c <_realloc_r+0x24>
 8003590:	f7ff ff12 	bl	80033b8 <_free_r>
 8003594:	4625      	mov	r5, r4
 8003596:	4628      	mov	r0, r5
 8003598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800359c:	f000 f838 	bl	8003610 <_malloc_usable_size_r>
 80035a0:	4284      	cmp	r4, r0
 80035a2:	4607      	mov	r7, r0
 80035a4:	d802      	bhi.n	80035ac <_realloc_r+0x34>
 80035a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80035aa:	d812      	bhi.n	80035d2 <_realloc_r+0x5a>
 80035ac:	4621      	mov	r1, r4
 80035ae:	4640      	mov	r0, r8
 80035b0:	f7ff ff6e 	bl	8003490 <_malloc_r>
 80035b4:	4605      	mov	r5, r0
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d0ed      	beq.n	8003596 <_realloc_r+0x1e>
 80035ba:	42bc      	cmp	r4, r7
 80035bc:	4622      	mov	r2, r4
 80035be:	4631      	mov	r1, r6
 80035c0:	bf28      	it	cs
 80035c2:	463a      	movcs	r2, r7
 80035c4:	f7ff fed0 	bl	8003368 <memcpy>
 80035c8:	4631      	mov	r1, r6
 80035ca:	4640      	mov	r0, r8
 80035cc:	f7ff fef4 	bl	80033b8 <_free_r>
 80035d0:	e7e1      	b.n	8003596 <_realloc_r+0x1e>
 80035d2:	4635      	mov	r5, r6
 80035d4:	e7df      	b.n	8003596 <_realloc_r+0x1e>
	...

080035d8 <_sbrk_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	4d06      	ldr	r5, [pc, #24]	; (80035f4 <_sbrk_r+0x1c>)
 80035dc:	2300      	movs	r3, #0
 80035de:	4604      	mov	r4, r0
 80035e0:	4608      	mov	r0, r1
 80035e2:	602b      	str	r3, [r5, #0]
 80035e4:	f7fd fe34 	bl	8001250 <_sbrk>
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d102      	bne.n	80035f2 <_sbrk_r+0x1a>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	b103      	cbz	r3, 80035f2 <_sbrk_r+0x1a>
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	20000140 	.word	0x20000140

080035f8 <__malloc_lock>:
 80035f8:	4801      	ldr	r0, [pc, #4]	; (8003600 <__malloc_lock+0x8>)
 80035fa:	f000 b811 	b.w	8003620 <__retarget_lock_acquire_recursive>
 80035fe:	bf00      	nop
 8003600:	20000144 	.word	0x20000144

08003604 <__malloc_unlock>:
 8003604:	4801      	ldr	r0, [pc, #4]	; (800360c <__malloc_unlock+0x8>)
 8003606:	f000 b80c 	b.w	8003622 <__retarget_lock_release_recursive>
 800360a:	bf00      	nop
 800360c:	20000144 	.word	0x20000144

08003610 <_malloc_usable_size_r>:
 8003610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003614:	1f18      	subs	r0, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	bfbc      	itt	lt
 800361a:	580b      	ldrlt	r3, [r1, r0]
 800361c:	18c0      	addlt	r0, r0, r3
 800361e:	4770      	bx	lr

08003620 <__retarget_lock_acquire_recursive>:
 8003620:	4770      	bx	lr

08003622 <__retarget_lock_release_recursive>:
 8003622:	4770      	bx	lr

08003624 <_init>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	bf00      	nop
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr

08003630 <_fini>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	bf00      	nop
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr
