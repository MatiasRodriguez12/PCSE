
Ejemplo ADS1115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004280  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004524  08004524  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800452c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000000cc  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c535  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e7d  00000000  00000000  0002c5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  0002ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002659a  00000000  00000000  0002f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116bc  00000000  00000000  00055ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3430  00000000  00000000  0006757e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a9ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ef4  00000000  00000000  0014aa00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004418 	.word	0x08004418

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08004418 	.word	0x08004418

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <ADS1115_channelInitPolled>:
/*ADS1115_channelInitPolled:
 *Inicializa un canal de conversión, el cual funciona con el puerto READY del sensor.
 *Se carga los valores de umbrales adecuados para activar el funcionamiento del pin READY.
 *Channel:SINGLE_MODE_AO,SINGLE_MODE_A1,SINGLE_MODE_A2, SINGLE_MODE_A3
 *        DIFERENTIAL_MODE_A0_A1,DIFERENTIAL_MODE_A0_A3,DIFERENTIAL_MODE_A1_A3,DIFERENTIAL_MODE_A2_A3*/
void ADS1115_channelInitPolled(signalADS1115 * signalADS1115_port,uint8_t channel,uint8_t slaveAddres){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
 80005b0:	4613      	mov	r3, r2
 80005b2:	70bb      	strb	r3, [r7, #2]
	signalADS1115_port->channel=channel;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	78fa      	ldrb	r2, [r7, #3]
 80005b8:	701a      	strb	r2, [r3, #0]
	signalADS1115_port->pga=PGA_0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	705a      	strb	r2, [r3, #1]
	signalADS1115_port->operationMode=MODE_SINGLE_SHOT;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	709a      	strb	r2, [r3, #2]
	signalADS1115_port->dataRate=DATA_RATE_128_SPS;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2204      	movs	r2, #4
 80005ca:	70da      	strb	r2, [r3, #3]
	signalADS1115_port->comparadorMode=COMPARATOR_WITH_HYSTEREIS;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	711a      	strb	r2, [r3, #4]
	signalADS1115_port->comparadorPolarity=ALERT_ACTIVE_HIGH;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2201      	movs	r2, #1
 80005d6:	715a      	strb	r2, [r3, #5]
	signalADS1115_port->latchingComparador=NON_LATCHING_COMP;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	719a      	strb	r2, [r3, #6]
	signalADS1115_port->stateComparator=AFTER_ONE_CONVERSION;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	71da      	strb	r2, [r3, #7]
	signalADS1115_port->countConversion=0;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	811a      	strh	r2, [r3, #8]

	ADS1115_updateThreshold(slaveAddres,READY_UMBRAL_LOW,READY_UMBRAL_HIGH);
 80005ea:	78bb      	ldrb	r3, [r7, #2]
 80005ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f900 	bl	80007f8 <ADS1115_updateThreshold>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <ADS1115_startConversionPolled>:
}

/*ADS1115_startConversionPolled:
 *Funcion que inicia la conversion.
 *Es utilizada cuando se usa el sensor con la intervencion del pin READY.*/
void ADS1115_startConversionPolled(signalADS1115 * signalADS1115_port,uint8_t slaveAddres){
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
	uint8_t wordWrite [3]={0};
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <ADS1115_startConversionPolled+0x94>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	81bb      	strh	r3, [r7, #12]
 8000612:	2300      	movs	r3, #0
 8000614:	73bb      	strb	r3, [r7, #14]

	wordWrite[0]=CONFIG_REG;
 8000616:	2301      	movs	r3, #1
 8000618:	733b      	strb	r3, [r7, #12]
	wordWrite[1]=((OS_BIT_CONVERSION<<7)|signalADS1115_port->channel<<4|signalADS1115_port->pga <<1|signalADS1115_port->operationMode);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	b25b      	sxtb	r3, r3
 8000622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000626:	b25a      	sxtb	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b25b      	sxtb	r3, r3
 8000630:	4313      	orrs	r3, r2
 8000632:	b25a      	sxtb	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	b25b      	sxtb	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	b25b      	sxtb	r3, r3
 800063e:	b2db      	uxtb	r3, r3
 8000640:	737b      	strb	r3, [r7, #13]
	wordWrite[2]=((signalADS1115_port->dataRate<<5)|(signalADS1115_port->comparadorMode<<4)|(signalADS1115_port->comparadorPolarity<<3)|(signalADS1115_port->latchingComparador<<2)|signalADS1115_port->stateComparator);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	78db      	ldrb	r3, [r3, #3]
 8000646:	015b      	lsls	r3, r3, #5
 8000648:	b25a      	sxtb	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	011b      	lsls	r3, r3, #4
 8000650:	b25b      	sxtb	r3, r3
 8000652:	4313      	orrs	r3, r2
 8000654:	b25a      	sxtb	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	795b      	ldrb	r3, [r3, #5]
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	b25b      	sxtb	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b25a      	sxtb	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	799b      	ldrb	r3, [r3, #6]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	b25b      	sxtb	r3, r3
 800066a:	4313      	orrs	r3, r2
 800066c:	b25a      	sxtb	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	79db      	ldrb	r3, [r3, #7]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	4313      	orrs	r3, r2
 8000676:	b25b      	sxtb	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73bb      	strb	r3, [r7, #14]
	ADS1115_Transmit(slaveAddres, wordWrite,3);
 800067c:	f107 010c 	add.w	r1, r7, #12
 8000680:	78fb      	ldrb	r3, [r7, #3]
 8000682:	2203      	movs	r2, #3
 8000684:	4618      	mov	r0, r3
 8000686:	f000 f9a1 	bl	80009cc <ADS1115_Transmit>
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	08004430 	.word	0x08004430

08000698 <ADS1115_getConversionPolled>:

/*ADS1115_getConversionPolled:
 *Función que devuelve el valor de la conversión.
 *Se utiliza cuando el sensor funciona con la intervención del pin READY.*/
uint16_t ADS1115_getConversionPolled(signalADS1115 * signalADS1115_port,uint8_t slaveAddres){
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
	uint8_t wordWrite [3]={0};
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <ADS1115_getConversionPolled+0x78>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	823b      	strh	r3, [r7, #16]
 80006aa:	2300      	movs	r3, #0
 80006ac:	74bb      	strb	r3, [r7, #18]
	uint16_t wordRead;
	uint8_t wordReading[2];
	bool conversionReady=false;
 80006ae:	2300      	movs	r3, #0
 80006b0:	75fb      	strb	r3, [r7, #23]

	  //-----------------------------------
	  //-------CONSULTANDO PIN READY-------

	  while(conversionReady==false){
 80006b2:	e006      	b.n	80006c2 <ADS1115_getConversionPolled+0x2a>

		  if(ADS1115_gpioReadyRead()==true){
 80006b4:	f000 f970 	bl	8000998 <ADS1115_gpioReadyRead>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <ADS1115_getConversionPolled+0x2a>
			  conversionReady=true;
 80006be:	2301      	movs	r3, #1
 80006c0:	75fb      	strb	r3, [r7, #23]
	  while(conversionReady==false){
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	f083 0301 	eor.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f2      	bne.n	80006b4 <ADS1115_getConversionPolled+0x1c>
		  }
	  }
	  //-----------------------------------

	wordWrite[0]=CONVERSION_REG;
 80006ce:	2300      	movs	r3, #0
 80006d0:	743b      	strb	r3, [r7, #16]
	ADS1115_Transmit(slaveAddres, wordWrite,1);
 80006d2:	f107 0110 	add.w	r1, r7, #16
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2201      	movs	r2, #1
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f976 	bl	80009cc <ADS1115_Transmit>

	ADS1115_Receive(slaveAddres,wordReading,2);
 80006e0:	f107 010c 	add.w	r1, r7, #12
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2202      	movs	r2, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f989 	bl	8000a00 <ADS1115_Receive>
	wordRead=((wordReading[0]<<8)|wordReading[1]);
 80006ee:	7b3b      	ldrb	r3, [r7, #12]
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	7b7b      	ldrb	r3, [r7, #13]
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	82bb      	strh	r3, [r7, #20]

	  if (wordRead<0){
		  wordRead=0;
	 	  }

	signalADS1115_port->countConversion=wordRead;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	8aba      	ldrh	r2, [r7, #20]
 8000702:	811a      	strh	r2, [r3, #8]
	return wordRead;
 8000704:	8abb      	ldrh	r3, [r7, #20]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	08004430 	.word	0x08004430

08000714 <ADS1115_getValueVoltage>:

/*ADS1115_getValueVoltage:
 *Función devuelve el valor de conversion.expresado en VOLTS (Modulo).
 *El valor de cuenta(signo incluido) se almacena en la estructura del canal.*/
float ADS1115_getValueVoltage(signalADS1115 * signalADS1115_port){
 8000714:	b480      	push	{r7}
 8000716:	b087      	sub	sp, #28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	float maxVoltage=0.0;
 800071c:	f04f 0300 	mov.w	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
	float voltage=0.0;
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
	uint16_t cuenta=0;
 8000728:	2300      	movs	r3, #0
 800072a:	827b      	strh	r3, [r7, #18]

	switch(signalADS1115_port->pga){
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	785b      	ldrb	r3, [r3, #1]
 8000730:	2b07      	cmp	r3, #7
 8000732:	d82b      	bhi.n	800078c <ADS1115_getValueVoltage+0x78>
 8000734:	a201      	add	r2, pc, #4	; (adr r2, 800073c <ADS1115_getValueVoltage+0x28>)
 8000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073a:	bf00      	nop
 800073c:	0800075d 	.word	0x0800075d
 8000740:	08000763 	.word	0x08000763
 8000744:	08000769 	.word	0x08000769
 8000748:	0800076f 	.word	0x0800076f
 800074c:	08000775 	.word	0x08000775
 8000750:	0800077b 	.word	0x0800077b
 8000754:	08000781 	.word	0x08000781
 8000758:	08000787 	.word	0x08000787
	case PGA_0:
		maxVoltage=FULL_RANGE_PG0;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <ADS1115_getValueVoltage+0xc8>)
 800075e:	617b      	str	r3, [r7, #20]
		break;
 8000760:	e018      	b.n	8000794 <ADS1115_getValueVoltage+0x80>
	case PGA_1:
		maxVoltage=FULL_RANGE_PG1;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <ADS1115_getValueVoltage+0xcc>)
 8000764:	617b      	str	r3, [r7, #20]
		break;
 8000766:	e015      	b.n	8000794 <ADS1115_getValueVoltage+0x80>
	case PGA_2:
		maxVoltage=FULL_RANGE_PG2;
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <ADS1115_getValueVoltage+0xd0>)
 800076a:	617b      	str	r3, [r7, #20]
		break;
 800076c:	e012      	b.n	8000794 <ADS1115_getValueVoltage+0x80>
	case PGA_3:
		maxVoltage=FULL_RANGE_PG3;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <ADS1115_getValueVoltage+0xd4>)
 8000770:	617b      	str	r3, [r7, #20]
		break;
 8000772:	e00f      	b.n	8000794 <ADS1115_getValueVoltage+0x80>
	case PGA_4:
		maxVoltage=FULL_RANGE_PG4;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <ADS1115_getValueVoltage+0xd8>)
 8000776:	617b      	str	r3, [r7, #20]
		break;
 8000778:	e00c      	b.n	8000794 <ADS1115_getValueVoltage+0x80>
	case PGA_5:
		maxVoltage=FULL_RANGE_PG5;
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <ADS1115_getValueVoltage+0xdc>)
 800077c:	617b      	str	r3, [r7, #20]
		break;
 800077e:	e009      	b.n	8000794 <ADS1115_getValueVoltage+0x80>
	case PGA_6:
		maxVoltage=FULL_RANGE_PG6;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <ADS1115_getValueVoltage+0xdc>)
 8000782:	617b      	str	r3, [r7, #20]
		break;
 8000784:	e006      	b.n	8000794 <ADS1115_getValueVoltage+0x80>
	case PGA_7:
		maxVoltage=FULL_RANGE_PG7;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <ADS1115_getValueVoltage+0xdc>)
 8000788:	617b      	str	r3, [r7, #20]
		break;
 800078a:	e003      	b.n	8000794 <ADS1115_getValueVoltage+0x80>
	default:
		maxVoltage=0.0;
 800078c:	f04f 0300 	mov.w	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
		break;
 8000792:	bf00      	nop
	}

	cuenta=signalADS1115_port->countConversion;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	891b      	ldrh	r3, [r3, #8]
 8000798:	827b      	strh	r3, [r7, #18]

	if(signalADS1115_port->countConversion>>15){
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	891b      	ldrh	r3, [r3, #8]
 800079e:	b21b      	sxth	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	da02      	bge.n	80007aa <ADS1115_getValueVoltage+0x96>
		cuenta=~cuenta;
 80007a4:	8a7b      	ldrh	r3, [r7, #18]
 80007a6:	43db      	mvns	r3, r3
 80007a8:	827b      	strh	r3, [r7, #18]
	}

	voltage=(maxVoltage/CUENTA_MAXIMA_ADC)*cuenta;
 80007aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80007ae:	eddf 6a11 	vldr	s13, [pc, #68]	; 80007f4 <ADS1115_getValueVoltage+0xe0>
 80007b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80007b6:	8a7b      	ldrh	r3, [r7, #18]
 80007b8:	ee07 3a90 	vmov	s15, r3
 80007bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007c4:	edc7 7a03 	vstr	s15, [r7, #12]
	return voltage;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	ee07 3a90 	vmov	s15, r3
}
 80007ce:	eeb0 0a67 	vmov.f32	s0, s15
 80007d2:	371c      	adds	r7, #28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40c49ba6 	.word	0x40c49ba6
 80007e0:	4083126f 	.word	0x4083126f
 80007e4:	4003126f 	.word	0x4003126f
 80007e8:	3f83126f 	.word	0x3f83126f
 80007ec:	3f03126f 	.word	0x3f03126f
 80007f0:	3e83126f 	.word	0x3e83126f
 80007f4:	47000000 	.word	0x47000000

080007f8 <ADS1115_updateThreshold>:
	signalADS1115_port->stateComparator=state;
}

/*ADS1115_updateThreshold:
 *Función que actualiza los valores de umbrales para la comparacion.*/
void ADS1115_updateThreshold(uint8_t slaveAddres,uint16_t umbralLow, uint16_t	umbralHigh){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	460b      	mov	r3, r1
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	807b      	strh	r3, [r7, #2]
	  uint8_t wordWrite[3]={0};
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <ADS1115_updateThreshold+0x68>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	81bb      	strh	r3, [r7, #12]
 8000810:	2300      	movs	r3, #0
 8000812:	73bb      	strb	r3, [r7, #14]
	  wordWrite[0]=LO_THRESH_REG;
 8000814:	2302      	movs	r3, #2
 8000816:	733b      	strb	r3, [r7, #12]
	  wordWrite[1]=(umbralLow>>8);
 8000818:	88bb      	ldrh	r3, [r7, #4]
 800081a:	0a1b      	lsrs	r3, r3, #8
 800081c:	b29b      	uxth	r3, r3
 800081e:	b2db      	uxtb	r3, r3
 8000820:	737b      	strb	r3, [r7, #13]
	  wordWrite[2]=umbralLow;
 8000822:	88bb      	ldrh	r3, [r7, #4]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	73bb      	strb	r3, [r7, #14]
	  ADS1115_Transmit(slaveAddres, wordWrite,3);
 8000828:	f107 010c 	add.w	r1, r7, #12
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2203      	movs	r2, #3
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f8cb 	bl	80009cc <ADS1115_Transmit>

	  wordWrite[0]=HI_THRESH_REG;
 8000836:	2303      	movs	r3, #3
 8000838:	733b      	strb	r3, [r7, #12]
	  wordWrite[1]=(umbralHigh>>8);
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	737b      	strb	r3, [r7, #13]
	  wordWrite[2]=umbralHigh;
 8000844:	887b      	ldrh	r3, [r7, #2]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	73bb      	strb	r3, [r7, #14]
	  ADS1115_Transmit(slaveAddres, wordWrite,3);
 800084a:	f107 010c 	add.w	r1, r7, #12
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2203      	movs	r2, #3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f8ba 	bl	80009cc <ADS1115_Transmit>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08004430 	.word	0x08004430

08000864 <I2CGpio_init>:

I2C_HandleTypeDef I2C1_handle;

/*I2CGpio_init:
 *Función que inicializa la configuración de los puertos SDA y SCL.*/
void I2CGpio_init(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio_I2C={0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <I2CGpio_init+0xc4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a29      	ldr	r2, [pc, #164]	; (8000928 <I2CGpio_init+0xc4>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <I2CGpio_init+0xc4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]

	gpio_I2C.Pin 		= i2c_SDA_pin | i2c_SCL_pin;
 8000896:	f44f 7340 	mov.w	r3, #768	; 0x300
 800089a:	60fb      	str	r3, [r7, #12]
	gpio_I2C.Mode 		= GPIO_MODE_AF_OD;
 800089c:	2312      	movs	r3, #18
 800089e:	613b      	str	r3, [r7, #16]
	gpio_I2C.Pull 		= GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
	gpio_I2C.Speed 		= GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	61bb      	str	r3, [r7, #24]
	gpio_I2C.Alternate	= GPIO_AF4_I2C1;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(i2c_SDA_port,&gpio_I2C);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	481e      	ldr	r0, [pc, #120]	; (800092c <I2CGpio_init+0xc8>)
 80008b4:	f000 fd78 	bl	80013a8 <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <I2CGpio_init+0xc4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <I2CGpio_init+0xc4>)
 80008c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <I2CGpio_init+0xc4>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
	I2C1_handle.Instance = I2C1;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <I2CGpio_init+0xcc>)
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <I2CGpio_init+0xd0>)
 80008d8:	601a      	str	r2, [r3, #0]
	I2C1_handle.Init.ClockSpeed = 100000;
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <I2CGpio_init+0xcc>)
 80008dc:	4a16      	ldr	r2, [pc, #88]	; (8000938 <I2CGpio_init+0xd4>)
 80008de:	605a      	str	r2, [r3, #4]
	I2C1_handle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <I2CGpio_init+0xcc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
	I2C1_handle.Init.OwnAddress1 = 0;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <I2CGpio_init+0xcc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
	I2C1_handle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <I2CGpio_init+0xcc>)
 80008ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f2:	611a      	str	r2, [r3, #16]
	I2C1_handle.Init.OwnAddress2 = 0;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <I2CGpio_init+0xcc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
	I2C1_handle.Init.DualAddressMode= I2C_DUALADDRESS_DISABLE;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <I2CGpio_init+0xcc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
	I2C1_handle.Init.GeneralCallMode=I2C_GENERALCALL_DISABLE;
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <I2CGpio_init+0xcc>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
	I2C1_handle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <I2CGpio_init+0xcc>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&I2C1_handle) != HAL_OK)
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <I2CGpio_init+0xcc>)
 800090e:	f000 ff29 	bl	8001764 <HAL_I2C_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <I2CGpio_init+0xbc>
	  {
		 BSP_LED_On(LED2);
 8000918:	2001      	movs	r0, #1
 800091a:	f000 faa3 	bl	8000e64 <BSP_LED_On>
		  while (1)
 800091e:	e7fe      	b.n	800091e <I2CGpio_init+0xba>
		  {
		  }
	  }
}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400
 8000930:	2000009c 	.word	0x2000009c
 8000934:	40005400 	.word	0x40005400
 8000938:	000186a0 	.word	0x000186a0

0800093c <ADS1115_gpioReadyInit>:

/*gpioADS1115Ready_init:
 *Función que inicializa la configuración del puerto de entrada por donde se leerá la señal READY.*/
void ADS1115_gpioReadyInit(void){
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpioButtonInit={0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <ADS1115_gpioReadyInit+0x54>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <ADS1115_gpioReadyInit+0x54>)
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <ADS1115_gpioReadyInit+0x54>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f003 0320 	and.w	r3, r3, #32
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

	gpioButtonInit.Pin = (READY_pin);
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	607b      	str	r3, [r7, #4]
	gpioButtonInit.Mode= GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
	gpioButtonInit.Pull = GPIO_PULLDOWN;
 8000976:	2302      	movs	r3, #2
 8000978:	60fb      	str	r3, [r7, #12]
	gpioButtonInit.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(READY_port, &gpioButtonInit);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <ADS1115_gpioReadyInit+0x58>)
 8000984:	f000 fd10 	bl	80013a8 <HAL_GPIO_Init>
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40021400 	.word	0x40021400

08000998 <ADS1115_gpioReadyRead>:

/*gpioADS1115Ready_init:
 *Función lee el estado del puerto de entrada.*/
bool ADS1115_gpioReadyRead(void){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	bool stateButton=false;
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(READY_port, READY_pin)){
 80009a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a6:	4808      	ldr	r0, [pc, #32]	; (80009c8 <ADS1115_gpioReadyRead+0x30>)
 80009a8:	f000 feaa 	bl	8001700 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <ADS1115_gpioReadyRead+0x20>
		stateButton=true;
 80009b2:	2301      	movs	r3, #1
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	e001      	b.n	80009bc <ADS1115_gpioReadyRead+0x24>

	}
	else{
		stateButton=false;
 80009b8:	2300      	movs	r3, #0
 80009ba:	71fb      	strb	r3, [r7, #7]
	}
	return stateButton;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021400 	.word	0x40021400

080009cc <ADS1115_Transmit>:
/*ADS1115_Transmit:
 *Función que envia datos desde el Master al Esclavo.
 *Parametros: slaveAddres - Dirección del esclavo.
 *			  word - datos a enviar.
 *			  nroBytes - Cantidad de bytes a enviar*/
void ADS1115_Transmit(uint8_t slaveAddres, uint8_t *word,uint16_t nroBytes){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C1_handle,slaveAddres<<1,(uint8_t *)word,nroBytes,100);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	b299      	uxth	r1, r3
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	2264      	movs	r2, #100	; 0x64
 80009e8:	9200      	str	r2, [sp, #0]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <ADS1115_Transmit+0x30>)
 80009ee:	f001 f807 	bl	8001a00 <HAL_I2C_Master_Transmit>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000009c 	.word	0x2000009c

08000a00 <ADS1115_Receive>:
/*ADS1115_Receive:
 *Función que lee los datos del esclavo.
 *Parametros: slaveAddres - Dirección del esclavo.
 *			  word - Lugar donde se va a almacenar la información.
 *			  nroBytes - Cantidad de bytes a recibir*/
void ADS1115_Receive(uint8_t slaveAddres,uint8_t *word,uint16_t nroBytes){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	80bb      	strh	r3, [r7, #4]
		HAL_I2C_Master_Receive(&I2C1_handle,slaveAddres<<1,(uint8_t *)word,nroBytes,100);
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	b299      	uxth	r1, r3
 8000a18:	88bb      	ldrh	r3, [r7, #4]
 8000a1a:	2264      	movs	r2, #100	; 0x64
 8000a1c:	9200      	str	r2, [sp, #0]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <ADS1115_Receive+0x30>)
 8000a22:	f001 f8eb 	bl	8001bfc <HAL_I2C_Master_Receive>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000009c 	.word	0x2000009c

08000a34 <uartInit>:


/* Inicia la comunicación UART.
 * Envía mensaje indicando los parametros de su configuración.
 * Devuelve valor booleano TRUE si la iniciación fue exitosa.*/
bool uartInit(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
	 bool successfullInitialization=true;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	77fb      	strb	r3, [r7, #31]
	 char baudRateValue[nroCaracteresConversion]={};
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	2300      	movs	r3, #0
 8000a44:	773b      	strb	r3, [r7, #28]
	 char wordLengthValue[nroCaracteresConversion]={};
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	753b      	strb	r3, [r7, #20]
	 char StopBitsValue[nroCaracteresConversion]={};
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	2300      	movs	r3, #0
 8000a54:	733b      	strb	r3, [r7, #12]
	 char parityValue[nroCaracteresConversion]={};
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	713b      	strb	r3, [r7, #4]
		                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	      - Stop Bit    = One Stop bit
	      - Parity      = ODD parity
	      - BaudRate    = 9600 baud
	      - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8000a5e:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <uartInit+0x110>)
 8000a60:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <uartInit+0x114>)
 8000a62:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = 9600;
 8000a64:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <uartInit+0x110>)
 8000a66:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a6a:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6c:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <uartInit+0x110>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <uartInit+0x110>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8000a78:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <uartInit+0x110>)
 8000a7a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000a7e:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <uartInit+0x110>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <uartInit+0x110>)
 8000a88:	220c      	movs	r2, #12
 8000a8a:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <uartInit+0x110>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000a92:	482c      	ldr	r0, [pc, #176]	; (8000b44 <uartInit+0x110>)
 8000a94:	f002 fb48 	bl	8003128 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <uartInit+0x70>
	  {
	    /* Initialization Error */
		successfullInitialization=false;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	77fb      	strb	r3, [r7, #31]
	    while(1){
 8000aa2:	e7fe      	b.n	8000aa2 <uartInit+0x6e>
	    }

	  }

	  //Funcion que convierte valor numerico a char
	  sprintf((char*) baudRateValue, "%d",(int) UartHandle.Init.BaudRate);
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <uartInit+0x110>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f107 0318 	add.w	r3, r7, #24
 8000aae:	4927      	ldr	r1, [pc, #156]	; (8000b4c <uartInit+0x118>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 f843 	bl	8003b3c <siprintf>
	  sprintf((char*) wordLengthValue, "%d",(int) UartHandle.Init.WordLength);
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <uartInit+0x110>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	461a      	mov	r2, r3
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4922      	ldr	r1, [pc, #136]	; (8000b4c <uartInit+0x118>)
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 f83a 	bl	8003b3c <siprintf>
	  sprintf((char*) StopBitsValue, "%d",(int) UartHandle.Init.StopBits);
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <uartInit+0x110>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	461a      	mov	r2, r3
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	491e      	ldr	r1, [pc, #120]	; (8000b4c <uartInit+0x118>)
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 f831 	bl	8003b3c <siprintf>
	  sprintf((char*) parityValue, "%d",(int) UartHandle.Init.Parity);
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <uartInit+0x110>)
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	491a      	ldr	r1, [pc, #104]	; (8000b4c <uartInit+0x118>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 f829 	bl	8003b3c <siprintf>

	  uartSendString((uint8_t*)"Uart Iniciada\n\r");
 8000aea:	4819      	ldr	r0, [pc, #100]	; (8000b50 <uartInit+0x11c>)
 8000aec:	f000 f83e 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)"-----Parametros UART-----\n\r");
 8000af0:	4818      	ldr	r0, [pc, #96]	; (8000b54 <uartInit+0x120>)
 8000af2:	f000 f83b 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)"\n\rBaud rate: ");
 8000af6:	4818      	ldr	r0, [pc, #96]	; (8000b58 <uartInit+0x124>)
 8000af8:	f000 f838 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)baudRateValue);
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f833 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)"\n\rWord Length: ");
 8000b06:	4815      	ldr	r0, [pc, #84]	; (8000b5c <uartInit+0x128>)
 8000b08:	f000 f830 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)wordLengthValue);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f82b 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)"\n\rStop Bits: ");
 8000b16:	4812      	ldr	r0, [pc, #72]	; (8000b60 <uartInit+0x12c>)
 8000b18:	f000 f828 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)StopBitsValue);
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f823 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)"\n\rParity: ");
 8000b26:	480f      	ldr	r0, [pc, #60]	; (8000b64 <uartInit+0x130>)
 8000b28:	f000 f820 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)parityValue);
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f81c 	bl	8000b6c <uartSendString>
	  uartSendString((uint8_t*)"\n\r");
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <uartInit+0x134>)
 8000b36:	f000 f819 	bl	8000b6c <uartSendString>

	  return successfullInitialization;
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000f0 	.word	0x200000f0
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	08004434 	.word	0x08004434
 8000b50:	08004438 	.word	0x08004438
 8000b54:	08004448 	.word	0x08004448
 8000b58:	08004464 	.word	0x08004464
 8000b5c:	08004474 	.word	0x08004474
 8000b60:	08004484 	.word	0x08004484
 8000b64:	08004494 	.word	0x08004494
 8000b68:	080044a0 	.word	0x080044a0

08000b6c <uartSendString>:

/* Función que envia un mensaje por UART.
 * Recibe un punto a array como parametro, el cual contiene el mensaje a enviar.*/
void uartSendString(uint8_t * pstring){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UartHandle,(uint8_t*) pstring,strlen((const char*) pstring), timeOutUart);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff fb3b 	bl	80001f0 <strlen>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <uartSendString+0x28>)
 8000b86:	f002 fb1c 	bl	80031c2 <HAL_UART_Transmit>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000f0 	.word	0x200000f0

08000b98 <sendADS1115ByUart>:
 * Tambien se debe indicar la cantidad de caracteres que deben ser enviados.*/
void uartSendStringSize(uint8_t * pstring, uint16_t size){
	HAL_UART_Transmit(&UartHandle,(uint8_t*) pstring,size, timeOutUart);
}

void sendADS1115ByUart(float voltage[3]){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	  float decimal=0.0;
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
	  char voltajeChar[6];
	  char dec[4];
	  char channel[2];
	  uartSendString((uint8_t*)"\n\r");
 8000ba6:	487e      	ldr	r0, [pc, #504]	; (8000da0 <sendADS1115ByUart+0x208>)
 8000ba8:	f7ff ffe0 	bl	8000b6c <uartSendString>
	  for(int i=0;i<3;i++){
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	e0ed      	b.n	8000d8e <sendADS1115ByUart+0x1f6>
		  uartSendString((uint8_t*)"Canal: ");
 8000bb2:	487c      	ldr	r0, [pc, #496]	; (8000da4 <sendADS1115ByUart+0x20c>)
 8000bb4:	f7ff ffda 	bl	8000b6c <uartSendString>
		  sprintf((char*) channel, "%d",(int) i);
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	497a      	ldr	r1, [pc, #488]	; (8000da8 <sendADS1115ByUart+0x210>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 ffbb 	bl	8003b3c <siprintf>
		  uartSendString((uint8_t*)channel);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ffce 	bl	8000b6c <uartSendString>
		  uartSendString((uint8_t*)"  ");
 8000bd0:	4876      	ldr	r0, [pc, #472]	; (8000dac <sendADS1115ByUart+0x214>)
 8000bd2:	f7ff ffcb 	bl	8000b6c <uartSendString>
		  sprintf((char*) voltajeChar, "%d",(int) voltage[i]);
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	edd3 7a00 	vldr	s15, [r3]
 8000be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	ee17 2a90 	vmov	r2, s15
 8000bee:	496e      	ldr	r1, [pc, #440]	; (8000da8 <sendADS1115ByUart+0x210>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 ffa3 	bl	8003b3c <siprintf>
		  uartSendString((uint8_t*)voltajeChar);
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ffb6 	bl	8000b6c <uartSendString>
	 	  if (voltage[i]<1) {
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	4413      	add	r3, r2
 8000c08:	edd3 7a00 	vldr	s15, [r3]
 8000c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c18:	d50a      	bpl.n	8000c30 <sendADS1115ByUart+0x98>
	 		 voltage[i]=voltage[i];
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	441a      	add	r2, r3
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	440b      	add	r3, r1
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	e069      	b.n	8000d04 <sendADS1115ByUart+0x16c>
	 	  }
	 	  else if ((voltage[i]<2)){
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	edd3 7a00 	vldr	s15, [r3]
 8000c3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c48:	d510      	bpl.n	8000c6c <sendADS1115ByUart+0xd4>
	 		 voltage[i]=voltage[i]-1.0;
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	edd3 7a00 	vldr	s15, [r3]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c66:	edc3 7a00 	vstr	s15, [r3]
 8000c6a:	e04b      	b.n	8000d04 <sendADS1115ByUart+0x16c>
	 	  }
	 	  else if ((voltage[i]<3)){
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	4413      	add	r3, r2
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c84:	d510      	bpl.n	8000ca8 <sendADS1115ByUart+0x110>
	 		 voltage[i]=voltage[i]-2.0;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	edd3 7a00 	vldr	s15, [r3]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000c9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ca2:	edc3 7a00 	vstr	s15, [r3]
 8000ca6:	e02d      	b.n	8000d04 <sendADS1115ByUart+0x16c>
	 	  }
	 	  else if ((voltage[i]<4)){
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc0:	d510      	bpl.n	8000ce4 <sendADS1115ByUart+0x14c>
	 		 voltage[i]=voltage[i]-3.0;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	edd3 7a00 	vldr	s15, [r3]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000cda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000cde:	edc3 7a00 	vstr	s15, [r3]
 8000ce2:	e00f      	b.n	8000d04 <sendADS1115ByUart+0x16c>
	 	  }
	 	  else{
	 		 voltage[i]=voltage[i]-4.0;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000cfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d00:	edc3 7a00 	vstr	s15, [r3]
	 	  }


     	  decimal=voltage[i]*1000;
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	edd3 7a00 	vldr	s15, [r3]
 8000d10:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000db0 <sendADS1115ByUart+0x218>
 8000d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d18:	edc7 7a06 	vstr	s15, [r7, #24]

	      sprintf((char*) dec, "%d",(int) decimal);
 8000d1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	ee17 2a90 	vmov	r2, s15
 8000d2c:	491e      	ldr	r1, [pc, #120]	; (8000da8 <sendADS1115ByUart+0x210>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 ff04 	bl	8003b3c <siprintf>
		  uartSendString((uint8_t*)",");
 8000d34:	481f      	ldr	r0, [pc, #124]	; (8000db4 <sendADS1115ByUart+0x21c>)
 8000d36:	f7ff ff19 	bl	8000b6c <uartSendString>
		  if (decimal<10){
 8000d3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4a:	d503      	bpl.n	8000d54 <sendADS1115ByUart+0x1bc>
		  uartSendString((uint8_t*)"00");
 8000d4c:	481a      	ldr	r0, [pc, #104]	; (8000db8 <sendADS1115ByUart+0x220>)
 8000d4e:	f7ff ff0d 	bl	8000b6c <uartSendString>
 8000d52:	e00b      	b.n	8000d6c <sendADS1115ByUart+0x1d4>
		  }
    	  else if(decimal<100){
 8000d54:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d58:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000dbc <sendADS1115ByUart+0x224>
 8000d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d64:	d502      	bpl.n	8000d6c <sendADS1115ByUart+0x1d4>
	    	uartSendString((uint8_t*)"0");
 8000d66:	4816      	ldr	r0, [pc, #88]	; (8000dc0 <sendADS1115ByUart+0x228>)
 8000d68:	f7ff ff00 	bl	8000b6c <uartSendString>
		  }

		  uartSendString((uint8_t*)dec);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fefb 	bl	8000b6c <uartSendString>
		  uartSendString((uint8_t*)"  ");
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <sendADS1115ByUart+0x214>)
 8000d78:	f7ff fef8 	bl	8000b6c <uartSendString>
		  uartSendString((uint8_t*)"  ");
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <sendADS1115ByUart+0x214>)
 8000d7e:	f7ff fef5 	bl	8000b6c <uartSendString>
		  uartSendString((uint8_t*)"  ");
 8000d82:	480a      	ldr	r0, [pc, #40]	; (8000dac <sendADS1115ByUart+0x214>)
 8000d84:	f7ff fef2 	bl	8000b6c <uartSendString>
	  for(int i=0;i<3;i++){
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	f77f af0e 	ble.w	8000bb2 <sendADS1115ByUart+0x1a>

	  }

}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	080044a0 	.word	0x080044a0
 8000da4:	080044a4 	.word	0x080044a4
 8000da8:	08004434 	.word	0x08004434
 8000dac:	080044ac 	.word	0x080044ac
 8000db0:	447a0000 	.word	0x447a0000
 8000db4:	080044b0 	.word	0x080044b0
 8000db8:	080044b4 	.word	0x080044b4
 8000dbc:	42c80000 	.word	0x42c80000
 8000dc0:	080044b8 	.word	0x080044b8

08000dc4 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10e      	bne.n	8000df2 <BSP_LED_Init+0x2e>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <BSP_LED_Init+0x94>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <BSP_LED_Init+0x94>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <BSP_LED_Init+0x94>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	e00d      	b.n	8000e0e <BSP_LED_Init+0x4a>
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <BSP_LED_Init+0x94>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <BSP_LED_Init+0x94>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <BSP_LED_Init+0x94>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <BSP_LED_Init+0x98>)
 8000e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e20:	2302      	movs	r3, #2
 8000e22:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <BSP_LED_Init+0x9c>)
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	f107 0214 	add.w	r2, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fab8 	bl	80013a8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <BSP_LED_Init+0x9c>)
 8000e3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <BSP_LED_Init+0x98>)
 8000e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f000 fc70 	bl	8001730 <HAL_GPIO_WritePin>
}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	080044c8 	.word	0x080044c8
 8000e60:	20000000 	.word	0x20000000

08000e64 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <BSP_LED_On+0x2c>)
 8000e72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <BSP_LED_On+0x30>)
 8000e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	f000 fc55 	bl	8001730 <HAL_GPIO_WritePin>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000000 	.word	0x20000000
 8000e94:	080044c8 	.word	0x080044c8

08000e98 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <BSP_LED_Off+0x2c>)
 8000ea6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <BSP_LED_Off+0x30>)
 8000eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f000 fc3b 	bl	8001730 <HAL_GPIO_WritePin>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	080044c8 	.word	0x080044c8

08000ecc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <BSP_PB_Init+0xa4>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <BSP_PB_Init+0xa4>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6313      	str	r3, [r2, #48]	; 0x30
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <BSP_PB_Init+0xa4>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d112      	bne.n	8000f24 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <BSP_PB_Init+0xa8>)
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	f107 020c 	add.w	r2, r7, #12
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fa42 	bl	80013a8 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d11d      	bne.n	8000f66 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000f34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f38:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <BSP_PB_Init+0xa8>)
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	f107 020c 	add.w	r2, r7, #12
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fa2d 	bl	80013a8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000f4e:	2328      	movs	r3, #40	; 0x28
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	2200      	movs	r2, #0
 8000f54:	210f      	movs	r1, #15
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f9ef 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000f5c:	2328      	movs	r3, #40	; 0x28
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fa06 	bl	8001372 <HAL_NVIC_EnableIRQ>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	2000000c 	.word	0x2000000c

08000f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <SystemInit+0x60>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <SystemInit+0x60>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <SystemInit+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <SystemInit+0x64>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <SystemInit+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <SystemInit+0x64>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <SystemInit+0x64>)
 8000fa4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <SystemInit+0x64>)
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <SystemInit+0x68>)
 8000fb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <SystemInit+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <SystemInit+0x64>)
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SystemInit+0x60>)
 8000fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fcc:	609a      	str	r2, [r3, #8]
#endif
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	24003010 	.word	0x24003010

08000fe4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001038:	f000 f884 	bl	8001144 <HAL_IncTick>
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f002 fd3a 	bl	8003ae8 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20030000 	.word	0x20030000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000134 	.word	0x20000134
 80010a8:	20000150 	.word	0x20000150

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_Init+0x34>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_Init+0x34>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_Init+0x34>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_Init+0x34>)
 80010c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f92b 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f001 fb38 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023c00 	.word	0x40023c00

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f943 	bl	800138e <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 f90b 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000010 	.word	0x20000010
 800113c:	20000018 	.word	0x20000018
 8001140:	20000014 	.word	0x20000014

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000018 	.word	0x20000018
 8001168:	20000138 	.word	0x20000138

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000138 	.word	0x20000138

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	e177      	b.n	80016b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013c4:	2201      	movs	r2, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	429a      	cmp	r2, r3
 80013de:	f040 8166 	bne.w	80016ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d005      	beq.n	80013fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d130      	bne.n	800145c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	2203      	movs	r2, #3
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001430:	2201      	movs	r2, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	f003 0201 	and.w	r2, r3, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b03      	cmp	r3, #3
 8001466:	d017      	beq.n	8001498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d123      	bne.n	80014ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	08da      	lsrs	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	69b9      	ldr	r1, [r7, #24]
 80014e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0203 	and.w	r2, r3, #3
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80c0 	beq.w	80016ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b66      	ldr	r3, [pc, #408]	; (80016cc <HAL_GPIO_Init+0x324>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a65      	ldr	r2, [pc, #404]	; (80016cc <HAL_GPIO_Init+0x324>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <HAL_GPIO_Init+0x324>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154a:	4a61      	ldr	r2, [pc, #388]	; (80016d0 <HAL_GPIO_Init+0x328>)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a58      	ldr	r2, [pc, #352]	; (80016d4 <HAL_GPIO_Init+0x32c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d037      	beq.n	80015e6 <HAL_GPIO_Init+0x23e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a57      	ldr	r2, [pc, #348]	; (80016d8 <HAL_GPIO_Init+0x330>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d031      	beq.n	80015e2 <HAL_GPIO_Init+0x23a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a56      	ldr	r2, [pc, #344]	; (80016dc <HAL_GPIO_Init+0x334>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02b      	beq.n	80015de <HAL_GPIO_Init+0x236>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a55      	ldr	r2, [pc, #340]	; (80016e0 <HAL_GPIO_Init+0x338>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d025      	beq.n	80015da <HAL_GPIO_Init+0x232>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a54      	ldr	r2, [pc, #336]	; (80016e4 <HAL_GPIO_Init+0x33c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01f      	beq.n	80015d6 <HAL_GPIO_Init+0x22e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a53      	ldr	r2, [pc, #332]	; (80016e8 <HAL_GPIO_Init+0x340>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x22a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a52      	ldr	r2, [pc, #328]	; (80016ec <HAL_GPIO_Init+0x344>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x226>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <HAL_GPIO_Init+0x348>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x222>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a50      	ldr	r2, [pc, #320]	; (80016f4 <HAL_GPIO_Init+0x34c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x21e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4f      	ldr	r2, [pc, #316]	; (80016f8 <HAL_GPIO_Init+0x350>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x21a>
 80015be:	2309      	movs	r3, #9
 80015c0:	e012      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015c2:	230a      	movs	r3, #10
 80015c4:	e010      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015c6:	2308      	movs	r3, #8
 80015c8:	e00e      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00c      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015ce:	2306      	movs	r3, #6
 80015d0:	e00a      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	; (80016d0 <HAL_GPIO_Init+0x328>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <HAL_GPIO_Init+0x354>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800162a:	4a34      	ldr	r2, [pc, #208]	; (80016fc <HAL_GPIO_Init+0x354>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_GPIO_Init+0x354>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001654:	4a29      	ldr	r2, [pc, #164]	; (80016fc <HAL_GPIO_Init+0x354>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_GPIO_Init+0x354>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167e:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_GPIO_Init+0x354>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <HAL_GPIO_Init+0x354>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a8:	4a14      	ldr	r2, [pc, #80]	; (80016fc <HAL_GPIO_Init+0x354>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f ae84 	bls.w	80013c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40021400 	.word	0x40021400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40021c00 	.word	0x40021c00
 80016f4:	40022000 	.word	0x40022000
 80016f8:	40022400 	.word	0x40022400
 80016fc:	40013c00 	.word	0x40013c00

08001700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e001      	b.n	8001722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800174c:	e003      	b.n	8001756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	619a      	str	r2, [r3, #24]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e12b      	b.n	80019ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f92e 	bl	80019ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2224      	movs	r2, #36	; 0x24
 8001794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017c8:	f001 fc86 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 80017cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a81      	ldr	r2, [pc, #516]	; (80019d8 <HAL_I2C_Init+0x274>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d807      	bhi.n	80017e8 <HAL_I2C_Init+0x84>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a80      	ldr	r2, [pc, #512]	; (80019dc <HAL_I2C_Init+0x278>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	bf94      	ite	ls
 80017e0:	2301      	movls	r3, #1
 80017e2:	2300      	movhi	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	e006      	b.n	80017f6 <HAL_I2C_Init+0x92>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4a7d      	ldr	r2, [pc, #500]	; (80019e0 <HAL_I2C_Init+0x27c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	bf94      	ite	ls
 80017f0:	2301      	movls	r3, #1
 80017f2:	2300      	movhi	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0e7      	b.n	80019ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4a78      	ldr	r2, [pc, #480]	; (80019e4 <HAL_I2C_Init+0x280>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9b      	lsrs	r3, r3, #18
 8001808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4a6a      	ldr	r2, [pc, #424]	; (80019d8 <HAL_I2C_Init+0x274>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d802      	bhi.n	8001838 <HAL_I2C_Init+0xd4>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3301      	adds	r3, #1
 8001836:	e009      	b.n	800184c <HAL_I2C_Init+0xe8>
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	4a69      	ldr	r2, [pc, #420]	; (80019e8 <HAL_I2C_Init+0x284>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	3301      	adds	r3, #1
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	430b      	orrs	r3, r1
 8001852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800185e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	495c      	ldr	r1, [pc, #368]	; (80019d8 <HAL_I2C_Init+0x274>)
 8001868:	428b      	cmp	r3, r1
 800186a:	d819      	bhi.n	80018a0 <HAL_I2C_Init+0x13c>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1e59      	subs	r1, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fbb1 f3f3 	udiv	r3, r1, r3
 800187a:	1c59      	adds	r1, r3, #1
 800187c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001880:	400b      	ands	r3, r1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00a      	beq.n	800189c <HAL_I2C_Init+0x138>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1e59      	subs	r1, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fbb1 f3f3 	udiv	r3, r1, r3
 8001894:	3301      	adds	r3, #1
 8001896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189a:	e051      	b.n	8001940 <HAL_I2C_Init+0x1dc>
 800189c:	2304      	movs	r3, #4
 800189e:	e04f      	b.n	8001940 <HAL_I2C_Init+0x1dc>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d111      	bne.n	80018cc <HAL_I2C_Init+0x168>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1e58      	subs	r0, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	440b      	add	r3, r1
 80018b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	e012      	b.n	80018f2 <HAL_I2C_Init+0x18e>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1e58      	subs	r0, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	0099      	lsls	r1, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Init+0x196>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e022      	b.n	8001940 <HAL_I2C_Init+0x1dc>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10e      	bne.n	8001920 <HAL_I2C_Init+0x1bc>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1e58      	subs	r0, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	440b      	add	r3, r1
 8001910:	fbb0 f3f3 	udiv	r3, r0, r3
 8001914:	3301      	adds	r3, #1
 8001916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800191e:	e00f      	b.n	8001940 <HAL_I2C_Init+0x1dc>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1e58      	subs	r0, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6859      	ldr	r1, [r3, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	0099      	lsls	r1, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	6809      	ldr	r1, [r1, #0]
 8001944:	4313      	orrs	r3, r2
 8001946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69da      	ldr	r2, [r3, #28]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800196e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6911      	ldr	r1, [r2, #16]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68d2      	ldr	r2, [r2, #12]
 800197a:	4311      	orrs	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	430b      	orrs	r3, r1
 8001982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2220      	movs	r2, #32
 80019ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	000186a0 	.word	0x000186a0
 80019dc:	001e847f 	.word	0x001e847f
 80019e0:	003d08ff 	.word	0x003d08ff
 80019e4:	431bde83 	.word	0x431bde83
 80019e8:	10624dd3 	.word	0x10624dd3

080019ec <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	817b      	strh	r3, [r7, #10]
 8001a10:	4613      	mov	r3, r2
 8001a12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff fbaa 	bl	800116c <HAL_GetTick>
 8001a18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	f040 80e0 	bne.w	8001be8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2319      	movs	r3, #25
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4970      	ldr	r1, [pc, #448]	; (8001bf4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fc58 	bl	80022e8 <I2C_WaitOnFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e0d3      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_I2C_Master_Transmit+0x50>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e0cc      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d007      	beq.n	8001a76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2221      	movs	r2, #33	; 0x21
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2210      	movs	r2, #16
 8001a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	893a      	ldrh	r2, [r7, #8]
 8001aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4a50      	ldr	r2, [pc, #320]	; (8001bf8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ab8:	8979      	ldrh	r1, [r7, #10]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	6a3a      	ldr	r2, [r7, #32]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fac2 	bl	8002048 <I2C_MasterRequestWrite>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e08d      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ae4:	e066      	b.n	8001bb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	6a39      	ldr	r1, [r7, #32]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fcd2 	bl	8002494 <I2C_WaitOnTXEFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d107      	bne.n	8001b0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06b      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d11b      	bne.n	8001b88 <HAL_I2C_Master_Transmit+0x188>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d017      	beq.n	8001b88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	6a39      	ldr	r1, [r7, #32]
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fcc2 	bl	8002516 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00d      	beq.n	8001bb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d107      	bne.n	8001bb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e01a      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d194      	bne.n	8001ae6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e000      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
  }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	00100002 	.word	0x00100002
 8001bf8:	ffff0000 	.word	0xffff0000

08001bfc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	; 0x30
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	461a      	mov	r2, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	817b      	strh	r3, [r7, #10]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff faac 	bl	800116c <HAL_GetTick>
 8001c14:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	f040 820b 	bne.w	800203a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2319      	movs	r3, #25
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	497c      	ldr	r1, [pc, #496]	; (8001e20 <HAL_I2C_Master_Receive+0x224>)
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fb5a 	bl	80022e8 <I2C_WaitOnFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e1fe      	b.n	800203c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2C_Master_Receive+0x50>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e1f7      	b.n	800203c <HAL_I2C_Master_Receive+0x440>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d007      	beq.n	8001c72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2222      	movs	r2, #34	; 0x22
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	893a      	ldrh	r2, [r7, #8]
 8001ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <HAL_I2C_Master_Receive+0x228>)
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cb4:	8979      	ldrh	r1, [r7, #10]
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 fa46 	bl	800214c <I2C_MasterRequestRead>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e1b8      	b.n	800203c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d113      	bne.n	8001cfa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	623b      	str	r3, [r7, #32]
 8001ce6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e18c      	b.n	8002014 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d11b      	bne.n	8001d3a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e16c      	b.n	8002014 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d11b      	bne.n	8001d7a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	e14c      	b.n	8002014 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001da0:	e138      	b.n	8002014 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	f200 80f1 	bhi.w	8001f8e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d123      	bne.n	8001dfc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 fbed 	bl	8002598 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e139      	b.n	800203c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dfa:	e10b      	b.n	8002014 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d14e      	bne.n	8001ea2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4906      	ldr	r1, [pc, #24]	; (8001e28 <HAL_I2C_Master_Receive+0x22c>)
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fa6a 	bl	80022e8 <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e10e      	b.n	800203c <HAL_I2C_Master_Receive+0x440>
 8001e1e:	bf00      	nop
 8001e20:	00100002 	.word	0x00100002
 8001e24:	ffff0000 	.word	0xffff0000
 8001e28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ea0:	e0b8      	b.n	8002014 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	4966      	ldr	r1, [pc, #408]	; (8002044 <HAL_I2C_Master_Receive+0x448>)
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fa1b 	bl	80022e8 <I2C_WaitOnFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0bf      	b.n	800203c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	2200      	movs	r2, #0
 8001f06:	494f      	ldr	r1, [pc, #316]	; (8002044 <HAL_I2C_Master_Receive+0x448>)
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f9ed 	bl	80022e8 <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e091      	b.n	800203c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f8c:	e042      	b.n	8002014 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fb00 	bl	8002598 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e04c      	b.n	800203c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d118      	bne.n	8002014 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	f47f aec2 	bne.w	8001da2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2220      	movs	r2, #32
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	00010004 	.word	0x00010004

08002048 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	460b      	mov	r3, r1
 8002056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b08      	cmp	r3, #8
 8002062:	d006      	beq.n	8002072 <I2C_MasterRequestWrite+0x2a>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d003      	beq.n	8002072 <I2C_MasterRequestWrite+0x2a>
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002070:	d108      	bne.n	8002084 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e00b      	b.n	800209c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	2b12      	cmp	r3, #18
 800208a:	d107      	bne.n	800209c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800209a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f91d 	bl	80022e8 <I2C_WaitOnFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c2:	d103      	bne.n	80020cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e035      	b.n	800213c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d8:	d108      	bne.n	80020ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020da:	897b      	ldrh	r3, [r7, #10]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020e8:	611a      	str	r2, [r3, #16]
 80020ea:	e01b      	b.n	8002124 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020ec:	897b      	ldrh	r3, [r7, #10]
 80020ee:	11db      	asrs	r3, r3, #7
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f003 0306 	and.w	r3, r3, #6
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f063 030f 	orn	r3, r3, #15
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <I2C_MasterRequestWrite+0xfc>)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f943 	bl	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e010      	b.n	800213c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800211a:	897b      	ldrh	r3, [r7, #10]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4907      	ldr	r1, [pc, #28]	; (8002148 <I2C_MasterRequestWrite+0x100>)
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f933 	bl	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	00010008 	.word	0x00010008
 8002148:	00010002 	.word	0x00010002

0800214c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	460b      	mov	r3, r1
 800215a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002170:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d006      	beq.n	8002186 <I2C_MasterRequestRead+0x3a>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d003      	beq.n	8002186 <I2C_MasterRequestRead+0x3a>
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002184:	d108      	bne.n	8002198 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e00b      	b.n	80021b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	2b11      	cmp	r3, #17
 800219e:	d107      	bne.n	80021b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f893 	bl	80022e8 <I2C_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d6:	d103      	bne.n	80021e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e079      	b.n	80022d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ec:	d108      	bne.n	8002200 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021ee:	897b      	ldrh	r3, [r7, #10]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	611a      	str	r2, [r3, #16]
 80021fe:	e05f      	b.n	80022c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002200:	897b      	ldrh	r3, [r7, #10]
 8002202:	11db      	asrs	r3, r3, #7
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f003 0306 	and.w	r3, r3, #6
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f063 030f 	orn	r3, r3, #15
 8002210:	b2da      	uxtb	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4930      	ldr	r1, [pc, #192]	; (80022e0 <I2C_MasterRequestRead+0x194>)
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f8b9 	bl	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e054      	b.n	80022d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800222e:	897b      	ldrh	r3, [r7, #10]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4929      	ldr	r1, [pc, #164]	; (80022e4 <I2C_MasterRequestRead+0x198>)
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f8a9 	bl	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e044      	b.n	80022d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002272:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f831 	bl	80022e8 <I2C_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00d      	beq.n	80022a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229a:	d103      	bne.n	80022a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e017      	b.n	80022d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80022a8:	897b      	ldrh	r3, [r7, #10]
 80022aa:	11db      	asrs	r3, r3, #7
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f003 0306 	and.w	r3, r3, #6
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f063 030e 	orn	r3, r3, #14
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <I2C_MasterRequestRead+0x198>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f865 	bl	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	00010008 	.word	0x00010008
 80022e4:	00010002 	.word	0x00010002

080022e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f8:	e025      	b.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d021      	beq.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002302:	f7fe ff33 	bl	800116c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d302      	bcc.n	8002318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d116      	bne.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f043 0220 	orr.w	r2, r3, #32
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e023      	b.n	800238e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d10d      	bne.n	800236c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4013      	ands	r3, r2
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	e00c      	b.n	8002386 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4013      	ands	r3, r2
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	bf0c      	ite	eq
 800237e:	2301      	moveq	r3, #1
 8002380:	2300      	movne	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	429a      	cmp	r2, r3
 800238a:	d0b6      	beq.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a4:	e051      	b.n	800244a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b4:	d123      	bne.n	80023fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f043 0204 	orr.w	r2, r3, #4
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e046      	b.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d021      	beq.n	800244a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002406:	f7fe feb1 	bl	800116c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d302      	bcc.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d116      	bne.n	800244a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f043 0220 	orr.w	r2, r3, #32
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e020      	b.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d10c      	bne.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	e00b      	b.n	8002486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	43da      	mvns	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4013      	ands	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf14      	ite	ne
 8002480:	2301      	movne	r3, #1
 8002482:	2300      	moveq	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d18d      	bne.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024a0:	e02d      	b.n	80024fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f8ce 	bl	8002644 <I2C_IsAcknowledgeFailed>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e02d      	b.n	800250e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d021      	beq.n	80024fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ba:	f7fe fe57 	bl	800116c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d116      	bne.n	80024fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f043 0220 	orr.w	r2, r3, #32
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e007      	b.n	800250e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d1ca      	bne.n	80024a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002522:	e02d      	b.n	8002580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f88d 	bl	8002644 <I2C_IsAcknowledgeFailed>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e02d      	b.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d021      	beq.n	8002580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253c:	f7fe fe16 	bl	800116c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	d302      	bcc.n	8002552 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e007      	b.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b04      	cmp	r3, #4
 800258c:	d1ca      	bne.n	8002524 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025a4:	e042      	b.n	800262c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d119      	bne.n	80025e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0210 	mvn.w	r2, #16
 80025bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e029      	b.n	800263c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e8:	f7fe fdc0 	bl	800116c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d302      	bcc.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d116      	bne.n	800262c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e007      	b.n	800263c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b40      	cmp	r3, #64	; 0x40
 8002638:	d1b5      	bne.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d11b      	bne.n	8002694 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002664:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f043 0204 	orr.w	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	4b23      	ldr	r3, [pc, #140]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	6313      	str	r3, [r2, #48]	; 0x30
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026d2:	f043 0308 	orr.w	r3, r3, #8
 80026d6:	6313      	str	r3, [r2, #48]	; 0x30
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f2:	6413      	str	r3, [r2, #64]	; 0x40
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_UART_MspInit+0x9c>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800270a:	2301      	movs	r3, #1
 800270c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002712:	2307      	movs	r3, #7
 8002714:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	4809      	ldr	r0, [pc, #36]	; (8002744 <HAL_UART_MspInit+0xa0>)
 800271e:	f7fe fe43 	bl	80013a8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002728:	2307      	movs	r3, #7
 800272a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	4804      	ldr	r0, [pc, #16]	; (8002744 <HAL_UART_MspInit+0xa0>)
 8002734:	f7fe fe38 	bl	80013a8 <HAL_GPIO_Init>
}
 8002738:	bf00      	nop
 800273a:	3728      	adds	r7, #40	; 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	40020c00 	.word	0x40020c00

08002748 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0

}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_PWREx_EnableOverDrive+0x94>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002784:	f7fe fcf2 	bl	800116c <HAL_GetTick>
 8002788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800278a:	e009      	b.n	80027a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800278c:	f7fe fcee 	bl	800116c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800279a:	d901      	bls.n	80027a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e01f      	b.n	80027e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d1ee      	bne.n	800278c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b4:	f7fe fcda 	bl	800116c <HAL_GetTick>
 80027b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027ba:	e009      	b.n	80027d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027bc:	f7fe fcd6 	bl	800116c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ca:	d901      	bls.n	80027d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e007      	b.n	80027e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027d0:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027dc:	d1ee      	bne.n	80027bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	420e0040 	.word	0x420e0040
 80027f0:	40007000 	.word	0x40007000
 80027f4:	420e0044 	.word	0x420e0044

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e267      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d075      	beq.n	8002902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002816:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b04      	cmp	r3, #4
 8002820:	d00c      	beq.n	800283c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b85      	ldr	r3, [pc, #532]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282a:	2b08      	cmp	r3, #8
 800282c:	d112      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282e:	4b82      	ldr	r3, [pc, #520]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283a:	d10b      	bne.n	8002854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	4b7e      	ldr	r3, [pc, #504]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05b      	beq.n	8002900 <HAL_RCC_OscConfig+0x108>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d157      	bne.n	8002900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e242      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d106      	bne.n	800286c <HAL_RCC_OscConfig+0x74>
 800285e:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a75      	ldr	r2, [pc, #468]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e01d      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6f      	ldr	r2, [pc, #444]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6c      	ldr	r2, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0xb0>
 8002890:	4b69      	ldr	r3, [pc, #420]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a68      	ldr	r2, [pc, #416]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a65      	ldr	r2, [pc, #404]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe fc5c 	bl	800116c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b8:	f7fe fc58 	bl	800116c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e207      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b5b      	ldr	r3, [pc, #364]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0xc0>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe fc48 	bl	800116c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe fc44 	bl	800116c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1f3      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	4b51      	ldr	r3, [pc, #324]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0xe8>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d063      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290e:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002922:	2b08      	cmp	r3, #8
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002926:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x152>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e1c7      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4937      	ldr	r1, [pc, #220]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	e03a      	b.n	80029d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe fbfd 	bl	800116c <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002976:	f7fe fbf9 	bl	800116c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1a8      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4925      	ldr	r1, [pc, #148]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_RCC_OscConfig+0x244>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fbdc 	bl	800116c <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b8:	f7fe fbd8 	bl	800116c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e187      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d036      	beq.n	8002a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_RCC_OscConfig+0x248>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe fbbc 	bl	800116c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f8:	f7fe fbb8 	bl	800116c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e167      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x200>
 8002a16:	e01b      	b.n	8002a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_OscConfig+0x248>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fba5 	bl	800116c <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	e00e      	b.n	8002a44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a26:	f7fe fba1 	bl	800116c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d907      	bls.n	8002a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e150      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000
 8002a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	4b88      	ldr	r3, [pc, #544]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ea      	bne.n	8002a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8097 	beq.w	8002b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4b81      	ldr	r3, [pc, #516]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	4b7d      	ldr	r3, [pc, #500]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a7c      	ldr	r2, [pc, #496]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b7a      	ldr	r3, [pc, #488]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	4b77      	ldr	r3, [pc, #476]	; (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d118      	bne.n	8002acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9a:	4b74      	ldr	r3, [pc, #464]	; (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a73      	ldr	r2, [pc, #460]	; (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fb61 	bl	800116c <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7fe fb5d 	bl	800116c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e10c      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <HAL_RCC_OscConfig+0x474>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2ea>
 8002ad4:	4b64      	ldr	r3, [pc, #400]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a63      	ldr	r2, [pc, #396]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x324>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x30c>
 8002aea:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a5e      	ldr	r2, [pc, #376]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a5b      	ldr	r2, [pc, #364]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0x324>
 8002b04:	4b58      	ldr	r3, [pc, #352]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a57      	ldr	r2, [pc, #348]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a54      	ldr	r2, [pc, #336]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe fb22 	bl	800116c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fb1e 	bl	800116c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0cb      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b42:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ee      	beq.n	8002b2c <HAL_RCC_OscConfig+0x334>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7fe fb0c 	bl	800116c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe fb08 	bl	800116c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0b5      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ee      	bne.n	8002b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a38      	ldr	r2, [pc, #224]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80a1 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b96:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d05c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d141      	bne.n	8002c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCC_OscConfig+0x478>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fadc 	bl	800116c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fad8 	bl	800116c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e087      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	019b      	lsls	r3, r3, #6
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	491b      	ldr	r1, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x478>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe fab1 	bl	800116c <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fe faad 	bl	800116c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e05c      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x416>
 8002c2c:	e054      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_RCC_OscConfig+0x478>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fa9a 	bl	800116c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe fa96 	bl	800116c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e045      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x470>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x444>
 8002c5a:	e03d      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e038      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x4ec>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d028      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d121      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d11a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d111      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0cc      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d90c      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0b8      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d3c:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a52      	ldr	r2, [pc, #328]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d60:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	494d      	ldr	r1, [pc, #308]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d044      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d119      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e07f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db6:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e067      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f023 0203 	bic.w	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4934      	ldr	r1, [pc, #208]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd8:	f7fe f9c8 	bl	800116c <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de0:	f7fe f9c4 	bl	800116c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e04f      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df6:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 020c 	and.w	r2, r3, #12
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1eb      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d20c      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e032      	b.n	8002e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4916      	ldr	r1, [pc, #88]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e6e:	f000 f821 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4602      	mov	r2, r0
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	5ccb      	ldrb	r3, [r1, r3]
 8002e82:	fa22 f303 	lsr.w	r3, r2, r3
 8002e86:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe f928 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	080044d0 	.word	0x080044d0
 8002eac:	20000010 	.word	0x20000010
 8002eb0:	20000014 	.word	0x20000014

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b094      	sub	sp, #80	; 0x50
 8002eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ecc:	4b79      	ldr	r3, [pc, #484]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d00d      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	f200 80e1 	bhi.w	80030a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ee6:	e0db      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b73      	ldr	r3, [pc, #460]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002eec:	e0db      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_GetSysClockFreq+0x208>)
 8002ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ef2:	e0d8      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef4:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efe:	4b6d      	ldr	r3, [pc, #436]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	2200      	movs	r2, #0
 8002f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f1e:	2300      	movs	r3, #0
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
 8002f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f26:	4622      	mov	r2, r4
 8002f28:	462b      	mov	r3, r5
 8002f2a:	f04f 0000 	mov.w	r0, #0
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	0159      	lsls	r1, r3, #5
 8002f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f38:	0150      	lsls	r0, r2, #5
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4621      	mov	r1, r4
 8002f40:	1a51      	subs	r1, r2, r1
 8002f42:	6139      	str	r1, [r7, #16]
 8002f44:	4629      	mov	r1, r5
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f58:	4659      	mov	r1, fp
 8002f5a:	018b      	lsls	r3, r1, #6
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f62:	4651      	mov	r1, sl
 8002f64:	018a      	lsls	r2, r1, #6
 8002f66:	4651      	mov	r1, sl
 8002f68:	ebb2 0801 	subs.w	r8, r2, r1
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f86:	4690      	mov	r8, r2
 8002f88:	4699      	mov	r9, r3
 8002f8a:	4623      	mov	r3, r4
 8002f8c:	eb18 0303 	adds.w	r3, r8, r3
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	462b      	mov	r3, r5
 8002f94:	eb49 0303 	adc.w	r3, r9, r3
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	024b      	lsls	r3, r1, #9
 8002faa:	4621      	mov	r1, r4
 8002fac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	024a      	lsls	r2, r1, #9
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fba:	2200      	movs	r2, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc4:	f7fd f96c 	bl	80002a0 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd0:	e058      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd2:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	2200      	movs	r2, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	4611      	mov	r1, r2
 8002fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fec:	4642      	mov	r2, r8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	f04f 0000 	mov.w	r0, #0
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	0159      	lsls	r1, r3, #5
 8002ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffe:	0150      	lsls	r0, r2, #5
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4641      	mov	r1, r8
 8003006:	ebb2 0a01 	subs.w	sl, r2, r1
 800300a:	4649      	mov	r1, r9
 800300c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800301c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003024:	ebb2 040a 	subs.w	r4, r2, sl
 8003028:	eb63 050b 	sbc.w	r5, r3, fp
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	00eb      	lsls	r3, r5, #3
 8003036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800303a:	00e2      	lsls	r2, r4, #3
 800303c:	4614      	mov	r4, r2
 800303e:	461d      	mov	r5, r3
 8003040:	4643      	mov	r3, r8
 8003042:	18e3      	adds	r3, r4, r3
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	464b      	mov	r3, r9
 8003048:	eb45 0303 	adc.w	r3, r5, r3
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800305a:	4629      	mov	r1, r5
 800305c:	028b      	lsls	r3, r1, #10
 800305e:	4621      	mov	r1, r4
 8003060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003064:	4621      	mov	r1, r4
 8003066:	028a      	lsls	r2, r1, #10
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306e:	2200      	movs	r2, #0
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	61fa      	str	r2, [r7, #28]
 8003074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003078:	f7fd f912 	bl	80002a0 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3750      	adds	r7, #80	; 0x50
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	007a1200 	.word	0x007a1200

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000010 	.word	0x20000010

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030dc:	f7ff fff0 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0a9b      	lsrs	r3, r3, #10
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	080044e0 	.word	0x080044e0

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003104:	f7ff ffdc 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0b5b      	lsrs	r3, r3, #13
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4903      	ldr	r1, [pc, #12]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	080044e0 	.word	0x080044e0

08003128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e03f      	b.n	80031ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff faa8 	bl	80026a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	; 0x24
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f929 	bl	80033c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08a      	sub	sp, #40	; 0x28
 80031c6:	af02      	add	r7, sp, #8
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d17c      	bne.n	80032dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_UART_Transmit+0x2c>
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e075      	b.n	80032de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Transmit+0x3e>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e06e      	b.n	80032de <HAL_UART_Transmit+0x11c>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2221      	movs	r2, #33	; 0x21
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003216:	f7fd ffa9 	bl	800116c <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003230:	d108      	bne.n	8003244 <HAL_UART_Transmit+0x82>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d104      	bne.n	8003244 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e003      	b.n	800324c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003248:	2300      	movs	r3, #0
 800324a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003254:	e02a      	b.n	80032ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f840 	bl	80032e6 <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e036      	b.n	80032de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	3302      	adds	r3, #2
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	e007      	b.n	800329e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	3301      	adds	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1cf      	bne.n	8003256 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f810 	bl	80032e6 <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e006      	b.n	80032de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b090      	sub	sp, #64	; 0x40
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f6:	e050      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d04c      	beq.n	800339a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <UART_WaitOnFlagUntilTimeout+0x30>
 8003306:	f7fd ff31 	bl	800116c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003312:	429a      	cmp	r2, r3
 8003314:	d241      	bcs.n	800339a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800332c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003336:	637a      	str	r2, [r7, #52]	; 0x34
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800333c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3314      	adds	r3, #20
 8003350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	613b      	str	r3, [r7, #16]
   return(result);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3314      	adds	r3, #20
 8003368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800336a:	623a      	str	r2, [r7, #32]
 800336c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	69f9      	ldr	r1, [r7, #28]
 8003370:	6a3a      	ldr	r2, [r7, #32]
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	61bb      	str	r3, [r7, #24]
   return(result);
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e5      	bne.n	800334a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e00f      	b.n	80033ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	bf0c      	ite	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	2300      	movne	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d09f      	beq.n	80032f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3740      	adds	r7, #64	; 0x40
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b0c0      	sub	sp, #256	; 0x100
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	68d9      	ldr	r1, [r3, #12]
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	ea40 0301 	orr.w	r3, r0, r1
 80033ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	431a      	orrs	r2, r3
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800341c:	f021 010c 	bic.w	r1, r1, #12
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800342a:	430b      	orrs	r3, r1
 800342c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	6999      	ldr	r1, [r3, #24]
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	ea40 0301 	orr.w	r3, r0, r1
 800344a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b8f      	ldr	r3, [pc, #572]	; (8003690 <UART_SetConfig+0x2cc>)
 8003454:	429a      	cmp	r2, r3
 8003456:	d005      	beq.n	8003464 <UART_SetConfig+0xa0>
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b8d      	ldr	r3, [pc, #564]	; (8003694 <UART_SetConfig+0x2d0>)
 8003460:	429a      	cmp	r2, r3
 8003462:	d104      	bne.n	800346e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7ff fe4c 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8003468:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800346c:	e003      	b.n	8003476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800346e:	f7ff fe33 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003472:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003480:	f040 810c 	bne.w	800369c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003488:	2200      	movs	r2, #0
 800348a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800348e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003496:	4622      	mov	r2, r4
 8003498:	462b      	mov	r3, r5
 800349a:	1891      	adds	r1, r2, r2
 800349c:	65b9      	str	r1, [r7, #88]	; 0x58
 800349e:	415b      	adcs	r3, r3
 80034a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034a6:	4621      	mov	r1, r4
 80034a8:	eb12 0801 	adds.w	r8, r2, r1
 80034ac:	4629      	mov	r1, r5
 80034ae:	eb43 0901 	adc.w	r9, r3, r1
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034c6:	4690      	mov	r8, r2
 80034c8:	4699      	mov	r9, r3
 80034ca:	4623      	mov	r3, r4
 80034cc:	eb18 0303 	adds.w	r3, r8, r3
 80034d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034d4:	462b      	mov	r3, r5
 80034d6:	eb49 0303 	adc.w	r3, r9, r3
 80034da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034f2:	460b      	mov	r3, r1
 80034f4:	18db      	adds	r3, r3, r3
 80034f6:	653b      	str	r3, [r7, #80]	; 0x50
 80034f8:	4613      	mov	r3, r2
 80034fa:	eb42 0303 	adc.w	r3, r2, r3
 80034fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003508:	f7fc feca 	bl	80002a0 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4b61      	ldr	r3, [pc, #388]	; (8003698 <UART_SetConfig+0x2d4>)
 8003512:	fba3 2302 	umull	r2, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	011c      	lsls	r4, r3, #4
 800351a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003524:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800352c:	4642      	mov	r2, r8
 800352e:	464b      	mov	r3, r9
 8003530:	1891      	adds	r1, r2, r2
 8003532:	64b9      	str	r1, [r7, #72]	; 0x48
 8003534:	415b      	adcs	r3, r3
 8003536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800353c:	4641      	mov	r1, r8
 800353e:	eb12 0a01 	adds.w	sl, r2, r1
 8003542:	4649      	mov	r1, r9
 8003544:	eb43 0b01 	adc.w	fp, r3, r1
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800355c:	4692      	mov	sl, r2
 800355e:	469b      	mov	fp, r3
 8003560:	4643      	mov	r3, r8
 8003562:	eb1a 0303 	adds.w	r3, sl, r3
 8003566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800356a:	464b      	mov	r3, r9
 800356c:	eb4b 0303 	adc.w	r3, fp, r3
 8003570:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003580:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003588:	460b      	mov	r3, r1
 800358a:	18db      	adds	r3, r3, r3
 800358c:	643b      	str	r3, [r7, #64]	; 0x40
 800358e:	4613      	mov	r3, r2
 8003590:	eb42 0303 	adc.w	r3, r2, r3
 8003594:	647b      	str	r3, [r7, #68]	; 0x44
 8003596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800359a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800359e:	f7fc fe7f 	bl	80002a0 <__aeabi_uldivmod>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	4b3b      	ldr	r3, [pc, #236]	; (8003698 <UART_SetConfig+0x2d4>)
 80035aa:	fba3 2301 	umull	r2, r3, r3, r1
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2264      	movs	r2, #100	; 0x64
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	1acb      	subs	r3, r1, r3
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035be:	4b36      	ldr	r3, [pc, #216]	; (8003698 <UART_SetConfig+0x2d4>)
 80035c0:	fba3 2302 	umull	r2, r3, r3, r2
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035cc:	441c      	add	r4, r3
 80035ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	1891      	adds	r1, r2, r2
 80035e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80035e8:	415b      	adcs	r3, r3
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035f0:	4641      	mov	r1, r8
 80035f2:	1851      	adds	r1, r2, r1
 80035f4:	6339      	str	r1, [r7, #48]	; 0x30
 80035f6:	4649      	mov	r1, r9
 80035f8:	414b      	adcs	r3, r1
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003608:	4659      	mov	r1, fp
 800360a:	00cb      	lsls	r3, r1, #3
 800360c:	4651      	mov	r1, sl
 800360e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003612:	4651      	mov	r1, sl
 8003614:	00ca      	lsls	r2, r1, #3
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	4603      	mov	r3, r0
 800361c:	4642      	mov	r2, r8
 800361e:	189b      	adds	r3, r3, r2
 8003620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003624:	464b      	mov	r3, r9
 8003626:	460a      	mov	r2, r1
 8003628:	eb42 0303 	adc.w	r3, r2, r3
 800362c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800363c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003644:	460b      	mov	r3, r1
 8003646:	18db      	adds	r3, r3, r3
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
 800364a:	4613      	mov	r3, r2
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800365a:	f7fc fe21 	bl	80002a0 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <UART_SetConfig+0x2d4>)
 8003664:	fba3 1302 	umull	r1, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	2164      	movs	r1, #100	; 0x64
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	3332      	adds	r3, #50	; 0x32
 8003676:	4a08      	ldr	r2, [pc, #32]	; (8003698 <UART_SetConfig+0x2d4>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	f003 0207 	and.w	r2, r3, #7
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4422      	add	r2, r4
 800368a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800368c:	e105      	b.n	800389a <UART_SetConfig+0x4d6>
 800368e:	bf00      	nop
 8003690:	40011000 	.word	0x40011000
 8003694:	40011400 	.word	0x40011400
 8003698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800369c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036ae:	4642      	mov	r2, r8
 80036b0:	464b      	mov	r3, r9
 80036b2:	1891      	adds	r1, r2, r2
 80036b4:	6239      	str	r1, [r7, #32]
 80036b6:	415b      	adcs	r3, r3
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036be:	4641      	mov	r1, r8
 80036c0:	1854      	adds	r4, r2, r1
 80036c2:	4649      	mov	r1, r9
 80036c4:	eb43 0501 	adc.w	r5, r3, r1
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	00eb      	lsls	r3, r5, #3
 80036d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d6:	00e2      	lsls	r2, r4, #3
 80036d8:	4614      	mov	r4, r2
 80036da:	461d      	mov	r5, r3
 80036dc:	4643      	mov	r3, r8
 80036de:	18e3      	adds	r3, r4, r3
 80036e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036e4:	464b      	mov	r3, r9
 80036e6:	eb45 0303 	adc.w	r3, r5, r3
 80036ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800370a:	4629      	mov	r1, r5
 800370c:	008b      	lsls	r3, r1, #2
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003714:	4621      	mov	r1, r4
 8003716:	008a      	lsls	r2, r1, #2
 8003718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800371c:	f7fc fdc0 	bl	80002a0 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4b60      	ldr	r3, [pc, #384]	; (80038a8 <UART_SetConfig+0x4e4>)
 8003726:	fba3 2302 	umull	r2, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	011c      	lsls	r4, r3, #4
 800372e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003732:	2200      	movs	r2, #0
 8003734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800373c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	1891      	adds	r1, r2, r2
 8003746:	61b9      	str	r1, [r7, #24]
 8003748:	415b      	adcs	r3, r3
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003750:	4641      	mov	r1, r8
 8003752:	1851      	adds	r1, r2, r1
 8003754:	6139      	str	r1, [r7, #16]
 8003756:	4649      	mov	r1, r9
 8003758:	414b      	adcs	r3, r1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003768:	4659      	mov	r1, fp
 800376a:	00cb      	lsls	r3, r1, #3
 800376c:	4651      	mov	r1, sl
 800376e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003772:	4651      	mov	r1, sl
 8003774:	00ca      	lsls	r2, r1, #3
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	4603      	mov	r3, r0
 800377c:	4642      	mov	r2, r8
 800377e:	189b      	adds	r3, r3, r2
 8003780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003784:	464b      	mov	r3, r9
 8003786:	460a      	mov	r2, r1
 8003788:	eb42 0303 	adc.w	r3, r2, r3
 800378c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	67bb      	str	r3, [r7, #120]	; 0x78
 800379a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037a8:	4649      	mov	r1, r9
 80037aa:	008b      	lsls	r3, r1, #2
 80037ac:	4641      	mov	r1, r8
 80037ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b2:	4641      	mov	r1, r8
 80037b4:	008a      	lsls	r2, r1, #2
 80037b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037ba:	f7fc fd71 	bl	80002a0 <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <UART_SetConfig+0x4e4>)
 80037c4:	fba3 1302 	umull	r1, r3, r3, r2
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	2164      	movs	r1, #100	; 0x64
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	3332      	adds	r3, #50	; 0x32
 80037d6:	4a34      	ldr	r2, [pc, #208]	; (80038a8 <UART_SetConfig+0x4e4>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e2:	441c      	add	r4, r3
 80037e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e8:	2200      	movs	r2, #0
 80037ea:	673b      	str	r3, [r7, #112]	; 0x70
 80037ec:	677a      	str	r2, [r7, #116]	; 0x74
 80037ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037f2:	4642      	mov	r2, r8
 80037f4:	464b      	mov	r3, r9
 80037f6:	1891      	adds	r1, r2, r2
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	415b      	adcs	r3, r3
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003802:	4641      	mov	r1, r8
 8003804:	1851      	adds	r1, r2, r1
 8003806:	6039      	str	r1, [r7, #0]
 8003808:	4649      	mov	r1, r9
 800380a:	414b      	adcs	r3, r1
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800381a:	4659      	mov	r1, fp
 800381c:	00cb      	lsls	r3, r1, #3
 800381e:	4651      	mov	r1, sl
 8003820:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003824:	4651      	mov	r1, sl
 8003826:	00ca      	lsls	r2, r1, #3
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	4603      	mov	r3, r0
 800382e:	4642      	mov	r2, r8
 8003830:	189b      	adds	r3, r3, r2
 8003832:	66bb      	str	r3, [r7, #104]	; 0x68
 8003834:	464b      	mov	r3, r9
 8003836:	460a      	mov	r2, r1
 8003838:	eb42 0303 	adc.w	r3, r2, r3
 800383c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	663b      	str	r3, [r7, #96]	; 0x60
 8003848:	667a      	str	r2, [r7, #100]	; 0x64
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003856:	4649      	mov	r1, r9
 8003858:	008b      	lsls	r3, r1, #2
 800385a:	4641      	mov	r1, r8
 800385c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003860:	4641      	mov	r1, r8
 8003862:	008a      	lsls	r2, r1, #2
 8003864:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003868:	f7fc fd1a 	bl	80002a0 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <UART_SetConfig+0x4e4>)
 8003872:	fba3 1302 	umull	r1, r3, r3, r2
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2164      	movs	r1, #100	; 0x64
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	3332      	adds	r3, #50	; 0x32
 8003884:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <UART_SetConfig+0x4e4>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	f003 020f 	and.w	r2, r3, #15
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4422      	add	r2, r4
 8003898:	609a      	str	r2, [r3, #8]
}
 800389a:	bf00      	nop
 800389c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038a0:	46bd      	mov	sp, r7
 80038a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a6:	bf00      	nop
 80038a8:	51eb851f 	.word	0x51eb851f

080038ac <main>:
  */



int main(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b090      	sub	sp, #64	; 0x40
 80038b0:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 80038b2:	f7fd fbfb 	bl	80010ac <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 80038b6:	f000 f885 	bl	80039c4 <SystemClock_Config>

  /* Initialize BSP Led for LED1, LED2 and LED3 */
  	BSP_LED_Init(LED1);
 80038ba:	2000      	movs	r0, #0
 80038bc:	f7fd fa82 	bl	8000dc4 <BSP_LED_Init>
  	BSP_LED_Init(LED2);
 80038c0:	2001      	movs	r0, #1
 80038c2:	f7fd fa7f 	bl	8000dc4 <BSP_LED_Init>
  	BSP_LED_Init(LED3);
 80038c6:	2002      	movs	r0, #2
 80038c8:	f7fd fa7c 	bl	8000dc4 <BSP_LED_Init>


  /* Initialize BSP PB for BUTTON_USER */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80038cc:	2100      	movs	r1, #0
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7fd fafc 	bl	8000ecc <BSP_PB_Init>

  /*Se declara una estructura auxiliar para recorrer un bucle for*/
  signalADS1115 channels;

  /*Se inicializa los puertos I2C, UART y puerto de lectura para señal READY.*/
  I2CGpio_init();
 80038d4:	f7fc ffc6 	bl	8000864 <I2CGpio_init>
  uartInit();
 80038d8:	f7fd f8ac 	bl	8000a34 <uartInit>
  ADS1115_gpioReadyInit();
 80038dc:	f7fd f82e 	bl	800093c <ADS1115_gpioReadyInit>

  /*Palabra donde se almacenará el resultado de la conversión.*/
  uint16_t wordReading;

  /*Array de 3 elementos utilizados para conversión de cada canal en Nro de cuenta a Volts.*/
  float voltage[3]={0.1,0.1,0.1};
 80038e0:	4a37      	ldr	r2, [pc, #220]	; (80039c0 <main+0x114>)
 80038e2:	463b      	mov	r3, r7
 80038e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80038e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  //-------------------------------------------

  //-------------------------------------------
  //EJEMPLO FUNCIONAMIENTO CON PIN READY

  ADS1115_channelInitPolled(&channelCero,SINGLE_MODE_A0,SLAVE_ADRRES_GND);
 80038ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038ee:	2248      	movs	r2, #72	; 0x48
 80038f0:	2104      	movs	r1, #4
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fe56 	bl	80005a4 <ADS1115_channelInitPolled>
  ADS1115_channelInitPolled(&channelUno,SINGLE_MODE_A1,SLAVE_ADRRES_GND);
 80038f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038fc:	2248      	movs	r2, #72	; 0x48
 80038fe:	2105      	movs	r1, #5
 8003900:	4618      	mov	r0, r3
 8003902:	f7fc fe4f 	bl	80005a4 <ADS1115_channelInitPolled>
  ADS1115_channelInitPolled(&channelDos,DIFERENTIAL_MODE_A2_A3,SLAVE_ADRRES_GND);
 8003906:	f107 0318 	add.w	r3, r7, #24
 800390a:	2248      	movs	r2, #72	; 0x48
 800390c:	2103      	movs	r1, #3
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc fe48 	bl	80005a4 <ADS1115_channelInitPolled>
  //ADS1115_startConversionPolled(&channelCero,SLAVE_ADRRES_GND);
  //----------------------------------------------
  /* Infinite loop */
  while (1)
  {
	  	BSP_LED_On(LED1);
 8003914:	2000      	movs	r0, #0
 8003916:	f7fd faa5 	bl	8000e64 <BSP_LED_On>
	  	BSP_LED_Off(LED2);
 800391a:	2001      	movs	r0, #1
 800391c:	f7fd fabc 	bl	8000e98 <BSP_LED_Off>
	  	BSP_LED_On(LED3);
 8003920:	2002      	movs	r0, #2
 8003922:	f7fd fa9f 	bl	8000e64 <BSP_LED_On>
	  //-------------------------------------------
	  //EJEMPLO FUNCIONAMIENTO CON PIN READY (POLLED DRIVEN)

	  for(int i=0;i<3;i++){
 8003926:	2300      	movs	r3, #0
 8003928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392a:	e041      	b.n	80039b0 <main+0x104>
	  if (i==0){
 800392c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d107      	bne.n	8003942 <main+0x96>
		  channels=channelCero;
 8003932:	f107 030c 	add.w	r3, r7, #12
 8003936:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800393a:	ca07      	ldmia	r2, {r0, r1, r2}
 800393c:	c303      	stmia	r3!, {r0, r1}
 800393e:	801a      	strh	r2, [r3, #0]
 8003940:	e014      	b.n	800396c <main+0xc0>
	  }
	  else if(i==1){
 8003942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <main+0xac>
		  channels=channelUno;
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003950:	ca07      	ldmia	r2, {r0, r1, r2}
 8003952:	c303      	stmia	r3!, {r0, r1}
 8003954:	801a      	strh	r2, [r3, #0]
 8003956:	e009      	b.n	800396c <main+0xc0>
	  }
	  else if(i==2){
 8003958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395a:	2b02      	cmp	r3, #2
 800395c:	d106      	bne.n	800396c <main+0xc0>
		  channels=channelDos;
 800395e:	f107 030c 	add.w	r3, r7, #12
 8003962:	f107 0218 	add.w	r2, r7, #24
 8003966:	ca07      	ldmia	r2, {r0, r1, r2}
 8003968:	c303      	stmia	r3!, {r0, r1}
 800396a:	801a      	strh	r2, [r3, #0]
	  }

	  ADS1115_startConversionPolled(&channels,SLAVE_ADRRES_GND);
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	2148      	movs	r1, #72	; 0x48
 8003972:	4618      	mov	r0, r3
 8003974:	f7fc fe44 	bl	8000600 <ADS1115_startConversionPolled>
	  wordReading=ADS1115_getConversionPolled(&channels,SLAVE_ADRRES_GND);
 8003978:	f107 030c 	add.w	r3, r7, #12
 800397c:	2148      	movs	r1, #72	; 0x48
 800397e:	4618      	mov	r0, r3
 8003980:	f7fc fe8a 	bl	8000698 <ADS1115_getConversionPolled>
 8003984:	4603      	mov	r3, r0
 8003986:	877b      	strh	r3, [r7, #58]	; 0x3a

	  BSP_LED_On(LED2);
 8003988:	2001      	movs	r0, #1
 800398a:	f7fd fa6b 	bl	8000e64 <BSP_LED_On>

	  voltage[i]=ADS1115_getValueVoltage(&channels);
 800398e:	f107 030c 	add.w	r3, r7, #12
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc febe 	bl	8000714 <ADS1115_getValueVoltage>
 8003998:	eef0 7a40 	vmov.f32	s15, s0
 800399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	3340      	adds	r3, #64	; 0x40
 80039a2:	443b      	add	r3, r7
 80039a4:	3b40      	subs	r3, #64	; 0x40
 80039a6:	edc3 7a00 	vstr	s15, [r3]
	  for(int i=0;i<3;i++){
 80039aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ac:	3301      	adds	r3, #1
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	ddba      	ble.n	800392c <main+0x80>
	  }

	  sendADS1115ByUart(voltage);
 80039b6:	463b      	mov	r3, r7
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd f8ed 	bl	8000b98 <sendADS1115ByUart>
	  	BSP_LED_On(LED1);
 80039be:	e7a9      	b.n	8003914 <main+0x68>
 80039c0:	080044bc 	.word	0x080044bc

080039c4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b094      	sub	sp, #80	; 0x50
 80039c8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <SystemClock_Config+0xbc>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	4a2b      	ldr	r2, [pc, #172]	; (8003a80 <SystemClock_Config+0xbc>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40
 80039da:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <SystemClock_Config+0xbc>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <SystemClock_Config+0xc0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <SystemClock_Config+0xc0>)
 80039f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <SystemClock_Config+0xc0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a02:	2301      	movs	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003a06:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a0a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a16:	2308      	movs	r3, #8
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8003a1a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a20:	2302      	movs	r3, #2
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a24:	2307      	movs	r3, #7
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe fee3 	bl	80027f8 <HAL_RCC_OscConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8003a38:	f000 f826 	bl	8003a88 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a3c:	f7fe fe8c 	bl	8002758 <HAL_PWREx_EnableOverDrive>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8003a46:	f000 f81f 	bl	8003a88 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003a4a:	230f      	movs	r3, #15
 8003a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a52:	2300      	movs	r3, #0
 8003a54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8003a56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8003a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a66:	2105      	movs	r1, #5
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff f93d 	bl	8002ce8 <HAL_RCC_ClockConfig>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8003a74:	f000 f808 	bl	8003a88 <Error_Handler>
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3750      	adds	r7, #80	; 0x50
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40007000 	.word	0x40007000

08003a88 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f7fd f9e9 	bl	8000e64 <BSP_LED_On>
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <Error_Handler+0xa>

08003a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003acc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a9a:	e003      	b.n	8003aa4 <LoopCopyDataInit>

08003a9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003aa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003aa2:	3104      	adds	r1, #4

08003aa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003aa4:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003aa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003aaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003aac:	d3f6      	bcc.n	8003a9c <CopyDataInit>
  ldr  r2, =_sbss
 8003aae:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ab0:	e002      	b.n	8003ab8 <LoopFillZerobss>

08003ab2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ab2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ab4:	f842 3b04 	str.w	r3, [r2], #4

08003ab8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003aba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003abc:	d3f9      	bcc.n	8003ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003abe:	f7fd fa5b 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ac2:	f000 f817 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ac6:	f7ff fef1 	bl	80038ac <main>
  bx  lr    
 8003aca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003acc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003ad0:	0800452c 	.word	0x0800452c
  ldr  r0, =_sdata
 8003ad4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ad8:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003adc:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003ae0:	2000014c 	.word	0x2000014c

08003ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ae4:	e7fe      	b.n	8003ae4 <ADC_IRQHandler>
	...

08003ae8 <__errno>:
 8003ae8:	4b01      	ldr	r3, [pc, #4]	; (8003af0 <__errno+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	2000001c 	.word	0x2000001c

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4d0d      	ldr	r5, [pc, #52]	; (8003b2c <__libc_init_array+0x38>)
 8003af8:	4c0d      	ldr	r4, [pc, #52]	; (8003b30 <__libc_init_array+0x3c>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	2600      	movs	r6, #0
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	4d0b      	ldr	r5, [pc, #44]	; (8003b34 <__libc_init_array+0x40>)
 8003b06:	4c0c      	ldr	r4, [pc, #48]	; (8003b38 <__libc_init_array+0x44>)
 8003b08:	f000 fc86 	bl	8004418 <_init>
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	2600      	movs	r6, #0
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	08004524 	.word	0x08004524
 8003b30:	08004524 	.word	0x08004524
 8003b34:	08004524 	.word	0x08004524
 8003b38:	08004528 	.word	0x08004528

08003b3c <siprintf>:
 8003b3c:	b40e      	push	{r1, r2, r3}
 8003b3e:	b500      	push	{lr}
 8003b40:	b09c      	sub	sp, #112	; 0x70
 8003b42:	ab1d      	add	r3, sp, #116	; 0x74
 8003b44:	9002      	str	r0, [sp, #8]
 8003b46:	9006      	str	r0, [sp, #24]
 8003b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b4c:	4809      	ldr	r0, [pc, #36]	; (8003b74 <siprintf+0x38>)
 8003b4e:	9107      	str	r1, [sp, #28]
 8003b50:	9104      	str	r1, [sp, #16]
 8003b52:	4909      	ldr	r1, [pc, #36]	; (8003b78 <siprintf+0x3c>)
 8003b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b58:	9105      	str	r1, [sp, #20]
 8003b5a:	6800      	ldr	r0, [r0, #0]
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	a902      	add	r1, sp, #8
 8003b60:	f000 f868 	bl	8003c34 <_svfiprintf_r>
 8003b64:	9b02      	ldr	r3, [sp, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	b01c      	add	sp, #112	; 0x70
 8003b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b70:	b003      	add	sp, #12
 8003b72:	4770      	bx	lr
 8003b74:	2000001c 	.word	0x2000001c
 8003b78:	ffff0208 	.word	0xffff0208

08003b7c <__ssputs_r>:
 8003b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	688e      	ldr	r6, [r1, #8]
 8003b82:	429e      	cmp	r6, r3
 8003b84:	4682      	mov	sl, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	4690      	mov	r8, r2
 8003b8a:	461f      	mov	r7, r3
 8003b8c:	d838      	bhi.n	8003c00 <__ssputs_r+0x84>
 8003b8e:	898a      	ldrh	r2, [r1, #12]
 8003b90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b94:	d032      	beq.n	8003bfc <__ssputs_r+0x80>
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	6909      	ldr	r1, [r1, #16]
 8003b9a:	eba5 0901 	sub.w	r9, r5, r1
 8003b9e:	6965      	ldr	r5, [r4, #20]
 8003ba0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ba4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ba8:	3301      	adds	r3, #1
 8003baa:	444b      	add	r3, r9
 8003bac:	106d      	asrs	r5, r5, #1
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	bf38      	it	cc
 8003bb2:	461d      	movcc	r5, r3
 8003bb4:	0553      	lsls	r3, r2, #21
 8003bb6:	d531      	bpl.n	8003c1c <__ssputs_r+0xa0>
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f000 fb63 	bl	8004284 <_malloc_r>
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	b950      	cbnz	r0, 8003bd8 <__ssputs_r+0x5c>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	f8ca 3000 	str.w	r3, [sl]
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd8:	6921      	ldr	r1, [r4, #16]
 8003bda:	464a      	mov	r2, r9
 8003bdc:	f000 fabe 	bl	800415c <memcpy>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	6126      	str	r6, [r4, #16]
 8003bee:	6165      	str	r5, [r4, #20]
 8003bf0:	444e      	add	r6, r9
 8003bf2:	eba5 0509 	sub.w	r5, r5, r9
 8003bf6:	6026      	str	r6, [r4, #0]
 8003bf8:	60a5      	str	r5, [r4, #8]
 8003bfa:	463e      	mov	r6, r7
 8003bfc:	42be      	cmp	r6, r7
 8003bfe:	d900      	bls.n	8003c02 <__ssputs_r+0x86>
 8003c00:	463e      	mov	r6, r7
 8003c02:	6820      	ldr	r0, [r4, #0]
 8003c04:	4632      	mov	r2, r6
 8003c06:	4641      	mov	r1, r8
 8003c08:	f000 fab6 	bl	8004178 <memmove>
 8003c0c:	68a3      	ldr	r3, [r4, #8]
 8003c0e:	1b9b      	subs	r3, r3, r6
 8003c10:	60a3      	str	r3, [r4, #8]
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	4433      	add	r3, r6
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	2000      	movs	r0, #0
 8003c1a:	e7db      	b.n	8003bd4 <__ssputs_r+0x58>
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	f000 fba5 	bl	800436c <_realloc_r>
 8003c22:	4606      	mov	r6, r0
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d1e1      	bne.n	8003bec <__ssputs_r+0x70>
 8003c28:	6921      	ldr	r1, [r4, #16]
 8003c2a:	4650      	mov	r0, sl
 8003c2c:	f000 fabe 	bl	80041ac <_free_r>
 8003c30:	e7c7      	b.n	8003bc2 <__ssputs_r+0x46>
	...

08003c34 <_svfiprintf_r>:
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c38:	4698      	mov	r8, r3
 8003c3a:	898b      	ldrh	r3, [r1, #12]
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	b09d      	sub	sp, #116	; 0x74
 8003c40:	4607      	mov	r7, r0
 8003c42:	460d      	mov	r5, r1
 8003c44:	4614      	mov	r4, r2
 8003c46:	d50e      	bpl.n	8003c66 <_svfiprintf_r+0x32>
 8003c48:	690b      	ldr	r3, [r1, #16]
 8003c4a:	b963      	cbnz	r3, 8003c66 <_svfiprintf_r+0x32>
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	f000 fb19 	bl	8004284 <_malloc_r>
 8003c52:	6028      	str	r0, [r5, #0]
 8003c54:	6128      	str	r0, [r5, #16]
 8003c56:	b920      	cbnz	r0, 8003c62 <_svfiprintf_r+0x2e>
 8003c58:	230c      	movs	r3, #12
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	e0d1      	b.n	8003e06 <_svfiprintf_r+0x1d2>
 8003c62:	2340      	movs	r3, #64	; 0x40
 8003c64:	616b      	str	r3, [r5, #20]
 8003c66:	2300      	movs	r3, #0
 8003c68:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c70:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c74:	2330      	movs	r3, #48	; 0x30
 8003c76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e20 <_svfiprintf_r+0x1ec>
 8003c7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c7e:	f04f 0901 	mov.w	r9, #1
 8003c82:	4623      	mov	r3, r4
 8003c84:	469a      	mov	sl, r3
 8003c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c8a:	b10a      	cbz	r2, 8003c90 <_svfiprintf_r+0x5c>
 8003c8c:	2a25      	cmp	r2, #37	; 0x25
 8003c8e:	d1f9      	bne.n	8003c84 <_svfiprintf_r+0x50>
 8003c90:	ebba 0b04 	subs.w	fp, sl, r4
 8003c94:	d00b      	beq.n	8003cae <_svfiprintf_r+0x7a>
 8003c96:	465b      	mov	r3, fp
 8003c98:	4622      	mov	r2, r4
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f7ff ff6d 	bl	8003b7c <__ssputs_r>
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	f000 80aa 	beq.w	8003dfc <_svfiprintf_r+0x1c8>
 8003ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003caa:	445a      	add	r2, fp
 8003cac:	9209      	str	r2, [sp, #36]	; 0x24
 8003cae:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80a2 	beq.w	8003dfc <_svfiprintf_r+0x1c8>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cc2:	f10a 0a01 	add.w	sl, sl, #1
 8003cc6:	9304      	str	r3, [sp, #16]
 8003cc8:	9307      	str	r3, [sp, #28]
 8003cca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cce:	931a      	str	r3, [sp, #104]	; 0x68
 8003cd0:	4654      	mov	r4, sl
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd8:	4851      	ldr	r0, [pc, #324]	; (8003e20 <_svfiprintf_r+0x1ec>)
 8003cda:	f7fc fa91 	bl	8000200 <memchr>
 8003cde:	9a04      	ldr	r2, [sp, #16]
 8003ce0:	b9d8      	cbnz	r0, 8003d1a <_svfiprintf_r+0xe6>
 8003ce2:	06d0      	lsls	r0, r2, #27
 8003ce4:	bf44      	itt	mi
 8003ce6:	2320      	movmi	r3, #32
 8003ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cec:	0711      	lsls	r1, r2, #28
 8003cee:	bf44      	itt	mi
 8003cf0:	232b      	movmi	r3, #43	; 0x2b
 8003cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfc:	d015      	beq.n	8003d2a <_svfiprintf_r+0xf6>
 8003cfe:	9a07      	ldr	r2, [sp, #28]
 8003d00:	4654      	mov	r4, sl
 8003d02:	2000      	movs	r0, #0
 8003d04:	f04f 0c0a 	mov.w	ip, #10
 8003d08:	4621      	mov	r1, r4
 8003d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d0e:	3b30      	subs	r3, #48	; 0x30
 8003d10:	2b09      	cmp	r3, #9
 8003d12:	d94e      	bls.n	8003db2 <_svfiprintf_r+0x17e>
 8003d14:	b1b0      	cbz	r0, 8003d44 <_svfiprintf_r+0x110>
 8003d16:	9207      	str	r2, [sp, #28]
 8003d18:	e014      	b.n	8003d44 <_svfiprintf_r+0x110>
 8003d1a:	eba0 0308 	sub.w	r3, r0, r8
 8003d1e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	9304      	str	r3, [sp, #16]
 8003d26:	46a2      	mov	sl, r4
 8003d28:	e7d2      	b.n	8003cd0 <_svfiprintf_r+0x9c>
 8003d2a:	9b03      	ldr	r3, [sp, #12]
 8003d2c:	1d19      	adds	r1, r3, #4
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	9103      	str	r1, [sp, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bfbb      	ittet	lt
 8003d36:	425b      	neglt	r3, r3
 8003d38:	f042 0202 	orrlt.w	r2, r2, #2
 8003d3c:	9307      	strge	r3, [sp, #28]
 8003d3e:	9307      	strlt	r3, [sp, #28]
 8003d40:	bfb8      	it	lt
 8003d42:	9204      	strlt	r2, [sp, #16]
 8003d44:	7823      	ldrb	r3, [r4, #0]
 8003d46:	2b2e      	cmp	r3, #46	; 0x2e
 8003d48:	d10c      	bne.n	8003d64 <_svfiprintf_r+0x130>
 8003d4a:	7863      	ldrb	r3, [r4, #1]
 8003d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d4e:	d135      	bne.n	8003dbc <_svfiprintf_r+0x188>
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	1d1a      	adds	r2, r3, #4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	9203      	str	r2, [sp, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bfb8      	it	lt
 8003d5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d60:	3402      	adds	r4, #2
 8003d62:	9305      	str	r3, [sp, #20]
 8003d64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e30 <_svfiprintf_r+0x1fc>
 8003d68:	7821      	ldrb	r1, [r4, #0]
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	f7fc fa47 	bl	8000200 <memchr>
 8003d72:	b140      	cbz	r0, 8003d86 <_svfiprintf_r+0x152>
 8003d74:	2340      	movs	r3, #64	; 0x40
 8003d76:	eba0 000a 	sub.w	r0, r0, sl
 8003d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d7e:	9b04      	ldr	r3, [sp, #16]
 8003d80:	4303      	orrs	r3, r0
 8003d82:	3401      	adds	r4, #1
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d8a:	4826      	ldr	r0, [pc, #152]	; (8003e24 <_svfiprintf_r+0x1f0>)
 8003d8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d90:	2206      	movs	r2, #6
 8003d92:	f7fc fa35 	bl	8000200 <memchr>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d038      	beq.n	8003e0c <_svfiprintf_r+0x1d8>
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <_svfiprintf_r+0x1f4>)
 8003d9c:	bb1b      	cbnz	r3, 8003de6 <_svfiprintf_r+0x1b2>
 8003d9e:	9b03      	ldr	r3, [sp, #12]
 8003da0:	3307      	adds	r3, #7
 8003da2:	f023 0307 	bic.w	r3, r3, #7
 8003da6:	3308      	adds	r3, #8
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dac:	4433      	add	r3, r6
 8003dae:	9309      	str	r3, [sp, #36]	; 0x24
 8003db0:	e767      	b.n	8003c82 <_svfiprintf_r+0x4e>
 8003db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003db6:	460c      	mov	r4, r1
 8003db8:	2001      	movs	r0, #1
 8003dba:	e7a5      	b.n	8003d08 <_svfiprintf_r+0xd4>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	3401      	adds	r4, #1
 8003dc0:	9305      	str	r3, [sp, #20]
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f04f 0c0a 	mov.w	ip, #10
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dce:	3a30      	subs	r2, #48	; 0x30
 8003dd0:	2a09      	cmp	r2, #9
 8003dd2:	d903      	bls.n	8003ddc <_svfiprintf_r+0x1a8>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0c5      	beq.n	8003d64 <_svfiprintf_r+0x130>
 8003dd8:	9105      	str	r1, [sp, #20]
 8003dda:	e7c3      	b.n	8003d64 <_svfiprintf_r+0x130>
 8003ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003de0:	4604      	mov	r4, r0
 8003de2:	2301      	movs	r3, #1
 8003de4:	e7f0      	b.n	8003dc8 <_svfiprintf_r+0x194>
 8003de6:	ab03      	add	r3, sp, #12
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	462a      	mov	r2, r5
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <_svfiprintf_r+0x1f8>)
 8003dee:	a904      	add	r1, sp, #16
 8003df0:	4638      	mov	r0, r7
 8003df2:	f3af 8000 	nop.w
 8003df6:	1c42      	adds	r2, r0, #1
 8003df8:	4606      	mov	r6, r0
 8003dfa:	d1d6      	bne.n	8003daa <_svfiprintf_r+0x176>
 8003dfc:	89ab      	ldrh	r3, [r5, #12]
 8003dfe:	065b      	lsls	r3, r3, #25
 8003e00:	f53f af2c 	bmi.w	8003c5c <_svfiprintf_r+0x28>
 8003e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e06:	b01d      	add	sp, #116	; 0x74
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	ab03      	add	r3, sp, #12
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	462a      	mov	r2, r5
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <_svfiprintf_r+0x1f8>)
 8003e14:	a904      	add	r1, sp, #16
 8003e16:	4638      	mov	r0, r7
 8003e18:	f000 f87a 	bl	8003f10 <_printf_i>
 8003e1c:	e7eb      	b.n	8003df6 <_svfiprintf_r+0x1c2>
 8003e1e:	bf00      	nop
 8003e20:	080044e8 	.word	0x080044e8
 8003e24:	080044f2 	.word	0x080044f2
 8003e28:	00000000 	.word	0x00000000
 8003e2c:	08003b7d 	.word	0x08003b7d
 8003e30:	080044ee 	.word	0x080044ee

08003e34 <_printf_common>:
 8003e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e38:	4616      	mov	r6, r2
 8003e3a:	4699      	mov	r9, r3
 8003e3c:	688a      	ldr	r2, [r1, #8]
 8003e3e:	690b      	ldr	r3, [r1, #16]
 8003e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e44:	4293      	cmp	r3, r2
 8003e46:	bfb8      	it	lt
 8003e48:	4613      	movlt	r3, r2
 8003e4a:	6033      	str	r3, [r6, #0]
 8003e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e50:	4607      	mov	r7, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	b10a      	cbz	r2, 8003e5a <_printf_common+0x26>
 8003e56:	3301      	adds	r3, #1
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	0699      	lsls	r1, r3, #26
 8003e5e:	bf42      	ittt	mi
 8003e60:	6833      	ldrmi	r3, [r6, #0]
 8003e62:	3302      	addmi	r3, #2
 8003e64:	6033      	strmi	r3, [r6, #0]
 8003e66:	6825      	ldr	r5, [r4, #0]
 8003e68:	f015 0506 	ands.w	r5, r5, #6
 8003e6c:	d106      	bne.n	8003e7c <_printf_common+0x48>
 8003e6e:	f104 0a19 	add.w	sl, r4, #25
 8003e72:	68e3      	ldr	r3, [r4, #12]
 8003e74:	6832      	ldr	r2, [r6, #0]
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	42ab      	cmp	r3, r5
 8003e7a:	dc26      	bgt.n	8003eca <_printf_common+0x96>
 8003e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e80:	1e13      	subs	r3, r2, #0
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	bf18      	it	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	0692      	lsls	r2, r2, #26
 8003e8a:	d42b      	bmi.n	8003ee4 <_printf_common+0xb0>
 8003e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e90:	4649      	mov	r1, r9
 8003e92:	4638      	mov	r0, r7
 8003e94:	47c0      	blx	r8
 8003e96:	3001      	adds	r0, #1
 8003e98:	d01e      	beq.n	8003ed8 <_printf_common+0xa4>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	68e5      	ldr	r5, [r4, #12]
 8003e9e:	6832      	ldr	r2, [r6, #0]
 8003ea0:	f003 0306 	and.w	r3, r3, #6
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	bf08      	it	eq
 8003ea8:	1aad      	subeq	r5, r5, r2
 8003eaa:	68a3      	ldr	r3, [r4, #8]
 8003eac:	6922      	ldr	r2, [r4, #16]
 8003eae:	bf0c      	ite	eq
 8003eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eb4:	2500      	movne	r5, #0
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	bfc4      	itt	gt
 8003eba:	1a9b      	subgt	r3, r3, r2
 8003ebc:	18ed      	addgt	r5, r5, r3
 8003ebe:	2600      	movs	r6, #0
 8003ec0:	341a      	adds	r4, #26
 8003ec2:	42b5      	cmp	r5, r6
 8003ec4:	d11a      	bne.n	8003efc <_printf_common+0xc8>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e008      	b.n	8003edc <_printf_common+0xa8>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	4652      	mov	r2, sl
 8003ece:	4649      	mov	r1, r9
 8003ed0:	4638      	mov	r0, r7
 8003ed2:	47c0      	blx	r8
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d103      	bne.n	8003ee0 <_printf_common+0xac>
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee0:	3501      	adds	r5, #1
 8003ee2:	e7c6      	b.n	8003e72 <_printf_common+0x3e>
 8003ee4:	18e1      	adds	r1, r4, r3
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	2030      	movs	r0, #48	; 0x30
 8003eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eee:	4422      	add	r2, r4
 8003ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ef8:	3302      	adds	r3, #2
 8003efa:	e7c7      	b.n	8003e8c <_printf_common+0x58>
 8003efc:	2301      	movs	r3, #1
 8003efe:	4622      	mov	r2, r4
 8003f00:	4649      	mov	r1, r9
 8003f02:	4638      	mov	r0, r7
 8003f04:	47c0      	blx	r8
 8003f06:	3001      	adds	r0, #1
 8003f08:	d0e6      	beq.n	8003ed8 <_printf_common+0xa4>
 8003f0a:	3601      	adds	r6, #1
 8003f0c:	e7d9      	b.n	8003ec2 <_printf_common+0x8e>
	...

08003f10 <_printf_i>:
 8003f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f14:	7e0f      	ldrb	r7, [r1, #24]
 8003f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f18:	2f78      	cmp	r7, #120	; 0x78
 8003f1a:	4691      	mov	r9, r2
 8003f1c:	4680      	mov	r8, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	469a      	mov	sl, r3
 8003f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f26:	d807      	bhi.n	8003f38 <_printf_i+0x28>
 8003f28:	2f62      	cmp	r7, #98	; 0x62
 8003f2a:	d80a      	bhi.n	8003f42 <_printf_i+0x32>
 8003f2c:	2f00      	cmp	r7, #0
 8003f2e:	f000 80d8 	beq.w	80040e2 <_printf_i+0x1d2>
 8003f32:	2f58      	cmp	r7, #88	; 0x58
 8003f34:	f000 80a3 	beq.w	800407e <_printf_i+0x16e>
 8003f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f40:	e03a      	b.n	8003fb8 <_printf_i+0xa8>
 8003f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f46:	2b15      	cmp	r3, #21
 8003f48:	d8f6      	bhi.n	8003f38 <_printf_i+0x28>
 8003f4a:	a101      	add	r1, pc, #4	; (adr r1, 8003f50 <_printf_i+0x40>)
 8003f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f50:	08003fa9 	.word	0x08003fa9
 8003f54:	08003fbd 	.word	0x08003fbd
 8003f58:	08003f39 	.word	0x08003f39
 8003f5c:	08003f39 	.word	0x08003f39
 8003f60:	08003f39 	.word	0x08003f39
 8003f64:	08003f39 	.word	0x08003f39
 8003f68:	08003fbd 	.word	0x08003fbd
 8003f6c:	08003f39 	.word	0x08003f39
 8003f70:	08003f39 	.word	0x08003f39
 8003f74:	08003f39 	.word	0x08003f39
 8003f78:	08003f39 	.word	0x08003f39
 8003f7c:	080040c9 	.word	0x080040c9
 8003f80:	08003fed 	.word	0x08003fed
 8003f84:	080040ab 	.word	0x080040ab
 8003f88:	08003f39 	.word	0x08003f39
 8003f8c:	08003f39 	.word	0x08003f39
 8003f90:	080040eb 	.word	0x080040eb
 8003f94:	08003f39 	.word	0x08003f39
 8003f98:	08003fed 	.word	0x08003fed
 8003f9c:	08003f39 	.word	0x08003f39
 8003fa0:	08003f39 	.word	0x08003f39
 8003fa4:	080040b3 	.word	0x080040b3
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	1d1a      	adds	r2, r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	602a      	str	r2, [r5, #0]
 8003fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0a3      	b.n	8004104 <_printf_i+0x1f4>
 8003fbc:	6820      	ldr	r0, [r4, #0]
 8003fbe:	6829      	ldr	r1, [r5, #0]
 8003fc0:	0606      	lsls	r6, r0, #24
 8003fc2:	f101 0304 	add.w	r3, r1, #4
 8003fc6:	d50a      	bpl.n	8003fde <_printf_i+0xce>
 8003fc8:	680e      	ldr	r6, [r1, #0]
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	2e00      	cmp	r6, #0
 8003fce:	da03      	bge.n	8003fd8 <_printf_i+0xc8>
 8003fd0:	232d      	movs	r3, #45	; 0x2d
 8003fd2:	4276      	negs	r6, r6
 8003fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd8:	485e      	ldr	r0, [pc, #376]	; (8004154 <_printf_i+0x244>)
 8003fda:	230a      	movs	r3, #10
 8003fdc:	e019      	b.n	8004012 <_printf_i+0x102>
 8003fde:	680e      	ldr	r6, [r1, #0]
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fe6:	bf18      	it	ne
 8003fe8:	b236      	sxthne	r6, r6
 8003fea:	e7ef      	b.n	8003fcc <_printf_i+0xbc>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	6820      	ldr	r0, [r4, #0]
 8003ff0:	1d19      	adds	r1, r3, #4
 8003ff2:	6029      	str	r1, [r5, #0]
 8003ff4:	0601      	lsls	r1, r0, #24
 8003ff6:	d501      	bpl.n	8003ffc <_printf_i+0xec>
 8003ff8:	681e      	ldr	r6, [r3, #0]
 8003ffa:	e002      	b.n	8004002 <_printf_i+0xf2>
 8003ffc:	0646      	lsls	r6, r0, #25
 8003ffe:	d5fb      	bpl.n	8003ff8 <_printf_i+0xe8>
 8004000:	881e      	ldrh	r6, [r3, #0]
 8004002:	4854      	ldr	r0, [pc, #336]	; (8004154 <_printf_i+0x244>)
 8004004:	2f6f      	cmp	r7, #111	; 0x6f
 8004006:	bf0c      	ite	eq
 8004008:	2308      	moveq	r3, #8
 800400a:	230a      	movne	r3, #10
 800400c:	2100      	movs	r1, #0
 800400e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004012:	6865      	ldr	r5, [r4, #4]
 8004014:	60a5      	str	r5, [r4, #8]
 8004016:	2d00      	cmp	r5, #0
 8004018:	bfa2      	ittt	ge
 800401a:	6821      	ldrge	r1, [r4, #0]
 800401c:	f021 0104 	bicge.w	r1, r1, #4
 8004020:	6021      	strge	r1, [r4, #0]
 8004022:	b90e      	cbnz	r6, 8004028 <_printf_i+0x118>
 8004024:	2d00      	cmp	r5, #0
 8004026:	d04d      	beq.n	80040c4 <_printf_i+0x1b4>
 8004028:	4615      	mov	r5, r2
 800402a:	fbb6 f1f3 	udiv	r1, r6, r3
 800402e:	fb03 6711 	mls	r7, r3, r1, r6
 8004032:	5dc7      	ldrb	r7, [r0, r7]
 8004034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004038:	4637      	mov	r7, r6
 800403a:	42bb      	cmp	r3, r7
 800403c:	460e      	mov	r6, r1
 800403e:	d9f4      	bls.n	800402a <_printf_i+0x11a>
 8004040:	2b08      	cmp	r3, #8
 8004042:	d10b      	bne.n	800405c <_printf_i+0x14c>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	07de      	lsls	r6, r3, #31
 8004048:	d508      	bpl.n	800405c <_printf_i+0x14c>
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	6861      	ldr	r1, [r4, #4]
 800404e:	4299      	cmp	r1, r3
 8004050:	bfde      	ittt	le
 8004052:	2330      	movle	r3, #48	; 0x30
 8004054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004058:	f105 35ff 	addle.w	r5, r5, #4294967295
 800405c:	1b52      	subs	r2, r2, r5
 800405e:	6122      	str	r2, [r4, #16]
 8004060:	f8cd a000 	str.w	sl, [sp]
 8004064:	464b      	mov	r3, r9
 8004066:	aa03      	add	r2, sp, #12
 8004068:	4621      	mov	r1, r4
 800406a:	4640      	mov	r0, r8
 800406c:	f7ff fee2 	bl	8003e34 <_printf_common>
 8004070:	3001      	adds	r0, #1
 8004072:	d14c      	bne.n	800410e <_printf_i+0x1fe>
 8004074:	f04f 30ff 	mov.w	r0, #4294967295
 8004078:	b004      	add	sp, #16
 800407a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407e:	4835      	ldr	r0, [pc, #212]	; (8004154 <_printf_i+0x244>)
 8004080:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004084:	6829      	ldr	r1, [r5, #0]
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	f851 6b04 	ldr.w	r6, [r1], #4
 800408c:	6029      	str	r1, [r5, #0]
 800408e:	061d      	lsls	r5, r3, #24
 8004090:	d514      	bpl.n	80040bc <_printf_i+0x1ac>
 8004092:	07df      	lsls	r7, r3, #31
 8004094:	bf44      	itt	mi
 8004096:	f043 0320 	orrmi.w	r3, r3, #32
 800409a:	6023      	strmi	r3, [r4, #0]
 800409c:	b91e      	cbnz	r6, 80040a6 <_printf_i+0x196>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	f023 0320 	bic.w	r3, r3, #32
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	2310      	movs	r3, #16
 80040a8:	e7b0      	b.n	800400c <_printf_i+0xfc>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	f043 0320 	orr.w	r3, r3, #32
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	2378      	movs	r3, #120	; 0x78
 80040b4:	4828      	ldr	r0, [pc, #160]	; (8004158 <_printf_i+0x248>)
 80040b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ba:	e7e3      	b.n	8004084 <_printf_i+0x174>
 80040bc:	0659      	lsls	r1, r3, #25
 80040be:	bf48      	it	mi
 80040c0:	b2b6      	uxthmi	r6, r6
 80040c2:	e7e6      	b.n	8004092 <_printf_i+0x182>
 80040c4:	4615      	mov	r5, r2
 80040c6:	e7bb      	b.n	8004040 <_printf_i+0x130>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	6826      	ldr	r6, [r4, #0]
 80040cc:	6961      	ldr	r1, [r4, #20]
 80040ce:	1d18      	adds	r0, r3, #4
 80040d0:	6028      	str	r0, [r5, #0]
 80040d2:	0635      	lsls	r5, r6, #24
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	d501      	bpl.n	80040dc <_printf_i+0x1cc>
 80040d8:	6019      	str	r1, [r3, #0]
 80040da:	e002      	b.n	80040e2 <_printf_i+0x1d2>
 80040dc:	0670      	lsls	r0, r6, #25
 80040de:	d5fb      	bpl.n	80040d8 <_printf_i+0x1c8>
 80040e0:	8019      	strh	r1, [r3, #0]
 80040e2:	2300      	movs	r3, #0
 80040e4:	6123      	str	r3, [r4, #16]
 80040e6:	4615      	mov	r5, r2
 80040e8:	e7ba      	b.n	8004060 <_printf_i+0x150>
 80040ea:	682b      	ldr	r3, [r5, #0]
 80040ec:	1d1a      	adds	r2, r3, #4
 80040ee:	602a      	str	r2, [r5, #0]
 80040f0:	681d      	ldr	r5, [r3, #0]
 80040f2:	6862      	ldr	r2, [r4, #4]
 80040f4:	2100      	movs	r1, #0
 80040f6:	4628      	mov	r0, r5
 80040f8:	f7fc f882 	bl	8000200 <memchr>
 80040fc:	b108      	cbz	r0, 8004102 <_printf_i+0x1f2>
 80040fe:	1b40      	subs	r0, r0, r5
 8004100:	6060      	str	r0, [r4, #4]
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	6123      	str	r3, [r4, #16]
 8004106:	2300      	movs	r3, #0
 8004108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410c:	e7a8      	b.n	8004060 <_printf_i+0x150>
 800410e:	6923      	ldr	r3, [r4, #16]
 8004110:	462a      	mov	r2, r5
 8004112:	4649      	mov	r1, r9
 8004114:	4640      	mov	r0, r8
 8004116:	47d0      	blx	sl
 8004118:	3001      	adds	r0, #1
 800411a:	d0ab      	beq.n	8004074 <_printf_i+0x164>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	079b      	lsls	r3, r3, #30
 8004120:	d413      	bmi.n	800414a <_printf_i+0x23a>
 8004122:	68e0      	ldr	r0, [r4, #12]
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	4298      	cmp	r0, r3
 8004128:	bfb8      	it	lt
 800412a:	4618      	movlt	r0, r3
 800412c:	e7a4      	b.n	8004078 <_printf_i+0x168>
 800412e:	2301      	movs	r3, #1
 8004130:	4632      	mov	r2, r6
 8004132:	4649      	mov	r1, r9
 8004134:	4640      	mov	r0, r8
 8004136:	47d0      	blx	sl
 8004138:	3001      	adds	r0, #1
 800413a:	d09b      	beq.n	8004074 <_printf_i+0x164>
 800413c:	3501      	adds	r5, #1
 800413e:	68e3      	ldr	r3, [r4, #12]
 8004140:	9903      	ldr	r1, [sp, #12]
 8004142:	1a5b      	subs	r3, r3, r1
 8004144:	42ab      	cmp	r3, r5
 8004146:	dcf2      	bgt.n	800412e <_printf_i+0x21e>
 8004148:	e7eb      	b.n	8004122 <_printf_i+0x212>
 800414a:	2500      	movs	r5, #0
 800414c:	f104 0619 	add.w	r6, r4, #25
 8004150:	e7f5      	b.n	800413e <_printf_i+0x22e>
 8004152:	bf00      	nop
 8004154:	080044f9 	.word	0x080044f9
 8004158:	0800450a 	.word	0x0800450a

0800415c <memcpy>:
 800415c:	440a      	add	r2, r1
 800415e:	4291      	cmp	r1, r2
 8004160:	f100 33ff 	add.w	r3, r0, #4294967295
 8004164:	d100      	bne.n	8004168 <memcpy+0xc>
 8004166:	4770      	bx	lr
 8004168:	b510      	push	{r4, lr}
 800416a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800416e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004172:	4291      	cmp	r1, r2
 8004174:	d1f9      	bne.n	800416a <memcpy+0xe>
 8004176:	bd10      	pop	{r4, pc}

08004178 <memmove>:
 8004178:	4288      	cmp	r0, r1
 800417a:	b510      	push	{r4, lr}
 800417c:	eb01 0402 	add.w	r4, r1, r2
 8004180:	d902      	bls.n	8004188 <memmove+0x10>
 8004182:	4284      	cmp	r4, r0
 8004184:	4623      	mov	r3, r4
 8004186:	d807      	bhi.n	8004198 <memmove+0x20>
 8004188:	1e43      	subs	r3, r0, #1
 800418a:	42a1      	cmp	r1, r4
 800418c:	d008      	beq.n	80041a0 <memmove+0x28>
 800418e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004196:	e7f8      	b.n	800418a <memmove+0x12>
 8004198:	4402      	add	r2, r0
 800419a:	4601      	mov	r1, r0
 800419c:	428a      	cmp	r2, r1
 800419e:	d100      	bne.n	80041a2 <memmove+0x2a>
 80041a0:	bd10      	pop	{r4, pc}
 80041a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041aa:	e7f7      	b.n	800419c <memmove+0x24>

080041ac <_free_r>:
 80041ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ae:	2900      	cmp	r1, #0
 80041b0:	d044      	beq.n	800423c <_free_r+0x90>
 80041b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b6:	9001      	str	r0, [sp, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f1a1 0404 	sub.w	r4, r1, #4
 80041be:	bfb8      	it	lt
 80041c0:	18e4      	addlt	r4, r4, r3
 80041c2:	f000 f913 	bl	80043ec <__malloc_lock>
 80041c6:	4a1e      	ldr	r2, [pc, #120]	; (8004240 <_free_r+0x94>)
 80041c8:	9801      	ldr	r0, [sp, #4]
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	b933      	cbnz	r3, 80041dc <_free_r+0x30>
 80041ce:	6063      	str	r3, [r4, #4]
 80041d0:	6014      	str	r4, [r2, #0]
 80041d2:	b003      	add	sp, #12
 80041d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041d8:	f000 b90e 	b.w	80043f8 <__malloc_unlock>
 80041dc:	42a3      	cmp	r3, r4
 80041de:	d908      	bls.n	80041f2 <_free_r+0x46>
 80041e0:	6825      	ldr	r5, [r4, #0]
 80041e2:	1961      	adds	r1, r4, r5
 80041e4:	428b      	cmp	r3, r1
 80041e6:	bf01      	itttt	eq
 80041e8:	6819      	ldreq	r1, [r3, #0]
 80041ea:	685b      	ldreq	r3, [r3, #4]
 80041ec:	1949      	addeq	r1, r1, r5
 80041ee:	6021      	streq	r1, [r4, #0]
 80041f0:	e7ed      	b.n	80041ce <_free_r+0x22>
 80041f2:	461a      	mov	r2, r3
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b10b      	cbz	r3, 80041fc <_free_r+0x50>
 80041f8:	42a3      	cmp	r3, r4
 80041fa:	d9fa      	bls.n	80041f2 <_free_r+0x46>
 80041fc:	6811      	ldr	r1, [r2, #0]
 80041fe:	1855      	adds	r5, r2, r1
 8004200:	42a5      	cmp	r5, r4
 8004202:	d10b      	bne.n	800421c <_free_r+0x70>
 8004204:	6824      	ldr	r4, [r4, #0]
 8004206:	4421      	add	r1, r4
 8004208:	1854      	adds	r4, r2, r1
 800420a:	42a3      	cmp	r3, r4
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	d1e0      	bne.n	80041d2 <_free_r+0x26>
 8004210:	681c      	ldr	r4, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	6053      	str	r3, [r2, #4]
 8004216:	4421      	add	r1, r4
 8004218:	6011      	str	r1, [r2, #0]
 800421a:	e7da      	b.n	80041d2 <_free_r+0x26>
 800421c:	d902      	bls.n	8004224 <_free_r+0x78>
 800421e:	230c      	movs	r3, #12
 8004220:	6003      	str	r3, [r0, #0]
 8004222:	e7d6      	b.n	80041d2 <_free_r+0x26>
 8004224:	6825      	ldr	r5, [r4, #0]
 8004226:	1961      	adds	r1, r4, r5
 8004228:	428b      	cmp	r3, r1
 800422a:	bf04      	itt	eq
 800422c:	6819      	ldreq	r1, [r3, #0]
 800422e:	685b      	ldreq	r3, [r3, #4]
 8004230:	6063      	str	r3, [r4, #4]
 8004232:	bf04      	itt	eq
 8004234:	1949      	addeq	r1, r1, r5
 8004236:	6021      	streq	r1, [r4, #0]
 8004238:	6054      	str	r4, [r2, #4]
 800423a:	e7ca      	b.n	80041d2 <_free_r+0x26>
 800423c:	b003      	add	sp, #12
 800423e:	bd30      	pop	{r4, r5, pc}
 8004240:	2000013c 	.word	0x2000013c

08004244 <sbrk_aligned>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4e0e      	ldr	r6, [pc, #56]	; (8004280 <sbrk_aligned+0x3c>)
 8004248:	460c      	mov	r4, r1
 800424a:	6831      	ldr	r1, [r6, #0]
 800424c:	4605      	mov	r5, r0
 800424e:	b911      	cbnz	r1, 8004256 <sbrk_aligned+0x12>
 8004250:	f000 f8bc 	bl	80043cc <_sbrk_r>
 8004254:	6030      	str	r0, [r6, #0]
 8004256:	4621      	mov	r1, r4
 8004258:	4628      	mov	r0, r5
 800425a:	f000 f8b7 	bl	80043cc <_sbrk_r>
 800425e:	1c43      	adds	r3, r0, #1
 8004260:	d00a      	beq.n	8004278 <sbrk_aligned+0x34>
 8004262:	1cc4      	adds	r4, r0, #3
 8004264:	f024 0403 	bic.w	r4, r4, #3
 8004268:	42a0      	cmp	r0, r4
 800426a:	d007      	beq.n	800427c <sbrk_aligned+0x38>
 800426c:	1a21      	subs	r1, r4, r0
 800426e:	4628      	mov	r0, r5
 8004270:	f000 f8ac 	bl	80043cc <_sbrk_r>
 8004274:	3001      	adds	r0, #1
 8004276:	d101      	bne.n	800427c <sbrk_aligned+0x38>
 8004278:	f04f 34ff 	mov.w	r4, #4294967295
 800427c:	4620      	mov	r0, r4
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	20000140 	.word	0x20000140

08004284 <_malloc_r>:
 8004284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	1ccd      	adds	r5, r1, #3
 800428a:	f025 0503 	bic.w	r5, r5, #3
 800428e:	3508      	adds	r5, #8
 8004290:	2d0c      	cmp	r5, #12
 8004292:	bf38      	it	cc
 8004294:	250c      	movcc	r5, #12
 8004296:	2d00      	cmp	r5, #0
 8004298:	4607      	mov	r7, r0
 800429a:	db01      	blt.n	80042a0 <_malloc_r+0x1c>
 800429c:	42a9      	cmp	r1, r5
 800429e:	d905      	bls.n	80042ac <_malloc_r+0x28>
 80042a0:	230c      	movs	r3, #12
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	2600      	movs	r6, #0
 80042a6:	4630      	mov	r0, r6
 80042a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ac:	4e2e      	ldr	r6, [pc, #184]	; (8004368 <_malloc_r+0xe4>)
 80042ae:	f000 f89d 	bl	80043ec <__malloc_lock>
 80042b2:	6833      	ldr	r3, [r6, #0]
 80042b4:	461c      	mov	r4, r3
 80042b6:	bb34      	cbnz	r4, 8004306 <_malloc_r+0x82>
 80042b8:	4629      	mov	r1, r5
 80042ba:	4638      	mov	r0, r7
 80042bc:	f7ff ffc2 	bl	8004244 <sbrk_aligned>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	4604      	mov	r4, r0
 80042c4:	d14d      	bne.n	8004362 <_malloc_r+0xde>
 80042c6:	6834      	ldr	r4, [r6, #0]
 80042c8:	4626      	mov	r6, r4
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	d140      	bne.n	8004350 <_malloc_r+0xcc>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	4631      	mov	r1, r6
 80042d2:	4638      	mov	r0, r7
 80042d4:	eb04 0803 	add.w	r8, r4, r3
 80042d8:	f000 f878 	bl	80043cc <_sbrk_r>
 80042dc:	4580      	cmp	r8, r0
 80042de:	d13a      	bne.n	8004356 <_malloc_r+0xd2>
 80042e0:	6821      	ldr	r1, [r4, #0]
 80042e2:	3503      	adds	r5, #3
 80042e4:	1a6d      	subs	r5, r5, r1
 80042e6:	f025 0503 	bic.w	r5, r5, #3
 80042ea:	3508      	adds	r5, #8
 80042ec:	2d0c      	cmp	r5, #12
 80042ee:	bf38      	it	cc
 80042f0:	250c      	movcc	r5, #12
 80042f2:	4629      	mov	r1, r5
 80042f4:	4638      	mov	r0, r7
 80042f6:	f7ff ffa5 	bl	8004244 <sbrk_aligned>
 80042fa:	3001      	adds	r0, #1
 80042fc:	d02b      	beq.n	8004356 <_malloc_r+0xd2>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	442b      	add	r3, r5
 8004302:	6023      	str	r3, [r4, #0]
 8004304:	e00e      	b.n	8004324 <_malloc_r+0xa0>
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	1b52      	subs	r2, r2, r5
 800430a:	d41e      	bmi.n	800434a <_malloc_r+0xc6>
 800430c:	2a0b      	cmp	r2, #11
 800430e:	d916      	bls.n	800433e <_malloc_r+0xba>
 8004310:	1961      	adds	r1, r4, r5
 8004312:	42a3      	cmp	r3, r4
 8004314:	6025      	str	r5, [r4, #0]
 8004316:	bf18      	it	ne
 8004318:	6059      	strne	r1, [r3, #4]
 800431a:	6863      	ldr	r3, [r4, #4]
 800431c:	bf08      	it	eq
 800431e:	6031      	streq	r1, [r6, #0]
 8004320:	5162      	str	r2, [r4, r5]
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	4638      	mov	r0, r7
 8004326:	f104 060b 	add.w	r6, r4, #11
 800432a:	f000 f865 	bl	80043f8 <__malloc_unlock>
 800432e:	f026 0607 	bic.w	r6, r6, #7
 8004332:	1d23      	adds	r3, r4, #4
 8004334:	1af2      	subs	r2, r6, r3
 8004336:	d0b6      	beq.n	80042a6 <_malloc_r+0x22>
 8004338:	1b9b      	subs	r3, r3, r6
 800433a:	50a3      	str	r3, [r4, r2]
 800433c:	e7b3      	b.n	80042a6 <_malloc_r+0x22>
 800433e:	6862      	ldr	r2, [r4, #4]
 8004340:	42a3      	cmp	r3, r4
 8004342:	bf0c      	ite	eq
 8004344:	6032      	streq	r2, [r6, #0]
 8004346:	605a      	strne	r2, [r3, #4]
 8004348:	e7ec      	b.n	8004324 <_malloc_r+0xa0>
 800434a:	4623      	mov	r3, r4
 800434c:	6864      	ldr	r4, [r4, #4]
 800434e:	e7b2      	b.n	80042b6 <_malloc_r+0x32>
 8004350:	4634      	mov	r4, r6
 8004352:	6876      	ldr	r6, [r6, #4]
 8004354:	e7b9      	b.n	80042ca <_malloc_r+0x46>
 8004356:	230c      	movs	r3, #12
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	4638      	mov	r0, r7
 800435c:	f000 f84c 	bl	80043f8 <__malloc_unlock>
 8004360:	e7a1      	b.n	80042a6 <_malloc_r+0x22>
 8004362:	6025      	str	r5, [r4, #0]
 8004364:	e7de      	b.n	8004324 <_malloc_r+0xa0>
 8004366:	bf00      	nop
 8004368:	2000013c 	.word	0x2000013c

0800436c <_realloc_r>:
 800436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004370:	4680      	mov	r8, r0
 8004372:	4614      	mov	r4, r2
 8004374:	460e      	mov	r6, r1
 8004376:	b921      	cbnz	r1, 8004382 <_realloc_r+0x16>
 8004378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800437c:	4611      	mov	r1, r2
 800437e:	f7ff bf81 	b.w	8004284 <_malloc_r>
 8004382:	b92a      	cbnz	r2, 8004390 <_realloc_r+0x24>
 8004384:	f7ff ff12 	bl	80041ac <_free_r>
 8004388:	4625      	mov	r5, r4
 800438a:	4628      	mov	r0, r5
 800438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004390:	f000 f838 	bl	8004404 <_malloc_usable_size_r>
 8004394:	4284      	cmp	r4, r0
 8004396:	4607      	mov	r7, r0
 8004398:	d802      	bhi.n	80043a0 <_realloc_r+0x34>
 800439a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800439e:	d812      	bhi.n	80043c6 <_realloc_r+0x5a>
 80043a0:	4621      	mov	r1, r4
 80043a2:	4640      	mov	r0, r8
 80043a4:	f7ff ff6e 	bl	8004284 <_malloc_r>
 80043a8:	4605      	mov	r5, r0
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d0ed      	beq.n	800438a <_realloc_r+0x1e>
 80043ae:	42bc      	cmp	r4, r7
 80043b0:	4622      	mov	r2, r4
 80043b2:	4631      	mov	r1, r6
 80043b4:	bf28      	it	cs
 80043b6:	463a      	movcs	r2, r7
 80043b8:	f7ff fed0 	bl	800415c <memcpy>
 80043bc:	4631      	mov	r1, r6
 80043be:	4640      	mov	r0, r8
 80043c0:	f7ff fef4 	bl	80041ac <_free_r>
 80043c4:	e7e1      	b.n	800438a <_realloc_r+0x1e>
 80043c6:	4635      	mov	r5, r6
 80043c8:	e7df      	b.n	800438a <_realloc_r+0x1e>
	...

080043cc <_sbrk_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4d06      	ldr	r5, [pc, #24]	; (80043e8 <_sbrk_r+0x1c>)
 80043d0:	2300      	movs	r3, #0
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	f7fc fe32 	bl	8001040 <_sbrk>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_sbrk_r+0x1a>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_sbrk_r+0x1a>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000144 	.word	0x20000144

080043ec <__malloc_lock>:
 80043ec:	4801      	ldr	r0, [pc, #4]	; (80043f4 <__malloc_lock+0x8>)
 80043ee:	f000 b811 	b.w	8004414 <__retarget_lock_acquire_recursive>
 80043f2:	bf00      	nop
 80043f4:	20000148 	.word	0x20000148

080043f8 <__malloc_unlock>:
 80043f8:	4801      	ldr	r0, [pc, #4]	; (8004400 <__malloc_unlock+0x8>)
 80043fa:	f000 b80c 	b.w	8004416 <__retarget_lock_release_recursive>
 80043fe:	bf00      	nop
 8004400:	20000148 	.word	0x20000148

08004404 <_malloc_usable_size_r>:
 8004404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004408:	1f18      	subs	r0, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	bfbc      	itt	lt
 800440e:	580b      	ldrlt	r3, [r1, r0]
 8004410:	18c0      	addlt	r0, r0, r3
 8004412:	4770      	bx	lr

08004414 <__retarget_lock_acquire_recursive>:
 8004414:	4770      	bx	lr

08004416 <__retarget_lock_release_recursive>:
 8004416:	4770      	bx	lr

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
